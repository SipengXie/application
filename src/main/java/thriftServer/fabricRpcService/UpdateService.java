/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftServer.fabricRpcService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-05-31")
public class UpdateService {

  public interface Iface {

    public void createOpinionRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token) throws org.apache.thrift.TException;

    public void createDirectRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException;

    public void createReviewRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token) throws org.apache.thrift.TException;

    public void createUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException;

    public void modifyOpinionRecord(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException;

    public void modifyUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createOpinionRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void createDirectRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void createReviewRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void createUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void modifyOpinionRecord(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void modifyUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void createOpinionRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token) throws org.apache.thrift.TException
    {
      send_createOpinionRecord(id, department, name, object, type, opinionTime, token);
      recv_createOpinionRecord();
    }

    public void send_createOpinionRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token) throws org.apache.thrift.TException
    {
      createOpinionRecord_args args = new createOpinionRecord_args();
      args.setId(id);
      args.setDepartment(department);
      args.setName(name);
      args.setObject(object);
      args.setType(type);
      args.setOpinionTime(opinionTime);
      args.setToken(token);
      sendBase("createOpinionRecord", args);
    }

    public void recv_createOpinionRecord() throws org.apache.thrift.TException
    {
      createOpinionRecord_result result = new createOpinionRecord_result();
      receiveBase(result, "createOpinionRecord");
      return;
    }

    public void createDirectRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      send_createDirectRecord(id, department, name, object, type, opinionTime, doneTime, content, token);
      recv_createDirectRecord();
    }

    public void send_createDirectRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      createDirectRecord_args args = new createDirectRecord_args();
      args.setId(id);
      args.setDepartment(department);
      args.setName(name);
      args.setObject(object);
      args.setType(type);
      args.setOpinionTime(opinionTime);
      args.setDoneTime(doneTime);
      args.setContent(content);
      args.setToken(token);
      sendBase("createDirectRecord", args);
    }

    public void recv_createDirectRecord() throws org.apache.thrift.TException
    {
      createDirectRecord_result result = new createDirectRecord_result();
      receiveBase(result, "createDirectRecord");
      return;
    }

    public void createReviewRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token) throws org.apache.thrift.TException
    {
      send_createReviewRecord(id, department, name, object, pre, reviewTime, result, token);
      recv_createReviewRecord();
    }

    public void send_createReviewRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token) throws org.apache.thrift.TException
    {
      createReviewRecord_args args = new createReviewRecord_args();
      args.setId(id);
      args.setDepartment(department);
      args.setName(name);
      args.setObject(object);
      args.setPre(pre);
      args.setReviewTime(reviewTime);
      args.setResult(result);
      args.setToken(token);
      sendBase("createReviewRecord", args);
    }

    public void recv_createReviewRecord() throws org.apache.thrift.TException
    {
      createReviewRecord_result result = new createReviewRecord_result();
      receiveBase(result, "createReviewRecord");
      return;
    }

    public void createUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      send_createUserRecord(id, department, name, role, content, token);
      recv_createUserRecord();
    }

    public void send_createUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      createUserRecord_args args = new createUserRecord_args();
      args.setId(id);
      args.setDepartment(department);
      args.setName(name);
      args.setRole(role);
      args.setContent(content);
      args.setToken(token);
      sendBase("createUserRecord", args);
    }

    public void recv_createUserRecord() throws org.apache.thrift.TException
    {
      createUserRecord_result result = new createUserRecord_result();
      receiveBase(result, "createUserRecord");
      return;
    }

    public void modifyOpinionRecord(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      send_modifyOpinionRecord(id, doneTime, content, token);
      recv_modifyOpinionRecord();
    }

    public void send_modifyOpinionRecord(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      modifyOpinionRecord_args args = new modifyOpinionRecord_args();
      args.setId(id);
      args.setDoneTime(doneTime);
      args.setContent(content);
      args.setToken(token);
      sendBase("modifyOpinionRecord", args);
    }

    public void recv_modifyOpinionRecord() throws org.apache.thrift.TException
    {
      modifyOpinionRecord_result result = new modifyOpinionRecord_result();
      receiveBase(result, "modifyOpinionRecord");
      return;
    }

    public void modifyUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      send_modifyUserRecord(id, department, name, role, content, token);
      recv_modifyUserRecord();
    }

    public void send_modifyUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token) throws org.apache.thrift.TException
    {
      modifyUserRecord_args args = new modifyUserRecord_args();
      args.setId(id);
      args.setDepartment(department);
      args.setName(name);
      args.setRole(role);
      args.setContent(content);
      args.setToken(token);
      sendBase("modifyUserRecord", args);
    }

    public void recv_modifyUserRecord() throws org.apache.thrift.TException
    {
      modifyUserRecord_result result = new modifyUserRecord_result();
      receiveBase(result, "modifyUserRecord");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createOpinionRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOpinionRecord_call method_call = new createOpinionRecord_call(id, department, name, object, type, opinionTime, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOpinionRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String department;
      private java.lang.String name;
      private java.lang.String object;
      private java.lang.String type;
      private java.lang.String opinionTime;
      private java.lang.String token;
      public createOpinionRecord_call(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.department = department;
        this.name = name;
        this.object = object;
        this.type = type;
        this.opinionTime = opinionTime;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOpinionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOpinionRecord_args args = new createOpinionRecord_args();
        args.setId(id);
        args.setDepartment(department);
        args.setName(name);
        args.setObject(object);
        args.setType(type);
        args.setOpinionTime(opinionTime);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void createDirectRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createDirectRecord_call method_call = new createDirectRecord_call(id, department, name, object, type, opinionTime, doneTime, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createDirectRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String department;
      private java.lang.String name;
      private java.lang.String object;
      private java.lang.String type;
      private java.lang.String opinionTime;
      private java.lang.String doneTime;
      private java.lang.String content;
      private java.lang.String token;
      public createDirectRecord_call(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String type, java.lang.String opinionTime, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.department = department;
        this.name = name;
        this.object = object;
        this.type = type;
        this.opinionTime = opinionTime;
        this.doneTime = doneTime;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDirectRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createDirectRecord_args args = new createDirectRecord_args();
        args.setId(id);
        args.setDepartment(department);
        args.setName(name);
        args.setObject(object);
        args.setType(type);
        args.setOpinionTime(opinionTime);
        args.setDoneTime(doneTime);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void createReviewRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createReviewRecord_call method_call = new createReviewRecord_call(id, department, name, object, pre, reviewTime, result, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createReviewRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String department;
      private java.lang.String name;
      private java.lang.String object;
      private java.lang.String pre;
      private java.lang.String reviewTime;
      private java.lang.String result;
      private java.lang.String token;
      public createReviewRecord_call(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String object, java.lang.String pre, java.lang.String reviewTime, java.lang.String result, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.department = department;
        this.name = name;
        this.object = object;
        this.pre = pre;
        this.reviewTime = reviewTime;
        this.result = result;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createReviewRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createReviewRecord_args args = new createReviewRecord_args();
        args.setId(id);
        args.setDepartment(department);
        args.setName(name);
        args.setObject(object);
        args.setPre(pre);
        args.setReviewTime(reviewTime);
        args.setResult(result);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void createUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createUserRecord_call method_call = new createUserRecord_call(id, department, name, role, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createUserRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String department;
      private java.lang.String name;
      private java.lang.String role;
      private java.lang.String content;
      private java.lang.String token;
      public createUserRecord_call(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.department = department;
        this.name = name;
        this.role = role;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUserRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createUserRecord_args args = new createUserRecord_args();
        args.setId(id);
        args.setDepartment(department);
        args.setName(name);
        args.setRole(role);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void modifyOpinionRecord(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyOpinionRecord_call method_call = new modifyOpinionRecord_call(id, doneTime, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyOpinionRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String doneTime;
      private java.lang.String content;
      private java.lang.String token;
      public modifyOpinionRecord_call(java.lang.String id, java.lang.String doneTime, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.doneTime = doneTime;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyOpinionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyOpinionRecord_args args = new modifyOpinionRecord_args();
        args.setId(id);
        args.setDoneTime(doneTime);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void modifyUserRecord(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyUserRecord_call method_call = new modifyUserRecord_call(id, department, name, role, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyUserRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String id;
      private java.lang.String department;
      private java.lang.String name;
      private java.lang.String role;
      private java.lang.String content;
      private java.lang.String token;
      public modifyUserRecord_call(java.lang.String id, java.lang.String department, java.lang.String name, java.lang.String role, java.lang.String content, java.lang.String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.department = department;
        this.name = name;
        this.role = role;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyUserRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyUserRecord_args args = new modifyUserRecord_args();
        args.setId(id);
        args.setDepartment(department);
        args.setName(name);
        args.setRole(role);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createOpinionRecord", new createOpinionRecord());
      processMap.put("createDirectRecord", new createDirectRecord());
      processMap.put("createReviewRecord", new createReviewRecord());
      processMap.put("createUserRecord", new createUserRecord());
      processMap.put("modifyOpinionRecord", new modifyOpinionRecord());
      processMap.put("modifyUserRecord", new modifyUserRecord());
      return processMap;
    }

    public static class createOpinionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOpinionRecord_args> {
      public createOpinionRecord() {
        super("createOpinionRecord");
      }

      public createOpinionRecord_args getEmptyArgsInstance() {
        return new createOpinionRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createOpinionRecord_result getResult(I iface, createOpinionRecord_args args) throws org.apache.thrift.TException {
        createOpinionRecord_result result = new createOpinionRecord_result();
        iface.createOpinionRecord(args.id, args.department, args.name, args.object, args.type, args.opinionTime, args.token);
        return result;
      }
    }

    public static class createDirectRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createDirectRecord_args> {
      public createDirectRecord() {
        super("createDirectRecord");
      }

      public createDirectRecord_args getEmptyArgsInstance() {
        return new createDirectRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createDirectRecord_result getResult(I iface, createDirectRecord_args args) throws org.apache.thrift.TException {
        createDirectRecord_result result = new createDirectRecord_result();
        iface.createDirectRecord(args.id, args.department, args.name, args.object, args.type, args.opinionTime, args.doneTime, args.content, args.token);
        return result;
      }
    }

    public static class createReviewRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createReviewRecord_args> {
      public createReviewRecord() {
        super("createReviewRecord");
      }

      public createReviewRecord_args getEmptyArgsInstance() {
        return new createReviewRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createReviewRecord_result getResult(I iface, createReviewRecord_args args) throws org.apache.thrift.TException {
        createReviewRecord_result result = new createReviewRecord_result();
        iface.createReviewRecord(args.id, args.department, args.name, args.object, args.pre, args.reviewTime, args.result, args.token);
        return result;
      }
    }

    public static class createUserRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUserRecord_args> {
      public createUserRecord() {
        super("createUserRecord");
      }

      public createUserRecord_args getEmptyArgsInstance() {
        return new createUserRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createUserRecord_result getResult(I iface, createUserRecord_args args) throws org.apache.thrift.TException {
        createUserRecord_result result = new createUserRecord_result();
        iface.createUserRecord(args.id, args.department, args.name, args.role, args.content, args.token);
        return result;
      }
    }

    public static class modifyOpinionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyOpinionRecord_args> {
      public modifyOpinionRecord() {
        super("modifyOpinionRecord");
      }

      public modifyOpinionRecord_args getEmptyArgsInstance() {
        return new modifyOpinionRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public modifyOpinionRecord_result getResult(I iface, modifyOpinionRecord_args args) throws org.apache.thrift.TException {
        modifyOpinionRecord_result result = new modifyOpinionRecord_result();
        iface.modifyOpinionRecord(args.id, args.doneTime, args.content, args.token);
        return result;
      }
    }

    public static class modifyUserRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyUserRecord_args> {
      public modifyUserRecord() {
        super("modifyUserRecord");
      }

      public modifyUserRecord_args getEmptyArgsInstance() {
        return new modifyUserRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public modifyUserRecord_result getResult(I iface, modifyUserRecord_args args) throws org.apache.thrift.TException {
        modifyUserRecord_result result = new modifyUserRecord_result();
        iface.modifyUserRecord(args.id, args.department, args.name, args.role, args.content, args.token);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createOpinionRecord", new createOpinionRecord());
      processMap.put("createDirectRecord", new createDirectRecord());
      processMap.put("createReviewRecord", new createReviewRecord());
      processMap.put("createUserRecord", new createUserRecord());
      processMap.put("modifyOpinionRecord", new modifyOpinionRecord());
      processMap.put("modifyUserRecord", new modifyUserRecord());
      return processMap;
    }

    public static class createOpinionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOpinionRecord_args, Void> {
      public createOpinionRecord() {
        super("createOpinionRecord");
      }

      public createOpinionRecord_args getEmptyArgsInstance() {
        return new createOpinionRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            createOpinionRecord_result result = new createOpinionRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOpinionRecord_result result = new createOpinionRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOpinionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createOpinionRecord(args.id, args.department, args.name, args.object, args.type, args.opinionTime, args.token,resultHandler);
      }
    }

    public static class createDirectRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createDirectRecord_args, Void> {
      public createDirectRecord() {
        super("createDirectRecord");
      }

      public createDirectRecord_args getEmptyArgsInstance() {
        return new createDirectRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            createDirectRecord_result result = new createDirectRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createDirectRecord_result result = new createDirectRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createDirectRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createDirectRecord(args.id, args.department, args.name, args.object, args.type, args.opinionTime, args.doneTime, args.content, args.token,resultHandler);
      }
    }

    public static class createReviewRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createReviewRecord_args, Void> {
      public createReviewRecord() {
        super("createReviewRecord");
      }

      public createReviewRecord_args getEmptyArgsInstance() {
        return new createReviewRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            createReviewRecord_result result = new createReviewRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createReviewRecord_result result = new createReviewRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createReviewRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createReviewRecord(args.id, args.department, args.name, args.object, args.pre, args.reviewTime, args.result, args.token,resultHandler);
      }
    }

    public static class createUserRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createUserRecord_args, Void> {
      public createUserRecord() {
        super("createUserRecord");
      }

      public createUserRecord_args getEmptyArgsInstance() {
        return new createUserRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            createUserRecord_result result = new createUserRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createUserRecord_result result = new createUserRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createUserRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createUserRecord(args.id, args.department, args.name, args.role, args.content, args.token,resultHandler);
      }
    }

    public static class modifyOpinionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyOpinionRecord_args, Void> {
      public modifyOpinionRecord() {
        super("modifyOpinionRecord");
      }

      public modifyOpinionRecord_args getEmptyArgsInstance() {
        return new modifyOpinionRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            modifyOpinionRecord_result result = new modifyOpinionRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modifyOpinionRecord_result result = new modifyOpinionRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyOpinionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.modifyOpinionRecord(args.id, args.doneTime, args.content, args.token,resultHandler);
      }
    }

    public static class modifyUserRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyUserRecord_args, Void> {
      public modifyUserRecord() {
        super("modifyUserRecord");
      }

      public modifyUserRecord_args getEmptyArgsInstance() {
        return new modifyUserRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
          public void onComplete(Void o) {
            modifyUserRecord_result result = new modifyUserRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modifyUserRecord_result result = new modifyUserRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyUserRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.modifyUserRecord(args.id, args.department, args.name, args.role, args.content, args.token,resultHandler);
      }
    }

  }

  public static class createOpinionRecord_args implements org.apache.thrift.TBase<createOpinionRecord_args, createOpinionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOpinionRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOpinionRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OPINION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opinionTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOpinionRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOpinionRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String object; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String opinionTime; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DEPARTMENT((short)2, "department"),
      NAME((short)3, "name"),
      OBJECT((short)4, "object"),
      TYPE((short)5, "type"),
      OPINION_TIME((short)6, "opinionTime"),
      TOKEN((short)7, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // NAME
            return NAME;
          case 4: // OBJECT
            return OBJECT;
          case 5: // TYPE
            return TYPE;
          case 6: // OPINION_TIME
            return OPINION_TIME;
          case 7: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPINION_TIME, new org.apache.thrift.meta_data.FieldMetaData("opinionTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOpinionRecord_args.class, metaDataMap);
    }

    public createOpinionRecord_args() {
    }

    public createOpinionRecord_args(
            java.lang.String id,
            java.lang.String department,
            java.lang.String name,
            java.lang.String object,
            java.lang.String type,
            java.lang.String opinionTime,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.department = department;
      this.name = name;
      this.object = object;
      this.type = type;
      this.opinionTime = opinionTime;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOpinionRecord_args(createOpinionRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOpinionTime()) {
        this.opinionTime = other.opinionTime;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public createOpinionRecord_args deepCopy() {
      return new createOpinionRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.department = null;
      this.name = null;
      this.object = null;
      this.type = null;
      this.opinionTime = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public createOpinionRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDepartment() {
      return this.department;
    }

    public createOpinionRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public createOpinionRecord_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getObject() {
      return this.object;
    }

    public createOpinionRecord_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getType() {
      return this.type;
    }

    public createOpinionRecord_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOpinionTime() {
      return this.opinionTime;
    }

    public createOpinionRecord_args setOpinionTime(@org.apache.thrift.annotation.Nullable java.lang.String opinionTime) {
      this.opinionTime = opinionTime;
      return this;
    }

    public void unsetOpinionTime() {
      this.opinionTime = null;
    }

    /** Returns true if field opinionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinionTime() {
      return this.opinionTime != null;
    }

    public void setOpinionTimeIsSet(boolean value) {
      if (!value) {
        this.opinionTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public createOpinionRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DEPARTMENT:
          if (value == null) {
            unsetDepartment();
          } else {
            setDepartment((java.lang.String)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

        case OBJECT:
          if (value == null) {
            unsetObject();
          } else {
            setObject((java.lang.String)value);
          }
          break;

        case TYPE:
          if (value == null) {
            unsetType();
          } else {
            setType((java.lang.String)value);
          }
          break;

        case OPINION_TIME:
          if (value == null) {
            unsetOpinionTime();
          } else {
            setOpinionTime((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DEPARTMENT:
          return getDepartment();

        case NAME:
          return getName();

        case OBJECT:
          return getObject();

        case TYPE:
          return getType();

        case OPINION_TIME:
          return getOpinionTime();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DEPARTMENT:
          return isSetDepartment();
        case NAME:
          return isSetName();
        case OBJECT:
          return isSetObject();
        case TYPE:
          return isSetType();
        case OPINION_TIME:
          return isSetOpinionTime();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createOpinionRecord_args)
        return this.equals((createOpinionRecord_args)that);
      return false;
    }

    public boolean equals(createOpinionRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_opinionTime = true && this.isSetOpinionTime();
      boolean that_present_opinionTime = true && that.isSetOpinionTime();
      if (this_present_opinionTime || that_present_opinionTime) {
        if (!(this_present_opinionTime && that_present_opinionTime))
          return false;
        if (!this.opinionTime.equals(that.opinionTime))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
      if (isSetObject())
        hashCode = hashCode * 8191 + object.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOpinionTime()) ? 131071 : 524287);
      if (isSetOpinionTime())
        hashCode = hashCode * 8191 + opinionTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOpinionRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOpinionTime(), other.isSetOpinionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinionTime, other.opinionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOpinionRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opinionTime:");
      if (this.opinionTime == null) {
        sb.append("null");
      } else {
        sb.append(this.opinionTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOpinionRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOpinionRecord_argsStandardScheme getScheme() {
        return new createOpinionRecord_argsStandardScheme();
      }
    }

    private static class createOpinionRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOpinionRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPINION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.opinionTime = iprot.readString();
                struct.setOpinionTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOpinionRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.opinionTime != null) {
          oprot.writeFieldBegin(OPINION_TIME_FIELD_DESC);
          oprot.writeString(struct.opinionTime);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOpinionRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOpinionRecord_argsTupleScheme getScheme() {
        return new createOpinionRecord_argsTupleScheme();
      }
    }

    private static class createOpinionRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOpinionRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetObject()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        if (struct.isSetOpinionTime()) {
          optionals.set(5);
        }
        if (struct.isSetToken()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetOpinionTime()) {
          oprot.writeString(struct.opinionTime);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.opinionTime = iprot.readString();
          struct.setOpinionTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOpinionRecord_result implements org.apache.thrift.TBase<createOpinionRecord_result, createOpinionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOpinionRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOpinionRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOpinionRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOpinionRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOpinionRecord_result.class, metaDataMap);
    }

    public createOpinionRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOpinionRecord_result(createOpinionRecord_result other) {
    }

    public createOpinionRecord_result deepCopy() {
      return new createOpinionRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createOpinionRecord_result)
        return this.equals((createOpinionRecord_result)that);
      return false;
    }

    public boolean equals(createOpinionRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(createOpinionRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOpinionRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOpinionRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOpinionRecord_resultStandardScheme getScheme() {
        return new createOpinionRecord_resultStandardScheme();
      }
    }

    private static class createOpinionRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOpinionRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOpinionRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOpinionRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOpinionRecord_resultTupleScheme getScheme() {
        return new createOpinionRecord_resultTupleScheme();
      }
    }

    private static class createOpinionRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOpinionRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createDirectRecord_args implements org.apache.thrift.TBase<createDirectRecord_args, createDirectRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<createDirectRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDirectRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OPINION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opinionTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DONE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("doneTime", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createDirectRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createDirectRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String object; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String opinionTime; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String doneTime; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DEPARTMENT((short)2, "department"),
      NAME((short)3, "name"),
      OBJECT((short)4, "object"),
      TYPE((short)5, "type"),
      OPINION_TIME((short)6, "opinionTime"),
      DONE_TIME((short)7, "doneTime"),
      CONTENT((short)8, "content"),
      TOKEN((short)9, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // NAME
            return NAME;
          case 4: // OBJECT
            return OBJECT;
          case 5: // TYPE
            return TYPE;
          case 6: // OPINION_TIME
            return OPINION_TIME;
          case 7: // DONE_TIME
            return DONE_TIME;
          case 8: // CONTENT
            return CONTENT;
          case 9: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPINION_TIME, new org.apache.thrift.meta_data.FieldMetaData("opinionTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DONE_TIME, new org.apache.thrift.meta_data.FieldMetaData("doneTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDirectRecord_args.class, metaDataMap);
    }

    public createDirectRecord_args() {
    }

    public createDirectRecord_args(
            java.lang.String id,
            java.lang.String department,
            java.lang.String name,
            java.lang.String object,
            java.lang.String type,
            java.lang.String opinionTime,
            java.lang.String doneTime,
            java.lang.String content,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.department = department;
      this.name = name;
      this.object = object;
      this.type = type;
      this.opinionTime = opinionTime;
      this.doneTime = doneTime;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDirectRecord_args(createDirectRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOpinionTime()) {
        this.opinionTime = other.opinionTime;
      }
      if (other.isSetDoneTime()) {
        this.doneTime = other.doneTime;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public createDirectRecord_args deepCopy() {
      return new createDirectRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.department = null;
      this.name = null;
      this.object = null;
      this.type = null;
      this.opinionTime = null;
      this.doneTime = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public createDirectRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDepartment() {
      return this.department;
    }

    public createDirectRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public createDirectRecord_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getObject() {
      return this.object;
    }

    public createDirectRecord_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getType() {
      return this.type;
    }

    public createDirectRecord_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOpinionTime() {
      return this.opinionTime;
    }

    public createDirectRecord_args setOpinionTime(@org.apache.thrift.annotation.Nullable java.lang.String opinionTime) {
      this.opinionTime = opinionTime;
      return this;
    }

    public void unsetOpinionTime() {
      this.opinionTime = null;
    }

    /** Returns true if field opinionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinionTime() {
      return this.opinionTime != null;
    }

    public void setOpinionTimeIsSet(boolean value) {
      if (!value) {
        this.opinionTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDoneTime() {
      return this.doneTime;
    }

    public createDirectRecord_args setDoneTime(@org.apache.thrift.annotation.Nullable java.lang.String doneTime) {
      this.doneTime = doneTime;
      return this;
    }

    public void unsetDoneTime() {
      this.doneTime = null;
    }

    /** Returns true if field doneTime is set (has been assigned a value) and false otherwise */
    public boolean isSetDoneTime() {
      return this.doneTime != null;
    }

    public void setDoneTimeIsSet(boolean value) {
      if (!value) {
        this.doneTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
      return this.content;
    }

    public createDirectRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public createDirectRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DEPARTMENT:
          if (value == null) {
            unsetDepartment();
          } else {
            setDepartment((java.lang.String)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

        case OBJECT:
          if (value == null) {
            unsetObject();
          } else {
            setObject((java.lang.String)value);
          }
          break;

        case TYPE:
          if (value == null) {
            unsetType();
          } else {
            setType((java.lang.String)value);
          }
          break;

        case OPINION_TIME:
          if (value == null) {
            unsetOpinionTime();
          } else {
            setOpinionTime((java.lang.String)value);
          }
          break;

        case DONE_TIME:
          if (value == null) {
            unsetDoneTime();
          } else {
            setDoneTime((java.lang.String)value);
          }
          break;

        case CONTENT:
          if (value == null) {
            unsetContent();
          } else {
            setContent((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DEPARTMENT:
          return getDepartment();

        case NAME:
          return getName();

        case OBJECT:
          return getObject();

        case TYPE:
          return getType();

        case OPINION_TIME:
          return getOpinionTime();

        case DONE_TIME:
          return getDoneTime();

        case CONTENT:
          return getContent();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DEPARTMENT:
          return isSetDepartment();
        case NAME:
          return isSetName();
        case OBJECT:
          return isSetObject();
        case TYPE:
          return isSetType();
        case OPINION_TIME:
          return isSetOpinionTime();
        case DONE_TIME:
          return isSetDoneTime();
        case CONTENT:
          return isSetContent();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createDirectRecord_args)
        return this.equals((createDirectRecord_args)that);
      return false;
    }

    public boolean equals(createDirectRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_opinionTime = true && this.isSetOpinionTime();
      boolean that_present_opinionTime = true && that.isSetOpinionTime();
      if (this_present_opinionTime || that_present_opinionTime) {
        if (!(this_present_opinionTime && that_present_opinionTime))
          return false;
        if (!this.opinionTime.equals(that.opinionTime))
          return false;
      }

      boolean this_present_doneTime = true && this.isSetDoneTime();
      boolean that_present_doneTime = true && that.isSetDoneTime();
      if (this_present_doneTime || that_present_doneTime) {
        if (!(this_present_doneTime && that_present_doneTime))
          return false;
        if (!this.doneTime.equals(that.doneTime))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
      if (isSetObject())
        hashCode = hashCode * 8191 + object.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOpinionTime()) ? 131071 : 524287);
      if (isSetOpinionTime())
        hashCode = hashCode * 8191 + opinionTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetDoneTime()) ? 131071 : 524287);
      if (isSetDoneTime())
        hashCode = hashCode * 8191 + doneTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createDirectRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOpinionTime(), other.isSetOpinionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinionTime, other.opinionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDoneTime(), other.isSetDoneTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoneTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doneTime, other.doneTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createDirectRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opinionTime:");
      if (this.opinionTime == null) {
        sb.append("null");
      } else {
        sb.append(this.opinionTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doneTime:");
      if (this.doneTime == null) {
        sb.append("null");
      } else {
        sb.append(this.doneTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDirectRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDirectRecord_argsStandardScheme getScheme() {
        return new createDirectRecord_argsStandardScheme();
      }
    }

    private static class createDirectRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createDirectRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPINION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.opinionTime = iprot.readString();
                struct.setOpinionTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DONE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.doneTime = iprot.readString();
                struct.setDoneTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDirectRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.opinionTime != null) {
          oprot.writeFieldBegin(OPINION_TIME_FIELD_DESC);
          oprot.writeString(struct.opinionTime);
          oprot.writeFieldEnd();
        }
        if (struct.doneTime != null) {
          oprot.writeFieldBegin(DONE_TIME_FIELD_DESC);
          oprot.writeString(struct.doneTime);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDirectRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDirectRecord_argsTupleScheme getScheme() {
        return new createDirectRecord_argsTupleScheme();
      }
    }

    private static class createDirectRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createDirectRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetObject()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        if (struct.isSetOpinionTime()) {
          optionals.set(5);
        }
        if (struct.isSetDoneTime()) {
          optionals.set(6);
        }
        if (struct.isSetContent()) {
          optionals.set(7);
        }
        if (struct.isSetToken()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetOpinionTime()) {
          oprot.writeString(struct.opinionTime);
        }
        if (struct.isSetDoneTime()) {
          oprot.writeString(struct.doneTime);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.opinionTime = iprot.readString();
          struct.setOpinionTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.doneTime = iprot.readString();
          struct.setDoneTimeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(8)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createDirectRecord_result implements org.apache.thrift.TBase<createDirectRecord_result, createDirectRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<createDirectRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDirectRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createDirectRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createDirectRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDirectRecord_result.class, metaDataMap);
    }

    public createDirectRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDirectRecord_result(createDirectRecord_result other) {
    }

    public createDirectRecord_result deepCopy() {
      return new createDirectRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createDirectRecord_result)
        return this.equals((createDirectRecord_result)that);
      return false;
    }

    public boolean equals(createDirectRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(createDirectRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createDirectRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDirectRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDirectRecord_resultStandardScheme getScheme() {
        return new createDirectRecord_resultStandardScheme();
      }
    }

    private static class createDirectRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createDirectRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDirectRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDirectRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDirectRecord_resultTupleScheme getScheme() {
        return new createDirectRecord_resultTupleScheme();
      }
    }

    private static class createDirectRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createDirectRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createReviewRecord_args implements org.apache.thrift.TBase<createReviewRecord_args, createReviewRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<createReviewRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReviewRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRE_FIELD_DESC = new org.apache.thrift.protocol.TField("pre", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField REVIEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createReviewRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createReviewRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String object; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String pre; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String reviewTime; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String result; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DEPARTMENT((short)2, "department"),
      NAME((short)3, "name"),
      OBJECT((short)4, "object"),
      PRE((short)5, "pre"),
      REVIEW_TIME((short)6, "reviewTime"),
      RESULT((short)7, "result"),
      TOKEN((short)8, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // NAME
            return NAME;
          case 4: // OBJECT
            return OBJECT;
          case 5: // PRE
            return PRE;
          case 6: // REVIEW_TIME
            return REVIEW_TIME;
          case 7: // RESULT
            return RESULT;
          case 8: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRE, new org.apache.thrift.meta_data.FieldMetaData("pre", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("reviewTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReviewRecord_args.class, metaDataMap);
    }

    public createReviewRecord_args() {
    }

    public createReviewRecord_args(
            java.lang.String id,
            java.lang.String department,
            java.lang.String name,
            java.lang.String object,
            java.lang.String pre,
            java.lang.String reviewTime,
            java.lang.String result,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.department = department;
      this.name = name;
      this.object = object;
      this.pre = pre;
      this.reviewTime = reviewTime;
      this.result = result;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReviewRecord_args(createReviewRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetPre()) {
        this.pre = other.pre;
      }
      if (other.isSetReviewTime()) {
        this.reviewTime = other.reviewTime;
      }
      if (other.isSetResult()) {
        this.result = other.result;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public createReviewRecord_args deepCopy() {
      return new createReviewRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.department = null;
      this.name = null;
      this.object = null;
      this.pre = null;
      this.reviewTime = null;
      this.result = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public createReviewRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDepartment() {
      return this.department;
    }

    public createReviewRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public createReviewRecord_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getObject() {
      return this.object;
    }

    public createReviewRecord_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPre() {
      return this.pre;
    }

    public createReviewRecord_args setPre(@org.apache.thrift.annotation.Nullable java.lang.String pre) {
      this.pre = pre;
      return this;
    }

    public void unsetPre() {
      this.pre = null;
    }

    /** Returns true if field pre is set (has been assigned a value) and false otherwise */
    public boolean isSetPre() {
      return this.pre != null;
    }

    public void setPreIsSet(boolean value) {
      if (!value) {
        this.pre = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getReviewTime() {
      return this.reviewTime;
    }

    public createReviewRecord_args setReviewTime(@org.apache.thrift.annotation.Nullable java.lang.String reviewTime) {
      this.reviewTime = reviewTime;
      return this;
    }

    public void unsetReviewTime() {
      this.reviewTime = null;
    }

    /** Returns true if field reviewTime is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewTime() {
      return this.reviewTime != null;
    }

    public void setReviewTimeIsSet(boolean value) {
      if (!value) {
        this.reviewTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResult() {
      return this.result;
    }

    public createReviewRecord_args setResult(@org.apache.thrift.annotation.Nullable java.lang.String result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public createReviewRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DEPARTMENT:
          if (value == null) {
            unsetDepartment();
          } else {
            setDepartment((java.lang.String)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

        case OBJECT:
          if (value == null) {
            unsetObject();
          } else {
            setObject((java.lang.String)value);
          }
          break;

        case PRE:
          if (value == null) {
            unsetPre();
          } else {
            setPre((java.lang.String)value);
          }
          break;

        case REVIEW_TIME:
          if (value == null) {
            unsetReviewTime();
          } else {
            setReviewTime((java.lang.String)value);
          }
          break;

        case RESULT:
          if (value == null) {
            unsetResult();
          } else {
            setResult((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DEPARTMENT:
          return getDepartment();

        case NAME:
          return getName();

        case OBJECT:
          return getObject();

        case PRE:
          return getPre();

        case REVIEW_TIME:
          return getReviewTime();

        case RESULT:
          return getResult();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DEPARTMENT:
          return isSetDepartment();
        case NAME:
          return isSetName();
        case OBJECT:
          return isSetObject();
        case PRE:
          return isSetPre();
        case REVIEW_TIME:
          return isSetReviewTime();
        case RESULT:
          return isSetResult();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createReviewRecord_args)
        return this.equals((createReviewRecord_args)that);
      return false;
    }

    public boolean equals(createReviewRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_pre = true && this.isSetPre();
      boolean that_present_pre = true && that.isSetPre();
      if (this_present_pre || that_present_pre) {
        if (!(this_present_pre && that_present_pre))
          return false;
        if (!this.pre.equals(that.pre))
          return false;
      }

      boolean this_present_reviewTime = true && this.isSetReviewTime();
      boolean that_present_reviewTime = true && that.isSetReviewTime();
      if (this_present_reviewTime || that_present_reviewTime) {
        if (!(this_present_reviewTime && that_present_reviewTime))
          return false;
        if (!this.reviewTime.equals(that.reviewTime))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
      if (isSetObject())
        hashCode = hashCode * 8191 + object.hashCode();

      hashCode = hashCode * 8191 + ((isSetPre()) ? 131071 : 524287);
      if (isSetPre())
        hashCode = hashCode * 8191 + pre.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewTime()) ? 131071 : 524287);
      if (isSetReviewTime())
        hashCode = hashCode * 8191 + reviewTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
      if (isSetResult())
        hashCode = hashCode * 8191 + result.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createReviewRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPre(), other.isSetPre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre, other.pre);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetReviewTime(), other.isSetReviewTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewTime, other.reviewTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResult(), other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createReviewRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pre:");
      if (this.pre == null) {
        sb.append("null");
      } else {
        sb.append(this.pre);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewTime:");
      if (this.reviewTime == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReviewRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewRecord_argsStandardScheme getScheme() {
        return new createReviewRecord_argsStandardScheme();
      }
    }

    private static class createReviewRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createReviewRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pre = iprot.readString();
                struct.setPreIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REVIEW_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewTime = iprot.readString();
                struct.setReviewTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.result = iprot.readString();
                struct.setResultIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReviewRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.pre != null) {
          oprot.writeFieldBegin(PRE_FIELD_DESC);
          oprot.writeString(struct.pre);
          oprot.writeFieldEnd();
        }
        if (struct.reviewTime != null) {
          oprot.writeFieldBegin(REVIEW_TIME_FIELD_DESC);
          oprot.writeString(struct.reviewTime);
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReviewRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewRecord_argsTupleScheme getScheme() {
        return new createReviewRecord_argsTupleScheme();
      }
    }

    private static class createReviewRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createReviewRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetObject()) {
          optionals.set(3);
        }
        if (struct.isSetPre()) {
          optionals.set(4);
        }
        if (struct.isSetReviewTime()) {
          optionals.set(5);
        }
        if (struct.isSetResult()) {
          optionals.set(6);
        }
        if (struct.isSetToken()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetPre()) {
          oprot.writeString(struct.pre);
        }
        if (struct.isSetReviewTime()) {
          oprot.writeString(struct.reviewTime);
        }
        if (struct.isSetResult()) {
          oprot.writeString(struct.result);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(4)) {
          struct.pre = iprot.readString();
          struct.setPreIsSet(true);
        }
        if (incoming.get(5)) {
          struct.reviewTime = iprot.readString();
          struct.setReviewTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.result = iprot.readString();
          struct.setResultIsSet(true);
        }
        if (incoming.get(7)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createReviewRecord_result implements org.apache.thrift.TBase<createReviewRecord_result, createReviewRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<createReviewRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createReviewRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createReviewRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createReviewRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createReviewRecord_result.class, metaDataMap);
    }

    public createReviewRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createReviewRecord_result(createReviewRecord_result other) {
    }

    public createReviewRecord_result deepCopy() {
      return new createReviewRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createReviewRecord_result)
        return this.equals((createReviewRecord_result)that);
      return false;
    }

    public boolean equals(createReviewRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(createReviewRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createReviewRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createReviewRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewRecord_resultStandardScheme getScheme() {
        return new createReviewRecord_resultStandardScheme();
      }
    }

    private static class createReviewRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createReviewRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createReviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createReviewRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createReviewRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createReviewRecord_resultTupleScheme getScheme() {
        return new createReviewRecord_resultTupleScheme();
      }
    }

    private static class createReviewRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createReviewRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createReviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createReviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createUserRecord_args implements org.apache.thrift.TBase<createUserRecord_args, createUserRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<createUserRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUserRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUserRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String role; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DEPARTMENT((short)2, "department"),
      NAME((short)3, "name"),
      ROLE((short)4, "role"),
      CONTENT((short)5, "content"),
      TOKEN((short)6, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // NAME
            return NAME;
          case 4: // ROLE
            return ROLE;
          case 5: // CONTENT
            return CONTENT;
          case 6: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserRecord_args.class, metaDataMap);
    }

    public createUserRecord_args() {
    }

    public createUserRecord_args(
            java.lang.String id,
            java.lang.String department,
            java.lang.String name,
            java.lang.String role,
            java.lang.String content,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.department = department;
      this.name = name;
      this.role = role;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserRecord_args(createUserRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRole()) {
        this.role = other.role;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public createUserRecord_args deepCopy() {
      return new createUserRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.department = null;
      this.name = null;
      this.role = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public createUserRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDepartment() {
      return this.department;
    }

    public createUserRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public createUserRecord_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRole() {
      return this.role;
    }

    public createUserRecord_args setRole(@org.apache.thrift.annotation.Nullable java.lang.String role) {
      this.role = role;
      return this;
    }

    public void unsetRole() {
      this.role = null;
    }

    /** Returns true if field role is set (has been assigned a value) and false otherwise */
    public boolean isSetRole() {
      return this.role != null;
    }

    public void setRoleIsSet(boolean value) {
      if (!value) {
        this.role = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
      return this.content;
    }

    public createUserRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public createUserRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DEPARTMENT:
          if (value == null) {
            unsetDepartment();
          } else {
            setDepartment((java.lang.String)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

        case ROLE:
          if (value == null) {
            unsetRole();
          } else {
            setRole((java.lang.String)value);
          }
          break;

        case CONTENT:
          if (value == null) {
            unsetContent();
          } else {
            setContent((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DEPARTMENT:
          return getDepartment();

        case NAME:
          return getName();

        case ROLE:
          return getRole();

        case CONTENT:
          return getContent();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DEPARTMENT:
          return isSetDepartment();
        case NAME:
          return isSetName();
        case ROLE:
          return isSetRole();
        case CONTENT:
          return isSetContent();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createUserRecord_args)
        return this.equals((createUserRecord_args)that);
      return false;
    }

    public boolean equals(createUserRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_role = true && this.isSetRole();
      boolean that_present_role = true && that.isSetRole();
      if (this_present_role || that_present_role) {
        if (!(this_present_role && that_present_role))
          return false;
        if (!this.role.equals(that.role))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
      if (isSetRole())
        hashCode = hashCode * 8191 + role.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createUserRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRole(), other.isSetRole());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRole()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUserRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserRecord_argsStandardScheme getScheme() {
        return new createUserRecord_argsStandardScheme();
      }
    }

    private static class createUserRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUserRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.role = iprot.readString();
                struct.setRoleIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.role != null) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserRecord_argsTupleScheme getScheme() {
        return new createUserRecord_argsTupleScheme();
      }
    }

    private static class createUserRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUserRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetRole()) {
          optionals.set(3);
        }
        if (struct.isSetContent()) {
          optionals.set(4);
        }
        if (struct.isSetToken()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetRole()) {
          oprot.writeString(struct.role);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.role = iprot.readString();
          struct.setRoleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createUserRecord_result implements org.apache.thrift.TBase<createUserRecord_result, createUserRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<createUserRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createUserRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUserRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUserRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUserRecord_result.class, metaDataMap);
    }

    public createUserRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createUserRecord_result(createUserRecord_result other) {
    }

    public createUserRecord_result deepCopy() {
      return new createUserRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createUserRecord_result)
        return this.equals((createUserRecord_result)that);
      return false;
    }

    public boolean equals(createUserRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(createUserRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createUserRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createUserRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserRecord_resultStandardScheme getScheme() {
        return new createUserRecord_resultStandardScheme();
      }
    }

    private static class createUserRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createUserRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createUserRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createUserRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createUserRecord_resultTupleScheme getScheme() {
        return new createUserRecord_resultTupleScheme();
      }
    }

    private static class createUserRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUserRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyOpinionRecord_args implements org.apache.thrift.TBase<modifyOpinionRecord_args, modifyOpinionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyOpinionRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyOpinionRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DONE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("doneTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyOpinionRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyOpinionRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String doneTime; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DONE_TIME((short)2, "doneTime"),
      CONTENT((short)3, "content"),
      TOKEN((short)4, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DONE_TIME
            return DONE_TIME;
          case 3: // CONTENT
            return CONTENT;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DONE_TIME, new org.apache.thrift.meta_data.FieldMetaData("doneTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOpinionRecord_args.class, metaDataMap);
    }

    public modifyOpinionRecord_args() {
    }

    public modifyOpinionRecord_args(
            java.lang.String id,
            java.lang.String doneTime,
            java.lang.String content,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.doneTime = doneTime;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyOpinionRecord_args(modifyOpinionRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDoneTime()) {
        this.doneTime = other.doneTime;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public modifyOpinionRecord_args deepCopy() {
      return new modifyOpinionRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.doneTime = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public modifyOpinionRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDoneTime() {
      return this.doneTime;
    }

    public modifyOpinionRecord_args setDoneTime(@org.apache.thrift.annotation.Nullable java.lang.String doneTime) {
      this.doneTime = doneTime;
      return this;
    }

    public void unsetDoneTime() {
      this.doneTime = null;
    }

    /** Returns true if field doneTime is set (has been assigned a value) and false otherwise */
    public boolean isSetDoneTime() {
      return this.doneTime != null;
    }

    public void setDoneTimeIsSet(boolean value) {
      if (!value) {
        this.doneTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
      return this.content;
    }

    public modifyOpinionRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public modifyOpinionRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DONE_TIME:
          if (value == null) {
            unsetDoneTime();
          } else {
            setDoneTime((java.lang.String)value);
          }
          break;

        case CONTENT:
          if (value == null) {
            unsetContent();
          } else {
            setContent((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DONE_TIME:
          return getDoneTime();

        case CONTENT:
          return getContent();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DONE_TIME:
          return isSetDoneTime();
        case CONTENT:
          return isSetContent();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof modifyOpinionRecord_args)
        return this.equals((modifyOpinionRecord_args)that);
      return false;
    }

    public boolean equals(modifyOpinionRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_doneTime = true && this.isSetDoneTime();
      boolean that_present_doneTime = true && that.isSetDoneTime();
      if (this_present_doneTime || that_present_doneTime) {
        if (!(this_present_doneTime && that_present_doneTime))
          return false;
        if (!this.doneTime.equals(that.doneTime))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDoneTime()) ? 131071 : 524287);
      if (isSetDoneTime())
        hashCode = hashCode * 8191 + doneTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyOpinionRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDoneTime(), other.isSetDoneTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoneTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doneTime, other.doneTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyOpinionRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("doneTime:");
      if (this.doneTime == null) {
        sb.append("null");
      } else {
        sb.append(this.doneTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyOpinionRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyOpinionRecord_argsStandardScheme getScheme() {
        return new modifyOpinionRecord_argsStandardScheme();
      }
    }

    private static class modifyOpinionRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyOpinionRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DONE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.doneTime = iprot.readString();
                struct.setDoneTimeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOpinionRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.doneTime != null) {
          oprot.writeFieldBegin(DONE_TIME_FIELD_DESC);
          oprot.writeString(struct.doneTime);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyOpinionRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyOpinionRecord_argsTupleScheme getScheme() {
        return new modifyOpinionRecord_argsTupleScheme();
      }
    }

    private static class modifyOpinionRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyOpinionRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDoneTime()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDoneTime()) {
          oprot.writeString(struct.doneTime);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.doneTime = iprot.readString();
          struct.setDoneTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyOpinionRecord_result implements org.apache.thrift.TBase<modifyOpinionRecord_result, modifyOpinionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyOpinionRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyOpinionRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyOpinionRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyOpinionRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyOpinionRecord_result.class, metaDataMap);
    }

    public modifyOpinionRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyOpinionRecord_result(modifyOpinionRecord_result other) {
    }

    public modifyOpinionRecord_result deepCopy() {
      return new modifyOpinionRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof modifyOpinionRecord_result)
        return this.equals((modifyOpinionRecord_result)that);
      return false;
    }

    public boolean equals(modifyOpinionRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(modifyOpinionRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyOpinionRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyOpinionRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyOpinionRecord_resultStandardScheme getScheme() {
        return new modifyOpinionRecord_resultStandardScheme();
      }
    }

    private static class modifyOpinionRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyOpinionRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyOpinionRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyOpinionRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyOpinionRecord_resultTupleScheme getScheme() {
        return new modifyOpinionRecord_resultTupleScheme();
      }
    }

    private static class modifyOpinionRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyOpinionRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyUserRecord_args implements org.apache.thrift.TBase<modifyUserRecord_args, modifyUserRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUserRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUserRecord_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUserRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUserRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String role; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String content; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      DEPARTMENT((short)2, "department"),
      NAME((short)3, "name"),
      ROLE((short)4, "role"),
      CONTENT((short)5, "content"),
      TOKEN((short)6, "token");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // NAME
            return NAME;
          case 4: // ROLE
            return ROLE;
          case 5: // CONTENT
            return CONTENT;
          case 6: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUserRecord_args.class, metaDataMap);
    }

    public modifyUserRecord_args() {
    }

    public modifyUserRecord_args(
            java.lang.String id,
            java.lang.String department,
            java.lang.String name,
            java.lang.String role,
            java.lang.String content,
            java.lang.String token)
    {
      this();
      this.id = id;
      this.department = department;
      this.name = name;
      this.role = role;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyUserRecord_args(modifyUserRecord_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRole()) {
        this.role = other.role;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public modifyUserRecord_args deepCopy() {
      return new modifyUserRecord_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.department = null;
      this.name = null;
      this.role = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getId() {
      return this.id;
    }

    public modifyUserRecord_args setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDepartment() {
      return this.department;
    }

    public modifyUserRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public modifyUserRecord_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRole() {
      return this.role;
    }

    public modifyUserRecord_args setRole(@org.apache.thrift.annotation.Nullable java.lang.String role) {
      this.role = role;
      return this;
    }

    public void unsetRole() {
      this.role = null;
    }

    /** Returns true if field role is set (has been assigned a value) and false otherwise */
    public boolean isSetRole() {
      return this.role != null;
    }

    public void setRoleIsSet(boolean value) {
      if (!value) {
        this.role = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContent() {
      return this.content;
    }

    public modifyUserRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getToken() {
      return this.token;
    }

    public modifyUserRecord_args setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
        case ID:
          if (value == null) {
            unsetId();
          } else {
            setId((java.lang.String)value);
          }
          break;

        case DEPARTMENT:
          if (value == null) {
            unsetDepartment();
          } else {
            setDepartment((java.lang.String)value);
          }
          break;

        case NAME:
          if (value == null) {
            unsetName();
          } else {
            setName((java.lang.String)value);
          }
          break;

        case ROLE:
          if (value == null) {
            unsetRole();
          } else {
            setRole((java.lang.String)value);
          }
          break;

        case CONTENT:
          if (value == null) {
            unsetContent();
          } else {
            setContent((java.lang.String)value);
          }
          break;

        case TOKEN:
          if (value == null) {
            unsetToken();
          } else {
            setToken((java.lang.String)value);
          }
          break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case ID:
          return getId();

        case DEPARTMENT:
          return getDepartment();

        case NAME:
          return getName();

        case ROLE:
          return getRole();

        case CONTENT:
          return getContent();

        case TOKEN:
          return getToken();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case ID:
          return isSetId();
        case DEPARTMENT:
          return isSetDepartment();
        case NAME:
          return isSetName();
        case ROLE:
          return isSetRole();
        case CONTENT:
          return isSetContent();
        case TOKEN:
          return isSetToken();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof modifyUserRecord_args)
        return this.equals((modifyUserRecord_args)that);
      return false;
    }

    public boolean equals(modifyUserRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_role = true && this.isSetRole();
      boolean that_present_role = true && that.isSetRole();
      if (this_present_role || that_present_role) {
        if (!(this_present_role && that_present_role))
          return false;
        if (!this.role.equals(that.role))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
      if (isSetId())
        hashCode = hashCode * 8191 + id.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
      if (isSetRole())
        hashCode = hashCode * 8191 + role.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyUserRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRole(), other.isSetRole());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRole()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyUserRecord_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyUserRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUserRecord_argsStandardScheme getScheme() {
        return new modifyUserRecord_argsStandardScheme();
      }
    }

    private static class modifyUserRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUserRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.role = iprot.readString();
                struct.setRoleIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUserRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.role != null) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyUserRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUserRecord_argsTupleScheme getScheme() {
        return new modifyUserRecord_argsTupleScheme();
      }
    }

    private static class modifyUserRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUserRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetName()) {
          optionals.set(2);
        }
        if (struct.isSetRole()) {
          optionals.set(3);
        }
        if (struct.isSetContent()) {
          optionals.set(4);
        }
        if (struct.isSetToken()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetRole()) {
          oprot.writeString(struct.role);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.role = iprot.readString();
          struct.setRoleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyUserRecord_result implements org.apache.thrift.TBase<modifyUserRecord_result, modifyUserRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUserRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUserRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUserRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUserRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUserRecord_result.class, metaDataMap);
    }

    public modifyUserRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyUserRecord_result(modifyUserRecord_result other) {
    }

    public modifyUserRecord_result deepCopy() {
      return new modifyUserRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof modifyUserRecord_result)
        return this.equals((modifyUserRecord_result)that);
      return false;
    }

    public boolean equals(modifyUserRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(modifyUserRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyUserRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyUserRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUserRecord_resultStandardScheme getScheme() {
        return new modifyUserRecord_resultStandardScheme();
      }
    }

    private static class modifyUserRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUserRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUserRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyUserRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUserRecord_resultTupleScheme getScheme() {
        return new modifyUserRecord_resultTupleScheme();
      }
    }

    private static class modifyUserRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUserRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
