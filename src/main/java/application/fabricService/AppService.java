
package application.fabricService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-27")
public class AppService {

    public interface Iface {

        public void close() throws org.apache.thrift.TException;

        public void connect() throws org.apache.thrift.TException;

        public void setCCP(java.lang.String ccp) throws org.apache.thrift.TException;

        public void setUserName(java.lang.String userName) throws org.apache.thrift.TException;

        public void setChannelName(java.lang.String channelName) throws org.apache.thrift.TException;

        public void setChaincodeName(java.lang.String chaincodeName) throws org.apache.thrift.TException;

        public void initOpinionRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime) throws org.apache.thrift.TException;

        public void initDirectRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException;

        public void initUserRecord(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException;

        public void reviewRecord(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment) throws org.apache.thrift.TException;

        public void operateRecord(java.lang.String uuid, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException;

        public void modifyUser(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException;

        public java.lang.String queryDataRecordByObject(java.lang.String object) throws org.apache.thrift.TException;

        public java.lang.String queryDataRecordByUser(java.lang.String department, java.lang.String user) throws org.apache.thrift.TException;

        public java.lang.String queryWithQueryString(java.lang.String queryString) throws org.apache.thrift.TException;

        public java.lang.String queryDataRecordById(java.lang.String uuid) throws org.apache.thrift.TException;

        public java.lang.String queryUserRecordByDept(java.lang.String department) throws org.apache.thrift.TException;

        public java.lang.String queryUserRecordByAddr(java.lang.String address) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void close(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void connect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void setCCP(java.lang.String ccp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void setUserName(java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void setChannelName(java.lang.String channelName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void setChaincodeName(java.lang.String chaincodeName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void initOpinionRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void initDirectRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void initUserRecord(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void reviewRecord(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void operateRecord(java.lang.String uuid, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void modifyUser(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

        public void queryDataRecordByObject(java.lang.String object, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void queryDataRecordByUser(java.lang.String department, java.lang.String user, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void queryWithQueryString(java.lang.String queryString, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void queryDataRecordById(java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void queryUserRecordByDept(java.lang.String department, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

        public void queryUserRecordByAddr(java.lang.String address, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void close() throws org.apache.thrift.TException
        {
            send_close();
            recv_close();
        }

        public void send_close() throws org.apache.thrift.TException
        {
            close_args args = new close_args();
            sendBase("close", args);
        }

        public void recv_close() throws org.apache.thrift.TException
        {
            close_result result = new close_result();
            receiveBase(result, "close");
            return;
        }

        public void connect() throws org.apache.thrift.TException
        {
            send_connect();
            recv_connect();
        }

        public void send_connect() throws org.apache.thrift.TException
        {
            connect_args args = new connect_args();
            sendBase("connect", args);
        }

        public void recv_connect() throws org.apache.thrift.TException
        {
            connect_result result = new connect_result();
            receiveBase(result, "connect");
            return;
        }

        public void setCCP(java.lang.String ccp) throws org.apache.thrift.TException
        {
            send_setCCP(ccp);
            recv_setCCP();
        }

        public void send_setCCP(java.lang.String ccp) throws org.apache.thrift.TException
        {
            setCCP_args args = new setCCP_args();
            args.setCcp(ccp);
            sendBase("setCCP", args);
        }

        public void recv_setCCP() throws org.apache.thrift.TException
        {
            setCCP_result result = new setCCP_result();
            receiveBase(result, "setCCP");
            return;
        }

        public void setUserName(java.lang.String userName) throws org.apache.thrift.TException
        {
            send_setUserName(userName);
            recv_setUserName();
        }

        public void send_setUserName(java.lang.String userName) throws org.apache.thrift.TException
        {
            setUserName_args args = new setUserName_args();
            args.setUserName(userName);
            sendBase("setUserName", args);
        }

        public void recv_setUserName() throws org.apache.thrift.TException
        {
            setUserName_result result = new setUserName_result();
            receiveBase(result, "setUserName");
            return;
        }

        public void setChannelName(java.lang.String channelName) throws org.apache.thrift.TException
        {
            send_setChannelName(channelName);
            recv_setChannelName();
        }

        public void send_setChannelName(java.lang.String channelName) throws org.apache.thrift.TException
        {
            setChannelName_args args = new setChannelName_args();
            args.setChannelName(channelName);
            sendBase("setChannelName", args);
        }

        public void recv_setChannelName() throws org.apache.thrift.TException
        {
            setChannelName_result result = new setChannelName_result();
            receiveBase(result, "setChannelName");
            return;
        }

        public void setChaincodeName(java.lang.String chaincodeName) throws org.apache.thrift.TException
        {
            send_setChaincodeName(chaincodeName);
            recv_setChaincodeName();
        }

        public void send_setChaincodeName(java.lang.String chaincodeName) throws org.apache.thrift.TException
        {
            setChaincodeName_args args = new setChaincodeName_args();
            args.setChaincodeName(chaincodeName);
            sendBase("setChaincodeName", args);
        }

        public void recv_setChaincodeName() throws org.apache.thrift.TException
        {
            setChaincodeName_result result = new setChaincodeName_result();
            receiveBase(result, "setChaincodeName");
            return;
        }

        public void initOpinionRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime) throws org.apache.thrift.TException
        {
            send_initOpinionRecord(uuid, department, userName, object, type, opinionTime);
            recv_initOpinionRecord();
        }

        public void send_initOpinionRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime) throws org.apache.thrift.TException
        {
            initOpinionRecord_args args = new initOpinionRecord_args();
            args.setUuid(uuid);
            args.setDepartment(department);
            args.setUserName(userName);
            args.setObject(object);
            args.setType(type);
            args.setOpinionTime(opinionTime);
            sendBase("initOpinionRecord", args);
        }

        public void recv_initOpinionRecord() throws org.apache.thrift.TException
        {
            initOpinionRecord_result result = new initOpinionRecord_result();
            receiveBase(result, "initOpinionRecord");
            return;
        }

        public void initDirectRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException
        {
            send_initDirectRecord(uuid, department, userName, object, type, operateTime, content);
            recv_initDirectRecord();
        }

        public void send_initDirectRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException
        {
            initDirectRecord_args args = new initDirectRecord_args();
            args.setUuid(uuid);
            args.setDepartment(department);
            args.setUserName(userName);
            args.setObject(object);
            args.setType(type);
            args.setOperateTime(operateTime);
            args.setContent(content);
            sendBase("initDirectRecord", args);
        }

        public void recv_initDirectRecord() throws org.apache.thrift.TException
        {
            initDirectRecord_result result = new initDirectRecord_result();
            receiveBase(result, "initDirectRecord");
            return;
        }

        public void initUserRecord(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException
        {
            send_initUserRecord(department, userName, userAddress, role);
            recv_initUserRecord();
        }

        public void send_initUserRecord(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException
        {
            initUserRecord_args args = new initUserRecord_args();
            args.setDepartment(department);
            args.setUserName(userName);
            args.setUserAddress(userAddress);
            args.setRole(role);
            sendBase("initUserRecord", args);
        }

        public void recv_initUserRecord() throws org.apache.thrift.TException
        {
            initUserRecord_result result = new initUserRecord_result();
            receiveBase(result, "initUserRecord");
            return;
        }

        public void reviewRecord(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment) throws org.apache.thrift.TException
        {
            send_reviewRecord(uuid, reviewer, reviewTime, reviewResult, reviewDepartment);
            recv_reviewRecord();
        }

        public void send_reviewRecord(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment) throws org.apache.thrift.TException
        {
            reviewRecord_args args = new reviewRecord_args();
            args.setUuid(uuid);
            args.setReviewer(reviewer);
            args.setReviewTime(reviewTime);
            args.setReviewResult(reviewResult);
            args.setReviewDepartment(reviewDepartment);
            sendBase("reviewRecord", args);
        }

        public void recv_reviewRecord() throws org.apache.thrift.TException
        {
            reviewRecord_result result = new reviewRecord_result();
            receiveBase(result, "reviewRecord");
            return;
        }

        public void operateRecord(java.lang.String uuid, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException
        {
            send_operateRecord(uuid, operateTime, content);
            recv_operateRecord();
        }

        public void send_operateRecord(java.lang.String uuid, java.lang.String operateTime, java.lang.String content) throws org.apache.thrift.TException
        {
            operateRecord_args args = new operateRecord_args();
            args.setUuid(uuid);
            args.setOperateTime(operateTime);
            args.setContent(content);
            sendBase("operateRecord", args);
        }

        public void recv_operateRecord() throws org.apache.thrift.TException
        {
            operateRecord_result result = new operateRecord_result();
            receiveBase(result, "operateRecord");
            return;
        }

        public void modifyUser(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException
        {
            send_modifyUser(department, userName, userAddress, role);
            recv_modifyUser();
        }

        public void send_modifyUser(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role) throws org.apache.thrift.TException
        {
            modifyUser_args args = new modifyUser_args();
            args.setDepartment(department);
            args.setUserName(userName);
            args.setUserAddress(userAddress);
            args.setRole(role);
            sendBase("modifyUser", args);
        }

        public void recv_modifyUser() throws org.apache.thrift.TException
        {
            modifyUser_result result = new modifyUser_result();
            receiveBase(result, "modifyUser");
            return;
        }

        public java.lang.String queryDataRecordByObject(java.lang.String object) throws org.apache.thrift.TException
        {
            send_queryDataRecordByObject(object);
            return recv_queryDataRecordByObject();
        }

        public void send_queryDataRecordByObject(java.lang.String object) throws org.apache.thrift.TException
        {
            queryDataRecordByObject_args args = new queryDataRecordByObject_args();
            args.setObject(object);
            sendBase("queryDataRecordByObject", args);
        }

        public java.lang.String recv_queryDataRecordByObject() throws org.apache.thrift.TException
        {
            queryDataRecordByObject_result result = new queryDataRecordByObject_result();
            receiveBase(result, "queryDataRecordByObject");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDataRecordByObject failed: unknown result");
        }

        public java.lang.String queryDataRecordByUser(java.lang.String department, java.lang.String user) throws org.apache.thrift.TException
        {
            send_queryDataRecordByUser(department, user);
            return recv_queryDataRecordByUser();
        }

        public void send_queryDataRecordByUser(java.lang.String department, java.lang.String user) throws org.apache.thrift.TException
        {
            queryDataRecordByUser_args args = new queryDataRecordByUser_args();
            args.setDepartment(department);
            args.setUser(user);
            sendBase("queryDataRecordByUser", args);
        }

        public java.lang.String recv_queryDataRecordByUser() throws org.apache.thrift.TException
        {
            queryDataRecordByUser_result result = new queryDataRecordByUser_result();
            receiveBase(result, "queryDataRecordByUser");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDataRecordByUser failed: unknown result");
        }

        public java.lang.String queryWithQueryString(java.lang.String queryString) throws org.apache.thrift.TException
        {
            send_queryWithQueryString(queryString);
            return recv_queryWithQueryString();
        }

        public void send_queryWithQueryString(java.lang.String queryString) throws org.apache.thrift.TException
        {
            queryWithQueryString_args args = new queryWithQueryString_args();
            args.setQueryString(queryString);
            sendBase("queryWithQueryString", args);
        }

        public java.lang.String recv_queryWithQueryString() throws org.apache.thrift.TException
        {
            queryWithQueryString_result result = new queryWithQueryString_result();
            receiveBase(result, "queryWithQueryString");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryWithQueryString failed: unknown result");
        }

        public java.lang.String queryDataRecordById(java.lang.String uuid) throws org.apache.thrift.TException
        {
            send_queryDataRecordById(uuid);
            return recv_queryDataRecordById();
        }

        public void send_queryDataRecordById(java.lang.String uuid) throws org.apache.thrift.TException
        {
            queryDataRecordById_args args = new queryDataRecordById_args();
            args.setUuid(uuid);
            sendBase("queryDataRecordById", args);
        }

        public java.lang.String recv_queryDataRecordById() throws org.apache.thrift.TException
        {
            queryDataRecordById_result result = new queryDataRecordById_result();
            receiveBase(result, "queryDataRecordById");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDataRecordById failed: unknown result");
        }

        public java.lang.String queryUserRecordByDept(java.lang.String department) throws org.apache.thrift.TException
        {
            send_queryUserRecordByDept(department);
            return recv_queryUserRecordByDept();
        }

        public void send_queryUserRecordByDept(java.lang.String department) throws org.apache.thrift.TException
        {
            queryUserRecordByDept_args args = new queryUserRecordByDept_args();
            args.setDepartment(department);
            sendBase("queryUserRecordByDept", args);
        }

        public java.lang.String recv_queryUserRecordByDept() throws org.apache.thrift.TException
        {
            queryUserRecordByDept_result result = new queryUserRecordByDept_result();
            receiveBase(result, "queryUserRecordByDept");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserRecordByDept failed: unknown result");
        }

        public java.lang.String queryUserRecordByAddr(java.lang.String address) throws org.apache.thrift.TException
        {
            send_queryUserRecordByAddr(address);
            return recv_queryUserRecordByAddr();
        }

        public void send_queryUserRecordByAddr(java.lang.String address) throws org.apache.thrift.TException
        {
            queryUserRecordByAddr_args args = new queryUserRecordByAddr_args();
            args.setAddress(address);
            sendBase("queryUserRecordByAddr", args);
        }

        public java.lang.String recv_queryUserRecordByAddr() throws org.apache.thrift.TException
        {
            queryUserRecordByAddr_result result = new queryUserRecordByAddr_result();
            receiveBase(result, "queryUserRecordByAddr");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUserRecordByAddr failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void close(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            close_call method_call = new close_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class close_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public close_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close", org.apache.thrift.protocol.TMessageType.CALL, 0));
                close_args args = new close_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void connect(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            connect_call method_call = new connect_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            public connect_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
                connect_args args = new connect_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void setCCP(java.lang.String ccp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setCCP_call method_call = new setCCP_call(ccp, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setCCP_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String ccp;
            public setCCP_call(java.lang.String ccp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.ccp = ccp;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCCP", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setCCP_args args = new setCCP_args();
                args.setCcp(ccp);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void setUserName(java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setUserName_call method_call = new setUserName_call(userName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setUserName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String userName;
            public setUserName_call(java.lang.String userName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.userName = userName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setUserName_args args = new setUserName_args();
                args.setUserName(userName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void setChannelName(java.lang.String channelName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setChannelName_call method_call = new setChannelName_call(channelName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setChannelName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String channelName;
            public setChannelName_call(java.lang.String channelName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.channelName = channelName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setChannelName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setChannelName_args args = new setChannelName_args();
                args.setChannelName(channelName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void setChaincodeName(java.lang.String chaincodeName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setChaincodeName_call method_call = new setChaincodeName_call(chaincodeName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setChaincodeName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String chaincodeName;
            public setChaincodeName_call(java.lang.String chaincodeName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.chaincodeName = chaincodeName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setChaincodeName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setChaincodeName_args args = new setChaincodeName_args();
                args.setChaincodeName(chaincodeName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void initOpinionRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            initOpinionRecord_call method_call = new initOpinionRecord_call(uuid, department, userName, object, type, opinionTime, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class initOpinionRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String uuid;
            private java.lang.String department;
            private java.lang.String userName;
            private java.lang.String object;
            private java.lang.String type;
            private java.lang.String opinionTime;
            public initOpinionRecord_call(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String opinionTime, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
                this.department = department;
                this.userName = userName;
                this.object = object;
                this.type = type;
                this.opinionTime = opinionTime;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initOpinionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                initOpinionRecord_args args = new initOpinionRecord_args();
                args.setUuid(uuid);
                args.setDepartment(department);
                args.setUserName(userName);
                args.setObject(object);
                args.setType(type);
                args.setOpinionTime(opinionTime);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void initDirectRecord(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            initDirectRecord_call method_call = new initDirectRecord_call(uuid, department, userName, object, type, operateTime, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class initDirectRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String uuid;
            private java.lang.String department;
            private java.lang.String userName;
            private java.lang.String object;
            private java.lang.String type;
            private java.lang.String operateTime;
            private java.lang.String content;
            public initDirectRecord_call(java.lang.String uuid, java.lang.String department, java.lang.String userName, java.lang.String object, java.lang.String type, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
                this.department = department;
                this.userName = userName;
                this.object = object;
                this.type = type;
                this.operateTime = operateTime;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initDirectRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                initDirectRecord_args args = new initDirectRecord_args();
                args.setUuid(uuid);
                args.setDepartment(department);
                args.setUserName(userName);
                args.setObject(object);
                args.setType(type);
                args.setOperateTime(operateTime);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void initUserRecord(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            initUserRecord_call method_call = new initUserRecord_call(department, userName, userAddress, role, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class initUserRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String department;
            private java.lang.String userName;
            private java.lang.String userAddress;
            private java.lang.String role;
            public initUserRecord_call(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.department = department;
                this.userName = userName;
                this.userAddress = userAddress;
                this.role = role;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initUserRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                initUserRecord_args args = new initUserRecord_args();
                args.setDepartment(department);
                args.setUserName(userName);
                args.setUserAddress(userAddress);
                args.setRole(role);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void reviewRecord(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            reviewRecord_call method_call = new reviewRecord_call(uuid, reviewer, reviewTime, reviewResult, reviewDepartment, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class reviewRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String uuid;
            private java.lang.String reviewer;
            private java.lang.String reviewTime;
            private java.lang.String reviewResult;
            private java.lang.String reviewDepartment;
            public reviewRecord_call(java.lang.String uuid, java.lang.String reviewer, java.lang.String reviewTime, java.lang.String reviewResult, java.lang.String reviewDepartment, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
                this.reviewer = reviewer;
                this.reviewTime = reviewTime;
                this.reviewResult = reviewResult;
                this.reviewDepartment = reviewDepartment;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reviewRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                reviewRecord_args args = new reviewRecord_args();
                args.setUuid(uuid);
                args.setReviewer(reviewer);
                args.setReviewTime(reviewTime);
                args.setReviewResult(reviewResult);
                args.setReviewDepartment(reviewDepartment);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void operateRecord(java.lang.String uuid, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            operateRecord_call method_call = new operateRecord_call(uuid, operateTime, content, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class operateRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String uuid;
            private java.lang.String operateTime;
            private java.lang.String content;
            public operateRecord_call(java.lang.String uuid, java.lang.String operateTime, java.lang.String content, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
                this.operateTime = operateTime;
                this.content = content;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("operateRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
                operateRecord_args args = new operateRecord_args();
                args.setUuid(uuid);
                args.setOperateTime(operateTime);
                args.setContent(content);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void modifyUser(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            modifyUser_call method_call = new modifyUser_call(department, userName, userAddress, role, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class modifyUser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
            private java.lang.String department;
            private java.lang.String userName;
            private java.lang.String userAddress;
            private java.lang.String role;
            public modifyUser_call(java.lang.String department, java.lang.String userName, java.lang.String userAddress, java.lang.String role, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.department = department;
                this.userName = userName;
                this.userAddress = userAddress;
                this.role = role;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                modifyUser_args args = new modifyUser_args();
                args.setDepartment(department);
                args.setUserName(userName);
                args.setUserAddress(userAddress);
                args.setRole(role);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

        public void queryDataRecordByObject(java.lang.String object, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryDataRecordByObject_call method_call = new queryDataRecordByObject_call(object, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryDataRecordByObject_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String object;
            public queryDataRecordByObject_call(java.lang.String object, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.object = object;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDataRecordByObject", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryDataRecordByObject_args args = new queryDataRecordByObject_args();
                args.setObject(object);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryDataRecordByObject();
            }
        }

        public void queryDataRecordByUser(java.lang.String department, java.lang.String user, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryDataRecordByUser_call method_call = new queryDataRecordByUser_call(department, user, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryDataRecordByUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String department;
            private java.lang.String user;
            public queryDataRecordByUser_call(java.lang.String department, java.lang.String user, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.department = department;
                this.user = user;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDataRecordByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryDataRecordByUser_args args = new queryDataRecordByUser_args();
                args.setDepartment(department);
                args.setUser(user);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryDataRecordByUser();
            }
        }

        public void queryWithQueryString(java.lang.String queryString, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryWithQueryString_call method_call = new queryWithQueryString_call(queryString, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryWithQueryString_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String queryString;
            public queryWithQueryString_call(java.lang.String queryString, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.queryString = queryString;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryWithQueryString", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryWithQueryString_args args = new queryWithQueryString_args();
                args.setQueryString(queryString);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryWithQueryString();
            }
        }

        public void queryDataRecordById(java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryDataRecordById_call method_call = new queryDataRecordById_call(uuid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryDataRecordById_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String uuid;
            public queryDataRecordById_call(java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDataRecordById", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryDataRecordById_args args = new queryDataRecordById_args();
                args.setUuid(uuid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryDataRecordById();
            }
        }

        public void queryUserRecordByDept(java.lang.String department, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryUserRecordByDept_call method_call = new queryUserRecordByDept_call(department, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryUserRecordByDept_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String department;
            public queryUserRecordByDept_call(java.lang.String department, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.department = department;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserRecordByDept", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryUserRecordByDept_args args = new queryUserRecordByDept_args();
                args.setDepartment(department);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryUserRecordByDept();
            }
        }

        public void queryUserRecordByAddr(java.lang.String address, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryUserRecordByAddr_call method_call = new queryUserRecordByAddr_call(address, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class queryUserRecordByAddr_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
            private java.lang.String address;
            public queryUserRecordByAddr_call(java.lang.String address, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.address = address;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUserRecordByAddr", org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryUserRecordByAddr_args args = new queryUserRecordByAddr_args();
                args.setAddress(address);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public java.lang.String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new java.lang.IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryUserRecordByAddr();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("close", new close());
            processMap.put("connect", new connect());
            processMap.put("setCCP", new setCCP());
            processMap.put("setUserName", new setUserName());
            processMap.put("setChannelName", new setChannelName());
            processMap.put("setChaincodeName", new setChaincodeName());
            processMap.put("initOpinionRecord", new initOpinionRecord());
            processMap.put("initDirectRecord", new initDirectRecord());
            processMap.put("initUserRecord", new initUserRecord());
            processMap.put("reviewRecord", new reviewRecord());
            processMap.put("operateRecord", new operateRecord());
            processMap.put("modifyUser", new modifyUser());
            processMap.put("queryDataRecordByObject", new queryDataRecordByObject());
            processMap.put("queryDataRecordByUser", new queryDataRecordByUser());
            processMap.put("queryWithQueryString", new queryWithQueryString());
            processMap.put("queryDataRecordById", new queryDataRecordById());
            processMap.put("queryUserRecordByDept", new queryUserRecordByDept());
            processMap.put("queryUserRecordByAddr", new queryUserRecordByAddr());
            return processMap;
        }

        public static class close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_args> {
            public close() {
                super("close");
            }

            public close_args getEmptyArgsInstance() {
                return new close_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public close_result getResult(I iface, close_args args) throws org.apache.thrift.TException {
                close_result result = new close_result();
                iface.close();
                return result;
            }
        }

        public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
            public connect() {
                super("connect");
            }

            public connect_args getEmptyArgsInstance() {
                return new connect_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
                connect_result result = new connect_result();
                iface.connect();
                return result;
            }
        }

        public static class setCCP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCCP_args> {
            public setCCP() {
                super("setCCP");
            }

            public setCCP_args getEmptyArgsInstance() {
                return new setCCP_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setCCP_result getResult(I iface, setCCP_args args) throws org.apache.thrift.TException {
                setCCP_result result = new setCCP_result();
                iface.setCCP(args.ccp);
                return result;
            }
        }

        public static class setUserName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserName_args> {
            public setUserName() {
                super("setUserName");
            }

            public setUserName_args getEmptyArgsInstance() {
                return new setUserName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setUserName_result getResult(I iface, setUserName_args args) throws org.apache.thrift.TException {
                setUserName_result result = new setUserName_result();
                iface.setUserName(args.userName);
                return result;
            }
        }

        public static class setChannelName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setChannelName_args> {
            public setChannelName() {
                super("setChannelName");
            }

            public setChannelName_args getEmptyArgsInstance() {
                return new setChannelName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setChannelName_result getResult(I iface, setChannelName_args args) throws org.apache.thrift.TException {
                setChannelName_result result = new setChannelName_result();
                iface.setChannelName(args.channelName);
                return result;
            }
        }

        public static class setChaincodeName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setChaincodeName_args> {
            public setChaincodeName() {
                super("setChaincodeName");
            }

            public setChaincodeName_args getEmptyArgsInstance() {
                return new setChaincodeName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public setChaincodeName_result getResult(I iface, setChaincodeName_args args) throws org.apache.thrift.TException {
                setChaincodeName_result result = new setChaincodeName_result();
                iface.setChaincodeName(args.chaincodeName);
                return result;
            }
        }

        public static class initOpinionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initOpinionRecord_args> {
            public initOpinionRecord() {
                super("initOpinionRecord");
            }

            public initOpinionRecord_args getEmptyArgsInstance() {
                return new initOpinionRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public initOpinionRecord_result getResult(I iface, initOpinionRecord_args args) throws org.apache.thrift.TException {
                initOpinionRecord_result result = new initOpinionRecord_result();
                iface.initOpinionRecord(args.uuid, args.department, args.userName, args.object, args.type, args.opinionTime);
                return result;
            }
        }

        public static class initDirectRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initDirectRecord_args> {
            public initDirectRecord() {
                super("initDirectRecord");
            }

            public initDirectRecord_args getEmptyArgsInstance() {
                return new initDirectRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public initDirectRecord_result getResult(I iface, initDirectRecord_args args) throws org.apache.thrift.TException {
                initDirectRecord_result result = new initDirectRecord_result();
                iface.initDirectRecord(args.uuid, args.department, args.userName, args.object, args.type, args.operateTime, args.content);
                return result;
            }
        }

        public static class initUserRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initUserRecord_args> {
            public initUserRecord() {
                super("initUserRecord");
            }

            public initUserRecord_args getEmptyArgsInstance() {
                return new initUserRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public initUserRecord_result getResult(I iface, initUserRecord_args args) throws org.apache.thrift.TException {
                initUserRecord_result result = new initUserRecord_result();
                iface.initUserRecord(args.department, args.userName, args.userAddress, args.role);
                return result;
            }
        }

        public static class reviewRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reviewRecord_args> {
            public reviewRecord() {
                super("reviewRecord");
            }

            public reviewRecord_args getEmptyArgsInstance() {
                return new reviewRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public reviewRecord_result getResult(I iface, reviewRecord_args args) throws org.apache.thrift.TException {
                reviewRecord_result result = new reviewRecord_result();
                iface.reviewRecord(args.uuid, args.reviewer, args.reviewTime, args.reviewResult, args.reviewDepartment);
                return result;
            }
        }

        public static class operateRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, operateRecord_args> {
            public operateRecord() {
                super("operateRecord");
            }

            public operateRecord_args getEmptyArgsInstance() {
                return new operateRecord_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public operateRecord_result getResult(I iface, operateRecord_args args) throws org.apache.thrift.TException {
                operateRecord_result result = new operateRecord_result();
                iface.operateRecord(args.uuid, args.operateTime, args.content);
                return result;
            }
        }

        public static class modifyUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyUser_args> {
            public modifyUser() {
                super("modifyUser");
            }

            public modifyUser_args getEmptyArgsInstance() {
                return new modifyUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public modifyUser_result getResult(I iface, modifyUser_args args) throws org.apache.thrift.TException {
                modifyUser_result result = new modifyUser_result();
                iface.modifyUser(args.department, args.userName, args.userAddress, args.role);
                return result;
            }
        }

        public static class queryDataRecordByObject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDataRecordByObject_args> {
            public queryDataRecordByObject() {
                super("queryDataRecordByObject");
            }

            public queryDataRecordByObject_args getEmptyArgsInstance() {
                return new queryDataRecordByObject_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryDataRecordByObject_result getResult(I iface, queryDataRecordByObject_args args) throws org.apache.thrift.TException {
                queryDataRecordByObject_result result = new queryDataRecordByObject_result();
                result.success = iface.queryDataRecordByObject(args.object);
                return result;
            }
        }

        public static class queryDataRecordByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDataRecordByUser_args> {
            public queryDataRecordByUser() {
                super("queryDataRecordByUser");
            }

            public queryDataRecordByUser_args getEmptyArgsInstance() {
                return new queryDataRecordByUser_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryDataRecordByUser_result getResult(I iface, queryDataRecordByUser_args args) throws org.apache.thrift.TException {
                queryDataRecordByUser_result result = new queryDataRecordByUser_result();
                result.success = iface.queryDataRecordByUser(args.department, args.user);
                return result;
            }
        }

        public static class queryWithQueryString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryWithQueryString_args> {
            public queryWithQueryString() {
                super("queryWithQueryString");
            }

            public queryWithQueryString_args getEmptyArgsInstance() {
                return new queryWithQueryString_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryWithQueryString_result getResult(I iface, queryWithQueryString_args args) throws org.apache.thrift.TException {
                queryWithQueryString_result result = new queryWithQueryString_result();
                result.success = iface.queryWithQueryString(args.queryString);
                return result;
            }
        }

        public static class queryDataRecordById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDataRecordById_args> {
            public queryDataRecordById() {
                super("queryDataRecordById");
            }

            public queryDataRecordById_args getEmptyArgsInstance() {
                return new queryDataRecordById_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryDataRecordById_result getResult(I iface, queryDataRecordById_args args) throws org.apache.thrift.TException {
                queryDataRecordById_result result = new queryDataRecordById_result();
                result.success = iface.queryDataRecordById(args.uuid);
                return result;
            }
        }

        public static class queryUserRecordByDept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserRecordByDept_args> {
            public queryUserRecordByDept() {
                super("queryUserRecordByDept");
            }

            public queryUserRecordByDept_args getEmptyArgsInstance() {
                return new queryUserRecordByDept_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryUserRecordByDept_result getResult(I iface, queryUserRecordByDept_args args) throws org.apache.thrift.TException {
                queryUserRecordByDept_result result = new queryUserRecordByDept_result();
                result.success = iface.queryUserRecordByDept(args.department);
                return result;
            }
        }

        public static class queryUserRecordByAddr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUserRecordByAddr_args> {
            public queryUserRecordByAddr() {
                super("queryUserRecordByAddr");
            }

            public queryUserRecordByAddr_args getEmptyArgsInstance() {
                return new queryUserRecordByAddr_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public queryUserRecordByAddr_result getResult(I iface, queryUserRecordByAddr_args args) throws org.apache.thrift.TException {
                queryUserRecordByAddr_result result = new queryUserRecordByAddr_result();
                result.success = iface.queryUserRecordByAddr(args.address);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("close", new close());
            processMap.put("connect", new connect());
            processMap.put("setCCP", new setCCP());
            processMap.put("setUserName", new setUserName());
            processMap.put("setChannelName", new setChannelName());
            processMap.put("setChaincodeName", new setChaincodeName());
            processMap.put("initOpinionRecord", new initOpinionRecord());
            processMap.put("initDirectRecord", new initDirectRecord());
            processMap.put("initUserRecord", new initUserRecord());
            processMap.put("reviewRecord", new reviewRecord());
            processMap.put("operateRecord", new operateRecord());
            processMap.put("modifyUser", new modifyUser());
            processMap.put("queryDataRecordByObject", new queryDataRecordByObject());
            processMap.put("queryDataRecordByUser", new queryDataRecordByUser());
            processMap.put("queryWithQueryString", new queryWithQueryString());
            processMap.put("queryDataRecordById", new queryDataRecordById());
            processMap.put("queryUserRecordByDept", new queryUserRecordByDept());
            processMap.put("queryUserRecordByAddr", new queryUserRecordByAddr());
            return processMap;
        }

        public static class close<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, close_args, Void> {
            public close() {
                super("close");
            }

            public close_args getEmptyArgsInstance() {
                return new close_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        close_result result = new close_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        close_result result = new close_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, close_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.close(resultHandler);
            }
        }

        public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, Void> {
            public connect() {
                super("connect");
            }

            public connect_args getEmptyArgsInstance() {
                return new connect_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        connect_result result = new connect_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        connect_result result = new connect_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.connect(resultHandler);
            }
        }

        public static class setCCP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCCP_args, Void> {
            public setCCP() {
                super("setCCP");
            }

            public setCCP_args getEmptyArgsInstance() {
                return new setCCP_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setCCP_result result = new setCCP_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setCCP_result result = new setCCP_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setCCP_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.setCCP(args.ccp,resultHandler);
            }
        }

        public static class setUserName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserName_args, Void> {
            public setUserName() {
                super("setUserName");
            }

            public setUserName_args getEmptyArgsInstance() {
                return new setUserName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setUserName_result result = new setUserName_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setUserName_result result = new setUserName_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setUserName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.setUserName(args.userName,resultHandler);
            }
        }

        public static class setChannelName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setChannelName_args, Void> {
            public setChannelName() {
                super("setChannelName");
            }

            public setChannelName_args getEmptyArgsInstance() {
                return new setChannelName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setChannelName_result result = new setChannelName_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setChannelName_result result = new setChannelName_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setChannelName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.setChannelName(args.channelName,resultHandler);
            }
        }

        public static class setChaincodeName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setChaincodeName_args, Void> {
            public setChaincodeName() {
                super("setChaincodeName");
            }

            public setChaincodeName_args getEmptyArgsInstance() {
                return new setChaincodeName_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setChaincodeName_result result = new setChaincodeName_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        setChaincodeName_result result = new setChaincodeName_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setChaincodeName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.setChaincodeName(args.chaincodeName,resultHandler);
            }
        }

        public static class initOpinionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initOpinionRecord_args, Void> {
            public initOpinionRecord() {
                super("initOpinionRecord");
            }

            public initOpinionRecord_args getEmptyArgsInstance() {
                return new initOpinionRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        initOpinionRecord_result result = new initOpinionRecord_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        initOpinionRecord_result result = new initOpinionRecord_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, initOpinionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.initOpinionRecord(args.uuid, args.department, args.userName, args.object, args.type, args.opinionTime,resultHandler);
            }
        }

        public static class initDirectRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initDirectRecord_args, Void> {
            public initDirectRecord() {
                super("initDirectRecord");
            }

            public initDirectRecord_args getEmptyArgsInstance() {
                return new initDirectRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        initDirectRecord_result result = new initDirectRecord_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        initDirectRecord_result result = new initDirectRecord_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, initDirectRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.initDirectRecord(args.uuid, args.department, args.userName, args.object, args.type, args.operateTime, args.content,resultHandler);
            }
        }

        public static class initUserRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initUserRecord_args, Void> {
            public initUserRecord() {
                super("initUserRecord");
            }

            public initUserRecord_args getEmptyArgsInstance() {
                return new initUserRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        initUserRecord_result result = new initUserRecord_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        initUserRecord_result result = new initUserRecord_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, initUserRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.initUserRecord(args.department, args.userName, args.userAddress, args.role,resultHandler);
            }
        }

        public static class reviewRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reviewRecord_args, Void> {
            public reviewRecord() {
                super("reviewRecord");
            }

            public reviewRecord_args getEmptyArgsInstance() {
                return new reviewRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        reviewRecord_result result = new reviewRecord_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        reviewRecord_result result = new reviewRecord_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, reviewRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.reviewRecord(args.uuid, args.reviewer, args.reviewTime, args.reviewResult, args.reviewDepartment,resultHandler);
            }
        }

        public static class operateRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, operateRecord_args, Void> {
            public operateRecord() {
                super("operateRecord");
            }

            public operateRecord_args getEmptyArgsInstance() {
                return new operateRecord_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        operateRecord_result result = new operateRecord_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        operateRecord_result result = new operateRecord_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, operateRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.operateRecord(args.uuid, args.operateTime, args.content,resultHandler);
            }
        }

        public static class modifyUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyUser_args, Void> {
            public modifyUser() {
                super("modifyUser");
            }

            public modifyUser_args getEmptyArgsInstance() {
                return new modifyUser_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        modifyUser_result result = new modifyUser_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        modifyUser_result result = new modifyUser_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, modifyUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
                iface.modifyUser(args.department, args.userName, args.userAddress, args.role,resultHandler);
            }
        }

        public static class queryDataRecordByObject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDataRecordByObject_args, java.lang.String> {
            public queryDataRecordByObject() {
                super("queryDataRecordByObject");
            }

            public queryDataRecordByObject_args getEmptyArgsInstance() {
                return new queryDataRecordByObject_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryDataRecordByObject_result result = new queryDataRecordByObject_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryDataRecordByObject_result result = new queryDataRecordByObject_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryDataRecordByObject_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryDataRecordByObject(args.object,resultHandler);
            }
        }

        public static class queryDataRecordByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDataRecordByUser_args, java.lang.String> {
            public queryDataRecordByUser() {
                super("queryDataRecordByUser");
            }

            public queryDataRecordByUser_args getEmptyArgsInstance() {
                return new queryDataRecordByUser_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryDataRecordByUser_result result = new queryDataRecordByUser_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryDataRecordByUser_result result = new queryDataRecordByUser_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryDataRecordByUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryDataRecordByUser(args.department, args.user,resultHandler);
            }
        }

        public static class queryWithQueryString<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryWithQueryString_args, java.lang.String> {
            public queryWithQueryString() {
                super("queryWithQueryString");
            }

            public queryWithQueryString_args getEmptyArgsInstance() {
                return new queryWithQueryString_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryWithQueryString_result result = new queryWithQueryString_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryWithQueryString_result result = new queryWithQueryString_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryWithQueryString_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryWithQueryString(args.queryString,resultHandler);
            }
        }

        public static class queryDataRecordById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDataRecordById_args, java.lang.String> {
            public queryDataRecordById() {
                super("queryDataRecordById");
            }

            public queryDataRecordById_args getEmptyArgsInstance() {
                return new queryDataRecordById_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryDataRecordById_result result = new queryDataRecordById_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryDataRecordById_result result = new queryDataRecordById_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryDataRecordById_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryDataRecordById(args.uuid,resultHandler);
            }
        }

        public static class queryUserRecordByDept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserRecordByDept_args, java.lang.String> {
            public queryUserRecordByDept() {
                super("queryUserRecordByDept");
            }

            public queryUserRecordByDept_args getEmptyArgsInstance() {
                return new queryUserRecordByDept_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryUserRecordByDept_result result = new queryUserRecordByDept_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryUserRecordByDept_result result = new queryUserRecordByDept_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryUserRecordByDept_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryUserRecordByDept(args.department,resultHandler);
            }
        }

        public static class queryUserRecordByAddr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUserRecordByAddr_args, java.lang.String> {
            public queryUserRecordByAddr() {
                super("queryUserRecordByAddr");
            }

            public queryUserRecordByAddr_args getEmptyArgsInstance() {
                return new queryUserRecordByAddr_args();
            }

            public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
                    public void onComplete(java.lang.String o) {
                        queryUserRecordByAddr_result result = new queryUserRecordByAddr_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                        } catch (org.apache.thrift.transport.TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }
                    public void onError(java.lang.Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TSerializable msg;
                        queryUserRecordByAddr_result result = new queryUserRecordByAddr_result();
                        if (e instanceof org.apache.thrift.transport.TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof org.apache.thrift.TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TApplicationException)e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                        } catch (java.lang.Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, queryUserRecordByAddr_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
                iface.queryUserRecordByAddr(args.address,resultHandler);
            }
        }

    }

    public static class close_args implements org.apache.thrift.TBase<close_args, close_args._Fields>, java.io.Serializable, Cloneable, Comparable<close_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new close_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new close_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_args.class, metaDataMap);
        }

        public close_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public close_args(close_args other) {
        }

        public close_args deepCopy() {
            return new close_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof close_args)
                return this.equals((close_args)that);
            return false;
        }

        public boolean equals(close_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(close_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("close_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class close_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public close_argsStandardScheme getScheme() {
                return new close_argsStandardScheme();
            }
        }

        private static class close_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<close_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, close_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, close_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class close_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public close_argsTupleScheme getScheme() {
                return new close_argsTupleScheme();
            }
        }

        private static class close_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<close_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, close_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class close_result implements org.apache.thrift.TBase<close_result, close_result._Fields>, java.io.Serializable, Cloneable, Comparable<close_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new close_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new close_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_result.class, metaDataMap);
        }

        public close_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public close_result(close_result other) {
        }

        public close_result deepCopy() {
            return new close_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof close_result)
                return this.equals((close_result)that);
            return false;
        }

        public boolean equals(close_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(close_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("close_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class close_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public close_resultStandardScheme getScheme() {
                return new close_resultStandardScheme();
            }
        }

        private static class close_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<close_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, close_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, close_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class close_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public close_resultTupleScheme getScheme() {
                return new close_resultTupleScheme();
            }
        }

        private static class close_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<close_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, close_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
        }

        public connect_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public connect_args(connect_args other) {
        }

        public connect_args deepCopy() {
            return new connect_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof connect_args)
                return this.equals((connect_args)that);
            return false;
        }

        public boolean equals(connect_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(connect_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connect_argsStandardScheme getScheme() {
                return new connect_argsStandardScheme();
            }
        }

        private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connect_argsTupleScheme getScheme() {
                return new connect_argsTupleScheme();
            }
        }

        private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
        }

        public connect_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public connect_result(connect_result other) {
        }

        public connect_result deepCopy() {
            return new connect_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof connect_result)
                return this.equals((connect_result)that);
            return false;
        }

        public boolean equals(connect_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(connect_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connect_resultStandardScheme getScheme() {
                return new connect_resultStandardScheme();
            }
        }

        private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public connect_resultTupleScheme getScheme() {
                return new connect_resultTupleScheme();
            }
        }

        private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setCCP_args implements org.apache.thrift.TBase<setCCP_args, setCCP_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCCP_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCCP_args");

        private static final org.apache.thrift.protocol.TField CCP_FIELD_DESC = new org.apache.thrift.protocol.TField("ccp", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCCP_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCCP_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String ccp; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CCP((short)1, "ccp");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CCP
                        return CCP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CCP, new org.apache.thrift.meta_data.FieldMetaData("ccp", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCCP_args.class, metaDataMap);
        }

        public setCCP_args() {
        }

        public setCCP_args(
                java.lang.String ccp)
        {
            this();
            this.ccp = ccp;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setCCP_args(setCCP_args other) {
            if (other.isSetCcp()) {
                this.ccp = other.ccp;
            }
        }

        public setCCP_args deepCopy() {
            return new setCCP_args(this);
        }

        @Override
        public void clear() {
            this.ccp = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getCcp() {
            return this.ccp;
        }

        public setCCP_args setCcp(@org.apache.thrift.annotation.Nullable java.lang.String ccp) {
            this.ccp = ccp;
            return this;
        }

        public void unsetCcp() {
            this.ccp = null;
        }

        /** Returns true if field ccp is set (has been assigned a value) and false otherwise */
        public boolean isSetCcp() {
            return this.ccp != null;
        }

        public void setCcpIsSet(boolean value) {
            if (!value) {
                this.ccp = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case CCP:
                    if (value == null) {
                        unsetCcp();
                    } else {
                        setCcp((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CCP:
                    return getCcp();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CCP:
                    return isSetCcp();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setCCP_args)
                return this.equals((setCCP_args)that);
            return false;
        }

        public boolean equals(setCCP_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_ccp = true && this.isSetCcp();
            boolean that_present_ccp = true && that.isSetCcp();
            if (this_present_ccp || that_present_ccp) {
                if (!(this_present_ccp && that_present_ccp))
                    return false;
                if (!this.ccp.equals(that.ccp))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetCcp()) ? 131071 : 524287);
            if (isSetCcp())
                hashCode = hashCode * 8191 + ccp.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setCCP_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetCcp(), other.isSetCcp());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCcp()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ccp, other.ccp);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setCCP_args(");
            boolean first = true;

            sb.append("ccp:");
            if (this.ccp == null) {
                sb.append("null");
            } else {
                sb.append(this.ccp);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setCCP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setCCP_argsStandardScheme getScheme() {
                return new setCCP_argsStandardScheme();
            }
        }

        private static class setCCP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setCCP_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setCCP_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CCP
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.ccp = iprot.readString();
                                struct.setCcpIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setCCP_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ccp != null) {
                    oprot.writeFieldBegin(CCP_FIELD_DESC);
                    oprot.writeString(struct.ccp);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setCCP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setCCP_argsTupleScheme getScheme() {
                return new setCCP_argsTupleScheme();
            }
        }

        private static class setCCP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCCP_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setCCP_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetCcp()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCcp()) {
                    oprot.writeString(struct.ccp);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setCCP_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.ccp = iprot.readString();
                    struct.setCcpIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setCCP_result implements org.apache.thrift.TBase<setCCP_result, setCCP_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCCP_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCCP_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCCP_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCCP_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCCP_result.class, metaDataMap);
        }

        public setCCP_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setCCP_result(setCCP_result other) {
        }

        public setCCP_result deepCopy() {
            return new setCCP_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setCCP_result)
                return this.equals((setCCP_result)that);
            return false;
        }

        public boolean equals(setCCP_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(setCCP_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setCCP_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setCCP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setCCP_resultStandardScheme getScheme() {
                return new setCCP_resultStandardScheme();
            }
        }

        private static class setCCP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setCCP_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setCCP_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setCCP_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setCCP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setCCP_resultTupleScheme getScheme() {
                return new setCCP_resultTupleScheme();
            }
        }

        private static class setCCP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCCP_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setCCP_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setCCP_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setUserName_args implements org.apache.thrift.TBase<setUserName_args, setUserName_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserName_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserName_args");

        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserName_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USER_NAME((short)1, "userName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // USER_NAME
                        return USER_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserName_args.class, metaDataMap);
        }

        public setUserName_args() {
        }

        public setUserName_args(
                java.lang.String userName)
        {
            this();
            this.userName = userName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setUserName_args(setUserName_args other) {
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
        }

        public setUserName_args deepCopy() {
            return new setUserName_args(this);
        }

        @Override
        public void clear() {
            this.userName = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserName() {
            return this.userName;
        }

        public setUserName_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case USER_NAME:
                    return getUserName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case USER_NAME:
                    return isSetUserName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setUserName_args)
                return this.equals((setUserName_args)that);
            return false;
        }

        public boolean equals(setUserName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
            if (isSetUserName())
                hashCode = hashCode * 8191 + userName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setUserName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUserName(), other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserName_args(");
            boolean first = true;

            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setUserName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setUserName_argsStandardScheme getScheme() {
                return new setUserName_argsStandardScheme();
            }
        }

        private static class setUserName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setUserName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setUserName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setUserName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setUserName_argsTupleScheme getScheme() {
                return new setUserName_argsTupleScheme();
            }
        }

        private static class setUserName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setUserName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUserName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setUserName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setUserName_result implements org.apache.thrift.TBase<setUserName_result, setUserName_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserName_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserName_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserName_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserName_result.class, metaDataMap);
        }

        public setUserName_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setUserName_result(setUserName_result other) {
        }

        public setUserName_result deepCopy() {
            return new setUserName_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setUserName_result)
                return this.equals((setUserName_result)that);
            return false;
        }

        public boolean equals(setUserName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(setUserName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserName_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setUserName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setUserName_resultStandardScheme getScheme() {
                return new setUserName_resultStandardScheme();
            }
        }

        private static class setUserName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUserName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setUserName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setUserName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setUserName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setUserName_resultTupleScheme getScheme() {
                return new setUserName_resultTupleScheme();
            }
        }

        private static class setUserName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setUserName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setUserName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setChannelName_args implements org.apache.thrift.TBase<setChannelName_args, setChannelName_args._Fields>, java.io.Serializable, Cloneable, Comparable<setChannelName_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChannelName_args");

        private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channelName", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setChannelName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setChannelName_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String channelName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHANNEL_NAME((short)1, "channelName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHANNEL_NAME
                        return CHANNEL_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channelName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChannelName_args.class, metaDataMap);
        }

        public setChannelName_args() {
        }

        public setChannelName_args(
                java.lang.String channelName)
        {
            this();
            this.channelName = channelName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setChannelName_args(setChannelName_args other) {
            if (other.isSetChannelName()) {
                this.channelName = other.channelName;
            }
        }

        public setChannelName_args deepCopy() {
            return new setChannelName_args(this);
        }

        @Override
        public void clear() {
            this.channelName = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getChannelName() {
            return this.channelName;
        }

        public setChannelName_args setChannelName(@org.apache.thrift.annotation.Nullable java.lang.String channelName) {
            this.channelName = channelName;
            return this;
        }

        public void unsetChannelName() {
            this.channelName = null;
        }

        /** Returns true if field channelName is set (has been assigned a value) and false otherwise */
        public boolean isSetChannelName() {
            return this.channelName != null;
        }

        public void setChannelNameIsSet(boolean value) {
            if (!value) {
                this.channelName = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case CHANNEL_NAME:
                    if (value == null) {
                        unsetChannelName();
                    } else {
                        setChannelName((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHANNEL_NAME:
                    return getChannelName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHANNEL_NAME:
                    return isSetChannelName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setChannelName_args)
                return this.equals((setChannelName_args)that);
            return false;
        }

        public boolean equals(setChannelName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_channelName = true && this.isSetChannelName();
            boolean that_present_channelName = true && that.isSetChannelName();
            if (this_present_channelName || that_present_channelName) {
                if (!(this_present_channelName && that_present_channelName))
                    return false;
                if (!this.channelName.equals(that.channelName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetChannelName()) ? 131071 : 524287);
            if (isSetChannelName())
                hashCode = hashCode * 8191 + channelName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setChannelName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetChannelName(), other.isSetChannelName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChannelName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelName, other.channelName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setChannelName_args(");
            boolean first = true;

            sb.append("channelName:");
            if (this.channelName == null) {
                sb.append("null");
            } else {
                sb.append(this.channelName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setChannelName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChannelName_argsStandardScheme getScheme() {
                return new setChannelName_argsStandardScheme();
            }
        }

        private static class setChannelName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setChannelName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setChannelName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHANNEL_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.channelName = iprot.readString();
                                struct.setChannelNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setChannelName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.channelName != null) {
                    oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
                    oprot.writeString(struct.channelName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setChannelName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChannelName_argsTupleScheme getScheme() {
                return new setChannelName_argsTupleScheme();
            }
        }

        private static class setChannelName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setChannelName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setChannelName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetChannelName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetChannelName()) {
                    oprot.writeString(struct.channelName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setChannelName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.channelName = iprot.readString();
                    struct.setChannelNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setChannelName_result implements org.apache.thrift.TBase<setChannelName_result, setChannelName_result._Fields>, java.io.Serializable, Cloneable, Comparable<setChannelName_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChannelName_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setChannelName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setChannelName_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChannelName_result.class, metaDataMap);
        }

        public setChannelName_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setChannelName_result(setChannelName_result other) {
        }

        public setChannelName_result deepCopy() {
            return new setChannelName_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setChannelName_result)
                return this.equals((setChannelName_result)that);
            return false;
        }

        public boolean equals(setChannelName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(setChannelName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setChannelName_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setChannelName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChannelName_resultStandardScheme getScheme() {
                return new setChannelName_resultStandardScheme();
            }
        }

        private static class setChannelName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setChannelName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setChannelName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setChannelName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setChannelName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChannelName_resultTupleScheme getScheme() {
                return new setChannelName_resultTupleScheme();
            }
        }

        private static class setChannelName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setChannelName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setChannelName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setChannelName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setChaincodeName_args implements org.apache.thrift.TBase<setChaincodeName_args, setChaincodeName_args._Fields>, java.io.Serializable, Cloneable, Comparable<setChaincodeName_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChaincodeName_args");

        private static final org.apache.thrift.protocol.TField CHAINCODE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chaincodeName", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setChaincodeName_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setChaincodeName_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String chaincodeName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CHAINCODE_NAME((short)1, "chaincodeName");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // CHAINCODE_NAME
                        return CHAINCODE_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CHAINCODE_NAME, new org.apache.thrift.meta_data.FieldMetaData("chaincodeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChaincodeName_args.class, metaDataMap);
        }

        public setChaincodeName_args() {
        }

        public setChaincodeName_args(
                java.lang.String chaincodeName)
        {
            this();
            this.chaincodeName = chaincodeName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setChaincodeName_args(setChaincodeName_args other) {
            if (other.isSetChaincodeName()) {
                this.chaincodeName = other.chaincodeName;
            }
        }

        public setChaincodeName_args deepCopy() {
            return new setChaincodeName_args(this);
        }

        @Override
        public void clear() {
            this.chaincodeName = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getChaincodeName() {
            return this.chaincodeName;
        }

        public setChaincodeName_args setChaincodeName(@org.apache.thrift.annotation.Nullable java.lang.String chaincodeName) {
            this.chaincodeName = chaincodeName;
            return this;
        }

        public void unsetChaincodeName() {
            this.chaincodeName = null;
        }

        /** Returns true if field chaincodeName is set (has been assigned a value) and false otherwise */
        public boolean isSetChaincodeName() {
            return this.chaincodeName != null;
        }

        public void setChaincodeNameIsSet(boolean value) {
            if (!value) {
                this.chaincodeName = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case CHAINCODE_NAME:
                    if (value == null) {
                        unsetChaincodeName();
                    } else {
                        setChaincodeName((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case CHAINCODE_NAME:
                    return getChaincodeName();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case CHAINCODE_NAME:
                    return isSetChaincodeName();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setChaincodeName_args)
                return this.equals((setChaincodeName_args)that);
            return false;
        }

        public boolean equals(setChaincodeName_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_chaincodeName = true && this.isSetChaincodeName();
            boolean that_present_chaincodeName = true && that.isSetChaincodeName();
            if (this_present_chaincodeName || that_present_chaincodeName) {
                if (!(this_present_chaincodeName && that_present_chaincodeName))
                    return false;
                if (!this.chaincodeName.equals(that.chaincodeName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetChaincodeName()) ? 131071 : 524287);
            if (isSetChaincodeName())
                hashCode = hashCode * 8191 + chaincodeName.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(setChaincodeName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetChaincodeName(), other.isSetChaincodeName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetChaincodeName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chaincodeName, other.chaincodeName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setChaincodeName_args(");
            boolean first = true;

            sb.append("chaincodeName:");
            if (this.chaincodeName == null) {
                sb.append("null");
            } else {
                sb.append(this.chaincodeName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setChaincodeName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChaincodeName_argsStandardScheme getScheme() {
                return new setChaincodeName_argsStandardScheme();
            }
        }

        private static class setChaincodeName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setChaincodeName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setChaincodeName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CHAINCODE_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.chaincodeName = iprot.readString();
                                struct.setChaincodeNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setChaincodeName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.chaincodeName != null) {
                    oprot.writeFieldBegin(CHAINCODE_NAME_FIELD_DESC);
                    oprot.writeString(struct.chaincodeName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setChaincodeName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChaincodeName_argsTupleScheme getScheme() {
                return new setChaincodeName_argsTupleScheme();
            }
        }

        private static class setChaincodeName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setChaincodeName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setChaincodeName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetChaincodeName()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetChaincodeName()) {
                    oprot.writeString(struct.chaincodeName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setChaincodeName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.chaincodeName = iprot.readString();
                    struct.setChaincodeNameIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class setChaincodeName_result implements org.apache.thrift.TBase<setChaincodeName_result, setChaincodeName_result._Fields>, java.io.Serializable, Cloneable, Comparable<setChaincodeName_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChaincodeName_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setChaincodeName_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setChaincodeName_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChaincodeName_result.class, metaDataMap);
        }

        public setChaincodeName_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setChaincodeName_result(setChaincodeName_result other) {
        }

        public setChaincodeName_result deepCopy() {
            return new setChaincodeName_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof setChaincodeName_result)
                return this.equals((setChaincodeName_result)that);
            return false;
        }

        public boolean equals(setChaincodeName_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(setChaincodeName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("setChaincodeName_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setChaincodeName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChaincodeName_resultStandardScheme getScheme() {
                return new setChaincodeName_resultStandardScheme();
            }
        }

        private static class setChaincodeName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setChaincodeName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setChaincodeName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setChaincodeName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setChaincodeName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public setChaincodeName_resultTupleScheme getScheme() {
                return new setChaincodeName_resultTupleScheme();
            }
        }

        private static class setChaincodeName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setChaincodeName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setChaincodeName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setChaincodeName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initOpinionRecord_args implements org.apache.thrift.TBase<initOpinionRecord_args, initOpinionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initOpinionRecord_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initOpinionRecord_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
        private static final org.apache.thrift.protocol.TField OPINION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opinionTime", org.apache.thrift.protocol.TType.STRING, (short)6);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initOpinionRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initOpinionRecord_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String object; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String opinionTime; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short)1, "uuid"),
            DEPARTMENT((short)2, "department"),
            USER_NAME((short)3, "userName"),
            OBJECT((short)4, "object"),
            TYPE((short)5, "type"),
            OPINION_TIME((short)6, "opinionTime");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // UUID
                        return UUID;
                    case 2: // DEPARTMENT
                        return DEPARTMENT;
                    case 3: // USER_NAME
                        return USER_NAME;
                    case 4: // OBJECT
                        return OBJECT;
                    case 5: // TYPE
                        return TYPE;
                    case 6: // OPINION_TIME
                        return OPINION_TIME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPINION_TIME, new org.apache.thrift.meta_data.FieldMetaData("opinionTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initOpinionRecord_args.class, metaDataMap);
        }

        public initOpinionRecord_args() {
        }

        public initOpinionRecord_args(
                java.lang.String uuid,
                java.lang.String department,
                java.lang.String userName,
                java.lang.String object,
                java.lang.String type,
                java.lang.String opinionTime)
        {
            this();
            this.uuid = uuid;
            this.department = department;
            this.userName = userName;
            this.object = object;
            this.type = type;
            this.opinionTime = opinionTime;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initOpinionRecord_args(initOpinionRecord_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetObject()) {
                this.object = other.object;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
            if (other.isSetOpinionTime()) {
                this.opinionTime = other.opinionTime;
            }
        }

        public initOpinionRecord_args deepCopy() {
            return new initOpinionRecord_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
            this.department = null;
            this.userName = null;
            this.object = null;
            this.type = null;
            this.opinionTime = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUuid() {
            return this.uuid;
        }

        public initOpinionRecord_args setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public initOpinionRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserName() {
            return this.userName;
        }

        public initOpinionRecord_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getObject() {
            return this.object;
        }

        public initOpinionRecord_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
            this.object = object;
            return this;
        }

        public void unsetObject() {
            this.object = null;
        }

        /** Returns true if field object is set (has been assigned a value) and false otherwise */
        public boolean isSetObject() {
            return this.object != null;
        }

        public void setObjectIsSet(boolean value) {
            if (!value) {
                this.object = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public initOpinionRecord_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOpinionTime() {
            return this.opinionTime;
        }

        public initOpinionRecord_args setOpinionTime(@org.apache.thrift.annotation.Nullable java.lang.String opinionTime) {
            this.opinionTime = opinionTime;
            return this;
        }

        public void unsetOpinionTime() {
            this.opinionTime = null;
        }

        /** Returns true if field opinionTime is set (has been assigned a value) and false otherwise */
        public boolean isSetOpinionTime() {
            return this.opinionTime != null;
        }

        public void setOpinionTimeIsSet(boolean value) {
            if (!value) {
                this.opinionTime = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((java.lang.String)value);
                    }
                    break;

                case OBJECT:
                    if (value == null) {
                        unsetObject();
                    } else {
                        setObject((java.lang.String)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String)value);
                    }
                    break;

                case OPINION_TIME:
                    if (value == null) {
                        unsetOpinionTime();
                    } else {
                        setOpinionTime((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

                case DEPARTMENT:
                    return getDepartment();

                case USER_NAME:
                    return getUserName();

                case OBJECT:
                    return getObject();

                case TYPE:
                    return getType();

                case OPINION_TIME:
                    return getOpinionTime();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
                case DEPARTMENT:
                    return isSetDepartment();
                case USER_NAME:
                    return isSetUserName();
                case OBJECT:
                    return isSetObject();
                case TYPE:
                    return isSetType();
                case OPINION_TIME:
                    return isSetOpinionTime();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initOpinionRecord_args)
                return this.equals((initOpinionRecord_args)that);
            return false;
        }

        public boolean equals(initOpinionRecord_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_object = true && this.isSetObject();
            boolean that_present_object = true && that.isSetObject();
            if (this_present_object || that_present_object) {
                if (!(this_present_object && that_present_object))
                    return false;
                if (!this.object.equals(that.object))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            boolean this_present_opinionTime = true && this.isSetOpinionTime();
            boolean that_present_opinionTime = true && that.isSetOpinionTime();
            if (this_present_opinionTime || that_present_opinionTime) {
                if (!(this_present_opinionTime && that_present_opinionTime))
                    return false;
                if (!this.opinionTime.equals(that.opinionTime))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
            if (isSetUserName())
                hashCode = hashCode * 8191 + userName.hashCode();

            hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
            if (isSetObject())
                hashCode = hashCode * 8191 + object.hashCode();

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            hashCode = hashCode * 8191 + ((isSetOpinionTime()) ? 131071 : 524287);
            if (isSetOpinionTime())
                hashCode = hashCode * 8191 + opinionTime.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(initOpinionRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserName(), other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObject()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetOpinionTime(), other.isSetOpinionTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOpinionTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinionTime, other.opinionTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initOpinionRecord_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("object:");
            if (this.object == null) {
                sb.append("null");
            } else {
                sb.append(this.object);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("opinionTime:");
            if (this.opinionTime == null) {
                sb.append("null");
            } else {
                sb.append(this.opinionTime);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initOpinionRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initOpinionRecord_argsStandardScheme getScheme() {
                return new initOpinionRecord_argsStandardScheme();
            }
        }

        private static class initOpinionRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initOpinionRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.object = iprot.readString();
                                struct.setObjectIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // OPINION_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.opinionTime = iprot.readString();
                                struct.setOpinionTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.object != null) {
                    oprot.writeFieldBegin(OBJECT_FIELD_DESC);
                    oprot.writeString(struct.object);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                if (struct.opinionTime != null) {
                    oprot.writeFieldBegin(OPINION_TIME_FIELD_DESC);
                    oprot.writeString(struct.opinionTime);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initOpinionRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initOpinionRecord_argsTupleScheme getScheme() {
                return new initOpinionRecord_argsTupleScheme();
            }
        }

        private static class initOpinionRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initOpinionRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                if (struct.isSetDepartment()) {
                    optionals.set(1);
                }
                if (struct.isSetUserName()) {
                    optionals.set(2);
                }
                if (struct.isSetObject()) {
                    optionals.set(3);
                }
                if (struct.isSetType()) {
                    optionals.set(4);
                }
                if (struct.isSetOpinionTime()) {
                    optionals.set(5);
                }
                oprot.writeBitSet(optionals, 6);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetObject()) {
                    oprot.writeString(struct.object);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
                if (struct.isSetOpinionTime()) {
                    oprot.writeString(struct.opinionTime);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(6);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.object = iprot.readString();
                    struct.setObjectIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.opinionTime = iprot.readString();
                    struct.setOpinionTimeIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initOpinionRecord_result implements org.apache.thrift.TBase<initOpinionRecord_result, initOpinionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initOpinionRecord_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initOpinionRecord_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initOpinionRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initOpinionRecord_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initOpinionRecord_result.class, metaDataMap);
        }

        public initOpinionRecord_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initOpinionRecord_result(initOpinionRecord_result other) {
        }

        public initOpinionRecord_result deepCopy() {
            return new initOpinionRecord_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initOpinionRecord_result)
                return this.equals((initOpinionRecord_result)that);
            return false;
        }

        public boolean equals(initOpinionRecord_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(initOpinionRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initOpinionRecord_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initOpinionRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initOpinionRecord_resultStandardScheme getScheme() {
                return new initOpinionRecord_resultStandardScheme();
            }
        }

        private static class initOpinionRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initOpinionRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initOpinionRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initOpinionRecord_resultTupleScheme getScheme() {
                return new initOpinionRecord_resultTupleScheme();
            }
        }

        private static class initOpinionRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initOpinionRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initDirectRecord_args implements org.apache.thrift.TBase<initDirectRecord_args, initDirectRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initDirectRecord_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initDirectRecord_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
        private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.STRING, (short)6);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initDirectRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initDirectRecord_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String object; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String type; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String operateTime; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String content; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short)1, "uuid"),
            DEPARTMENT((short)2, "department"),
            USER_NAME((short)3, "userName"),
            OBJECT((short)4, "object"),
            TYPE((short)5, "type"),
            OPERATE_TIME((short)6, "operateTime"),
            CONTENT((short)7, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // UUID
                        return UUID;
                    case 2: // DEPARTMENT
                        return DEPARTMENT;
                    case 3: // USER_NAME
                        return USER_NAME;
                    case 4: // OBJECT
                        return OBJECT;
                    case 5: // TYPE
                        return TYPE;
                    case 6: // OPERATE_TIME
                        return OPERATE_TIME;
                    case 7: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initDirectRecord_args.class, metaDataMap);
        }

        public initDirectRecord_args() {
        }

        public initDirectRecord_args(
                java.lang.String uuid,
                java.lang.String department,
                java.lang.String userName,
                java.lang.String object,
                java.lang.String type,
                java.lang.String operateTime,
                java.lang.String content)
        {
            this();
            this.uuid = uuid;
            this.department = department;
            this.userName = userName;
            this.object = object;
            this.type = type;
            this.operateTime = operateTime;
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initDirectRecord_args(initDirectRecord_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetObject()) {
                this.object = other.object;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
            if (other.isSetOperateTime()) {
                this.operateTime = other.operateTime;
            }
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public initDirectRecord_args deepCopy() {
            return new initDirectRecord_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
            this.department = null;
            this.userName = null;
            this.object = null;
            this.type = null;
            this.operateTime = null;
            this.content = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUuid() {
            return this.uuid;
        }

        public initDirectRecord_args setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public initDirectRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserName() {
            return this.userName;
        }

        public initDirectRecord_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getObject() {
            return this.object;
        }

        public initDirectRecord_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
            this.object = object;
            return this;
        }

        public void unsetObject() {
            this.object = null;
        }

        /** Returns true if field object is set (has been assigned a value) and false otherwise */
        public boolean isSetObject() {
            return this.object != null;
        }

        public void setObjectIsSet(boolean value) {
            if (!value) {
                this.object = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getType() {
            return this.type;
        }

        public initDirectRecord_args setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOperateTime() {
            return this.operateTime;
        }

        public initDirectRecord_args setOperateTime(@org.apache.thrift.annotation.Nullable java.lang.String operateTime) {
            this.operateTime = operateTime;
            return this;
        }

        public void unsetOperateTime() {
            this.operateTime = null;
        }

        /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
        public boolean isSetOperateTime() {
            return this.operateTime != null;
        }

        public void setOperateTimeIsSet(boolean value) {
            if (!value) {
                this.operateTime = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getContent() {
            return this.content;
        }

        public initDirectRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /** Returns true if field content is set (has been assigned a value) and false otherwise */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((java.lang.String)value);
                    }
                    break;

                case OBJECT:
                    if (value == null) {
                        unsetObject();
                    } else {
                        setObject((java.lang.String)value);
                    }
                    break;

                case TYPE:
                    if (value == null) {
                        unsetType();
                    } else {
                        setType((java.lang.String)value);
                    }
                    break;

                case OPERATE_TIME:
                    if (value == null) {
                        unsetOperateTime();
                    } else {
                        setOperateTime((java.lang.String)value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

                case DEPARTMENT:
                    return getDepartment();

                case USER_NAME:
                    return getUserName();

                case OBJECT:
                    return getObject();

                case TYPE:
                    return getType();

                case OPERATE_TIME:
                    return getOperateTime();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
                case DEPARTMENT:
                    return isSetDepartment();
                case USER_NAME:
                    return isSetUserName();
                case OBJECT:
                    return isSetObject();
                case TYPE:
                    return isSetType();
                case OPERATE_TIME:
                    return isSetOperateTime();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initDirectRecord_args)
                return this.equals((initDirectRecord_args)that);
            return false;
        }

        public boolean equals(initDirectRecord_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_object = true && this.isSetObject();
            boolean that_present_object = true && that.isSetObject();
            if (this_present_object || that_present_object) {
                if (!(this_present_object && that_present_object))
                    return false;
                if (!this.object.equals(that.object))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            boolean this_present_operateTime = true && this.isSetOperateTime();
            boolean that_present_operateTime = true && that.isSetOperateTime();
            if (this_present_operateTime || that_present_operateTime) {
                if (!(this_present_operateTime && that_present_operateTime))
                    return false;
                if (!this.operateTime.equals(that.operateTime))
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
            if (isSetUserName())
                hashCode = hashCode * 8191 + userName.hashCode();

            hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
            if (isSetObject())
                hashCode = hashCode * 8191 + object.hashCode();

            hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
            if (isSetType())
                hashCode = hashCode * 8191 + type.hashCode();

            hashCode = hashCode * 8191 + ((isSetOperateTime()) ? 131071 : 524287);
            if (isSetOperateTime())
                hashCode = hashCode * 8191 + operateTime.hashCode();

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(initDirectRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserName(), other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObject()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetOperateTime(), other.isSetOperateTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOperateTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initDirectRecord_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("object:");
            if (this.object == null) {
                sb.append("null");
            } else {
                sb.append(this.object);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("operateTime:");
            if (this.operateTime == null) {
                sb.append("null");
            } else {
                sb.append(this.operateTime);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initDirectRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initDirectRecord_argsStandardScheme getScheme() {
                return new initDirectRecord_argsStandardScheme();
            }
        }

        private static class initDirectRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initDirectRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initDirectRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OBJECT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.object = iprot.readString();
                                struct.setObjectIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // TYPE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.type = iprot.readString();
                                struct.setTypeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 6: // OPERATE_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.operateTime = iprot.readString();
                                struct.setOperateTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 7: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initDirectRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.object != null) {
                    oprot.writeFieldBegin(OBJECT_FIELD_DESC);
                    oprot.writeString(struct.object);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                if (struct.operateTime != null) {
                    oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
                    oprot.writeString(struct.operateTime);
                    oprot.writeFieldEnd();
                }
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initDirectRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initDirectRecord_argsTupleScheme getScheme() {
                return new initDirectRecord_argsTupleScheme();
            }
        }

        private static class initDirectRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initDirectRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                if (struct.isSetDepartment()) {
                    optionals.set(1);
                }
                if (struct.isSetUserName()) {
                    optionals.set(2);
                }
                if (struct.isSetObject()) {
                    optionals.set(3);
                }
                if (struct.isSetType()) {
                    optionals.set(4);
                }
                if (struct.isSetOperateTime()) {
                    optionals.set(5);
                }
                if (struct.isSetContent()) {
                    optionals.set(6);
                }
                oprot.writeBitSet(optionals, 7);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetObject()) {
                    oprot.writeString(struct.object);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
                if (struct.isSetOperateTime()) {
                    oprot.writeString(struct.operateTime);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(7);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.object = iprot.readString();
                    struct.setObjectIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(5)) {
                    struct.operateTime = iprot.readString();
                    struct.setOperateTimeIsSet(true);
                }
                if (incoming.get(6)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initDirectRecord_result implements org.apache.thrift.TBase<initDirectRecord_result, initDirectRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initDirectRecord_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initDirectRecord_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initDirectRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initDirectRecord_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initDirectRecord_result.class, metaDataMap);
        }

        public initDirectRecord_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initDirectRecord_result(initDirectRecord_result other) {
        }

        public initDirectRecord_result deepCopy() {
            return new initDirectRecord_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initDirectRecord_result)
                return this.equals((initDirectRecord_result)that);
            return false;
        }

        public boolean equals(initDirectRecord_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(initDirectRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initDirectRecord_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initDirectRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initDirectRecord_resultStandardScheme getScheme() {
                return new initDirectRecord_resultStandardScheme();
            }
        }

        private static class initDirectRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initDirectRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initDirectRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initDirectRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initDirectRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initDirectRecord_resultTupleScheme getScheme() {
                return new initDirectRecord_resultTupleScheme();
            }
        }

        private static class initDirectRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initDirectRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initUserRecord_args implements org.apache.thrift.TBase<initUserRecord_args, initUserRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initUserRecord_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initUserRecord_args");

        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("userAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initUserRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initUserRecord_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userAddress; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String role; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPARTMENT((short)1, "department"),
            USER_NAME((short)2, "userName"),
            USER_ADDRESS((short)3, "userAddress"),
            ROLE((short)4, "role");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DEPARTMENT
                        return DEPARTMENT;
                    case 2: // USER_NAME
                        return USER_NAME;
                    case 3: // USER_ADDRESS
                        return USER_ADDRESS;
                    case 4: // ROLE
                        return ROLE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("userAddress", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initUserRecord_args.class, metaDataMap);
        }

        public initUserRecord_args() {
        }

        public initUserRecord_args(
                java.lang.String department,
                java.lang.String userName,
                java.lang.String userAddress,
                java.lang.String role)
        {
            this();
            this.department = department;
            this.userName = userName;
            this.userAddress = userAddress;
            this.role = role;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initUserRecord_args(initUserRecord_args other) {
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetUserAddress()) {
                this.userAddress = other.userAddress;
            }
            if (other.isSetRole()) {
                this.role = other.role;
            }
        }

        public initUserRecord_args deepCopy() {
            return new initUserRecord_args(this);
        }

        @Override
        public void clear() {
            this.department = null;
            this.userName = null;
            this.userAddress = null;
            this.role = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public initUserRecord_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserName() {
            return this.userName;
        }

        public initUserRecord_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserAddress() {
            return this.userAddress;
        }

        public initUserRecord_args setUserAddress(@org.apache.thrift.annotation.Nullable java.lang.String userAddress) {
            this.userAddress = userAddress;
            return this;
        }

        public void unsetUserAddress() {
            this.userAddress = null;
        }

        /** Returns true if field userAddress is set (has been assigned a value) and false otherwise */
        public boolean isSetUserAddress() {
            return this.userAddress != null;
        }

        public void setUserAddressIsSet(boolean value) {
            if (!value) {
                this.userAddress = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getRole() {
            return this.role;
        }

        public initUserRecord_args setRole(@org.apache.thrift.annotation.Nullable java.lang.String role) {
            this.role = role;
            return this;
        }

        public void unsetRole() {
            this.role = null;
        }

        /** Returns true if field role is set (has been assigned a value) and false otherwise */
        public boolean isSetRole() {
            return this.role != null;
        }

        public void setRoleIsSet(boolean value) {
            if (!value) {
                this.role = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((java.lang.String)value);
                    }
                    break;

                case USER_ADDRESS:
                    if (value == null) {
                        unsetUserAddress();
                    } else {
                        setUserAddress((java.lang.String)value);
                    }
                    break;

                case ROLE:
                    if (value == null) {
                        unsetRole();
                    } else {
                        setRole((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPARTMENT:
                    return getDepartment();

                case USER_NAME:
                    return getUserName();

                case USER_ADDRESS:
                    return getUserAddress();

                case ROLE:
                    return getRole();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DEPARTMENT:
                    return isSetDepartment();
                case USER_NAME:
                    return isSetUserName();
                case USER_ADDRESS:
                    return isSetUserAddress();
                case ROLE:
                    return isSetRole();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initUserRecord_args)
                return this.equals((initUserRecord_args)that);
            return false;
        }

        public boolean equals(initUserRecord_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_userAddress = true && this.isSetUserAddress();
            boolean that_present_userAddress = true && that.isSetUserAddress();
            if (this_present_userAddress || that_present_userAddress) {
                if (!(this_present_userAddress && that_present_userAddress))
                    return false;
                if (!this.userAddress.equals(that.userAddress))
                    return false;
            }

            boolean this_present_role = true && this.isSetRole();
            boolean that_present_role = true && that.isSetRole();
            if (this_present_role || that_present_role) {
                if (!(this_present_role && that_present_role))
                    return false;
                if (!this.role.equals(that.role))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
            if (isSetUserName())
                hashCode = hashCode * 8191 + userName.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserAddress()) ? 131071 : 524287);
            if (isSetUserAddress())
                hashCode = hashCode * 8191 + userAddress.hashCode();

            hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
            if (isSetRole())
                hashCode = hashCode * 8191 + role.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(initUserRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserName(), other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserAddress(), other.isSetUserAddress());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserAddress()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAddress, other.userAddress);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetRole(), other.isSetRole());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRole()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initUserRecord_args(");
            boolean first = true;

            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userAddress:");
            if (this.userAddress == null) {
                sb.append("null");
            } else {
                sb.append(this.userAddress);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("role:");
            if (this.role == null) {
                sb.append("null");
            } else {
                sb.append(this.role);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initUserRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initUserRecord_argsStandardScheme getScheme() {
                return new initUserRecord_argsStandardScheme();
            }
        }

        private static class initUserRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initUserRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initUserRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ADDRESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userAddress = iprot.readString();
                                struct.setUserAddressIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // ROLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.role = iprot.readString();
                                struct.setRoleIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initUserRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.userAddress != null) {
                    oprot.writeFieldBegin(USER_ADDRESS_FIELD_DESC);
                    oprot.writeString(struct.userAddress);
                    oprot.writeFieldEnd();
                }
                if (struct.role != null) {
                    oprot.writeFieldBegin(ROLE_FIELD_DESC);
                    oprot.writeString(struct.role);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initUserRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initUserRecord_argsTupleScheme getScheme() {
                return new initUserRecord_argsTupleScheme();
            }
        }

        private static class initUserRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initUserRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initUserRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepartment()) {
                    optionals.set(0);
                }
                if (struct.isSetUserName()) {
                    optionals.set(1);
                }
                if (struct.isSetUserAddress()) {
                    optionals.set(2);
                }
                if (struct.isSetRole()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetUserAddress()) {
                    oprot.writeString(struct.userAddress);
                }
                if (struct.isSetRole()) {
                    oprot.writeString(struct.role);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initUserRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.userAddress = iprot.readString();
                    struct.setUserAddressIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.role = iprot.readString();
                    struct.setRoleIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class initUserRecord_result implements org.apache.thrift.TBase<initUserRecord_result, initUserRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initUserRecord_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initUserRecord_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initUserRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initUserRecord_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initUserRecord_result.class, metaDataMap);
        }

        public initUserRecord_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public initUserRecord_result(initUserRecord_result other) {
        }

        public initUserRecord_result deepCopy() {
            return new initUserRecord_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof initUserRecord_result)
                return this.equals((initUserRecord_result)that);
            return false;
        }

        public boolean equals(initUserRecord_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(initUserRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("initUserRecord_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class initUserRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initUserRecord_resultStandardScheme getScheme() {
                return new initUserRecord_resultStandardScheme();
            }
        }

        private static class initUserRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initUserRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, initUserRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, initUserRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class initUserRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public initUserRecord_resultTupleScheme getScheme() {
                return new initUserRecord_resultTupleScheme();
            }
        }

        private static class initUserRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initUserRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, initUserRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, initUserRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class reviewRecord_args implements org.apache.thrift.TBase<reviewRecord_args, reviewRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<reviewRecord_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reviewRecord_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField REVIEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewer", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField REVIEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewTime", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField REVIEW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewResult", org.apache.thrift.protocol.TType.STRING, (short)4);
        private static final org.apache.thrift.protocol.TField REVIEW_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewDepartment", org.apache.thrift.protocol.TType.STRING, (short)5);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reviewRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reviewRecord_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String reviewer; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String reviewTime; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String reviewResult; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String reviewDepartment; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short)1, "uuid"),
            REVIEWER((short)2, "reviewer"),
            REVIEW_TIME((short)3, "reviewTime"),
            REVIEW_RESULT((short)4, "reviewResult"),
            REVIEW_DEPARTMENT((short)5, "reviewDepartment");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // UUID
                        return UUID;
                    case 2: // REVIEWER
                        return REVIEWER;
                    case 3: // REVIEW_TIME
                        return REVIEW_TIME;
                    case 4: // REVIEW_RESULT
                        return REVIEW_RESULT;
                    case 5: // REVIEW_DEPARTMENT
                        return REVIEW_DEPARTMENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.REVIEWER, new org.apache.thrift.meta_data.FieldMetaData("reviewer", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.REVIEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("reviewTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.REVIEW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("reviewResult", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.REVIEW_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("reviewDepartment", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reviewRecord_args.class, metaDataMap);
        }

        public reviewRecord_args() {
        }

        public reviewRecord_args(
                java.lang.String uuid,
                java.lang.String reviewer,
                java.lang.String reviewTime,
                java.lang.String reviewResult,
                java.lang.String reviewDepartment)
        {
            this();
            this.uuid = uuid;
            this.reviewer = reviewer;
            this.reviewTime = reviewTime;
            this.reviewResult = reviewResult;
            this.reviewDepartment = reviewDepartment;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reviewRecord_args(reviewRecord_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
            if (other.isSetReviewer()) {
                this.reviewer = other.reviewer;
            }
            if (other.isSetReviewTime()) {
                this.reviewTime = other.reviewTime;
            }
            if (other.isSetReviewResult()) {
                this.reviewResult = other.reviewResult;
            }
            if (other.isSetReviewDepartment()) {
                this.reviewDepartment = other.reviewDepartment;
            }
        }

        public reviewRecord_args deepCopy() {
            return new reviewRecord_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
            this.reviewer = null;
            this.reviewTime = null;
            this.reviewResult = null;
            this.reviewDepartment = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUuid() {
            return this.uuid;
        }

        public reviewRecord_args setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getReviewer() {
            return this.reviewer;
        }

        public reviewRecord_args setReviewer(@org.apache.thrift.annotation.Nullable java.lang.String reviewer) {
            this.reviewer = reviewer;
            return this;
        }

        public void unsetReviewer() {
            this.reviewer = null;
        }

        /** Returns true if field reviewer is set (has been assigned a value) and false otherwise */
        public boolean isSetReviewer() {
            return this.reviewer != null;
        }

        public void setReviewerIsSet(boolean value) {
            if (!value) {
                this.reviewer = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getReviewTime() {
            return this.reviewTime;
        }

        public reviewRecord_args setReviewTime(@org.apache.thrift.annotation.Nullable java.lang.String reviewTime) {
            this.reviewTime = reviewTime;
            return this;
        }

        public void unsetReviewTime() {
            this.reviewTime = null;
        }

        /** Returns true if field reviewTime is set (has been assigned a value) and false otherwise */
        public boolean isSetReviewTime() {
            return this.reviewTime != null;
        }

        public void setReviewTimeIsSet(boolean value) {
            if (!value) {
                this.reviewTime = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getReviewResult() {
            return this.reviewResult;
        }

        public reviewRecord_args setReviewResult(@org.apache.thrift.annotation.Nullable java.lang.String reviewResult) {
            this.reviewResult = reviewResult;
            return this;
        }

        public void unsetReviewResult() {
            this.reviewResult = null;
        }

        /** Returns true if field reviewResult is set (has been assigned a value) and false otherwise */
        public boolean isSetReviewResult() {
            return this.reviewResult != null;
        }

        public void setReviewResultIsSet(boolean value) {
            if (!value) {
                this.reviewResult = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getReviewDepartment() {
            return this.reviewDepartment;
        }

        public reviewRecord_args setReviewDepartment(@org.apache.thrift.annotation.Nullable java.lang.String reviewDepartment) {
            this.reviewDepartment = reviewDepartment;
            return this;
        }

        public void unsetReviewDepartment() {
            this.reviewDepartment = null;
        }

        /** Returns true if field reviewDepartment is set (has been assigned a value) and false otherwise */
        public boolean isSetReviewDepartment() {
            return this.reviewDepartment != null;
        }

        public void setReviewDepartmentIsSet(boolean value) {
            if (!value) {
                this.reviewDepartment = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

                case REVIEWER:
                    if (value == null) {
                        unsetReviewer();
                    } else {
                        setReviewer((java.lang.String)value);
                    }
                    break;

                case REVIEW_TIME:
                    if (value == null) {
                        unsetReviewTime();
                    } else {
                        setReviewTime((java.lang.String)value);
                    }
                    break;

                case REVIEW_RESULT:
                    if (value == null) {
                        unsetReviewResult();
                    } else {
                        setReviewResult((java.lang.String)value);
                    }
                    break;

                case REVIEW_DEPARTMENT:
                    if (value == null) {
                        unsetReviewDepartment();
                    } else {
                        setReviewDepartment((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

                case REVIEWER:
                    return getReviewer();

                case REVIEW_TIME:
                    return getReviewTime();

                case REVIEW_RESULT:
                    return getReviewResult();

                case REVIEW_DEPARTMENT:
                    return getReviewDepartment();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
                case REVIEWER:
                    return isSetReviewer();
                case REVIEW_TIME:
                    return isSetReviewTime();
                case REVIEW_RESULT:
                    return isSetReviewResult();
                case REVIEW_DEPARTMENT:
                    return isSetReviewDepartment();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof reviewRecord_args)
                return this.equals((reviewRecord_args)that);
            return false;
        }

        public boolean equals(reviewRecord_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            boolean this_present_reviewer = true && this.isSetReviewer();
            boolean that_present_reviewer = true && that.isSetReviewer();
            if (this_present_reviewer || that_present_reviewer) {
                if (!(this_present_reviewer && that_present_reviewer))
                    return false;
                if (!this.reviewer.equals(that.reviewer))
                    return false;
            }

            boolean this_present_reviewTime = true && this.isSetReviewTime();
            boolean that_present_reviewTime = true && that.isSetReviewTime();
            if (this_present_reviewTime || that_present_reviewTime) {
                if (!(this_present_reviewTime && that_present_reviewTime))
                    return false;
                if (!this.reviewTime.equals(that.reviewTime))
                    return false;
            }

            boolean this_present_reviewResult = true && this.isSetReviewResult();
            boolean that_present_reviewResult = true && that.isSetReviewResult();
            if (this_present_reviewResult || that_present_reviewResult) {
                if (!(this_present_reviewResult && that_present_reviewResult))
                    return false;
                if (!this.reviewResult.equals(that.reviewResult))
                    return false;
            }

            boolean this_present_reviewDepartment = true && this.isSetReviewDepartment();
            boolean that_present_reviewDepartment = true && that.isSetReviewDepartment();
            if (this_present_reviewDepartment || that_present_reviewDepartment) {
                if (!(this_present_reviewDepartment && that_present_reviewDepartment))
                    return false;
                if (!this.reviewDepartment.equals(that.reviewDepartment))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            hashCode = hashCode * 8191 + ((isSetReviewer()) ? 131071 : 524287);
            if (isSetReviewer())
                hashCode = hashCode * 8191 + reviewer.hashCode();

            hashCode = hashCode * 8191 + ((isSetReviewTime()) ? 131071 : 524287);
            if (isSetReviewTime())
                hashCode = hashCode * 8191 + reviewTime.hashCode();

            hashCode = hashCode * 8191 + ((isSetReviewResult()) ? 131071 : 524287);
            if (isSetReviewResult())
                hashCode = hashCode * 8191 + reviewResult.hashCode();

            hashCode = hashCode * 8191 + ((isSetReviewDepartment()) ? 131071 : 524287);
            if (isSetReviewDepartment())
                hashCode = hashCode * 8191 + reviewDepartment.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(reviewRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetReviewer(), other.isSetReviewer());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReviewer()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewer, other.reviewer);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetReviewTime(), other.isSetReviewTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReviewTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewTime, other.reviewTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetReviewResult(), other.isSetReviewResult());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReviewResult()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewResult, other.reviewResult);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetReviewDepartment(), other.isSetReviewDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetReviewDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewDepartment, other.reviewDepartment);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("reviewRecord_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("reviewer:");
            if (this.reviewer == null) {
                sb.append("null");
            } else {
                sb.append(this.reviewer);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("reviewTime:");
            if (this.reviewTime == null) {
                sb.append("null");
            } else {
                sb.append(this.reviewTime);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("reviewResult:");
            if (this.reviewResult == null) {
                sb.append("null");
            } else {
                sb.append(this.reviewResult);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("reviewDepartment:");
            if (this.reviewDepartment == null) {
                sb.append("null");
            } else {
                sb.append(this.reviewDepartment);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reviewRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reviewRecord_argsStandardScheme getScheme() {
                return new reviewRecord_argsStandardScheme();
            }
        }

        private static class reviewRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reviewRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reviewRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // REVIEWER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.reviewer = iprot.readString();
                                struct.setReviewerIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // REVIEW_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.reviewTime = iprot.readString();
                                struct.setReviewTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // REVIEW_RESULT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.reviewResult = iprot.readString();
                                struct.setReviewResultIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 5: // REVIEW_DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.reviewDepartment = iprot.readString();
                                struct.setReviewDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reviewRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                if (struct.reviewer != null) {
                    oprot.writeFieldBegin(REVIEWER_FIELD_DESC);
                    oprot.writeString(struct.reviewer);
                    oprot.writeFieldEnd();
                }
                if (struct.reviewTime != null) {
                    oprot.writeFieldBegin(REVIEW_TIME_FIELD_DESC);
                    oprot.writeString(struct.reviewTime);
                    oprot.writeFieldEnd();
                }
                if (struct.reviewResult != null) {
                    oprot.writeFieldBegin(REVIEW_RESULT_FIELD_DESC);
                    oprot.writeString(struct.reviewResult);
                    oprot.writeFieldEnd();
                }
                if (struct.reviewDepartment != null) {
                    oprot.writeFieldBegin(REVIEW_DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.reviewDepartment);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reviewRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reviewRecord_argsTupleScheme getScheme() {
                return new reviewRecord_argsTupleScheme();
            }
        }

        private static class reviewRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reviewRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reviewRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                if (struct.isSetReviewer()) {
                    optionals.set(1);
                }
                if (struct.isSetReviewTime()) {
                    optionals.set(2);
                }
                if (struct.isSetReviewResult()) {
                    optionals.set(3);
                }
                if (struct.isSetReviewDepartment()) {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
                if (struct.isSetReviewer()) {
                    oprot.writeString(struct.reviewer);
                }
                if (struct.isSetReviewTime()) {
                    oprot.writeString(struct.reviewTime);
                }
                if (struct.isSetReviewResult()) {
                    oprot.writeString(struct.reviewResult);
                }
                if (struct.isSetReviewDepartment()) {
                    oprot.writeString(struct.reviewDepartment);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reviewRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.reviewer = iprot.readString();
                    struct.setReviewerIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.reviewTime = iprot.readString();
                    struct.setReviewTimeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.reviewResult = iprot.readString();
                    struct.setReviewResultIsSet(true);
                }
                if (incoming.get(4)) {
                    struct.reviewDepartment = iprot.readString();
                    struct.setReviewDepartmentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class reviewRecord_result implements org.apache.thrift.TBase<reviewRecord_result, reviewRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<reviewRecord_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reviewRecord_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reviewRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reviewRecord_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reviewRecord_result.class, metaDataMap);
        }

        public reviewRecord_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reviewRecord_result(reviewRecord_result other) {
        }

        public reviewRecord_result deepCopy() {
            return new reviewRecord_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof reviewRecord_result)
                return this.equals((reviewRecord_result)that);
            return false;
        }

        public boolean equals(reviewRecord_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(reviewRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("reviewRecord_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class reviewRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reviewRecord_resultStandardScheme getScheme() {
                return new reviewRecord_resultStandardScheme();
            }
        }

        private static class reviewRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reviewRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reviewRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reviewRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reviewRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public reviewRecord_resultTupleScheme getScheme() {
                return new reviewRecord_resultTupleScheme();
            }
        }

        private static class reviewRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reviewRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reviewRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reviewRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class operateRecord_args implements org.apache.thrift.TBase<operateRecord_args, operateRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<operateRecord_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateRecord_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operateRecord_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operateRecord_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String operateTime; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String content; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short)1, "uuid"),
            OPERATE_TIME((short)2, "operateTime"),
            CONTENT((short)3, "content");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // UUID
                        return UUID;
                    case 2: // OPERATE_TIME
                        return OPERATE_TIME;
                    case 3: // CONTENT
                        return CONTENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateRecord_args.class, metaDataMap);
        }

        public operateRecord_args() {
        }

        public operateRecord_args(
                java.lang.String uuid,
                java.lang.String operateTime,
                java.lang.String content)
        {
            this();
            this.uuid = uuid;
            this.operateTime = operateTime;
            this.content = content;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public operateRecord_args(operateRecord_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
            if (other.isSetOperateTime()) {
                this.operateTime = other.operateTime;
            }
            if (other.isSetContent()) {
                this.content = other.content;
            }
        }

        public operateRecord_args deepCopy() {
            return new operateRecord_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
            this.operateTime = null;
            this.content = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUuid() {
            return this.uuid;
        }

        public operateRecord_args setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getOperateTime() {
            return this.operateTime;
        }

        public operateRecord_args setOperateTime(@org.apache.thrift.annotation.Nullable java.lang.String operateTime) {
            this.operateTime = operateTime;
            return this;
        }

        public void unsetOperateTime() {
            this.operateTime = null;
        }

        /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
        public boolean isSetOperateTime() {
            return this.operateTime != null;
        }

        public void setOperateTimeIsSet(boolean value) {
            if (!value) {
                this.operateTime = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getContent() {
            return this.content;
        }

        public operateRecord_args setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
            this.content = content;
            return this;
        }

        public void unsetContent() {
            this.content = null;
        }

        /** Returns true if field content is set (has been assigned a value) and false otherwise */
        public boolean isSetContent() {
            return this.content != null;
        }

        public void setContentIsSet(boolean value) {
            if (!value) {
                this.content = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

                case OPERATE_TIME:
                    if (value == null) {
                        unsetOperateTime();
                    } else {
                        setOperateTime((java.lang.String)value);
                    }
                    break;

                case CONTENT:
                    if (value == null) {
                        unsetContent();
                    } else {
                        setContent((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

                case OPERATE_TIME:
                    return getOperateTime();

                case CONTENT:
                    return getContent();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
                case OPERATE_TIME:
                    return isSetOperateTime();
                case CONTENT:
                    return isSetContent();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof operateRecord_args)
                return this.equals((operateRecord_args)that);
            return false;
        }

        public boolean equals(operateRecord_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            boolean this_present_operateTime = true && this.isSetOperateTime();
            boolean that_present_operateTime = true && that.isSetOperateTime();
            if (this_present_operateTime || that_present_operateTime) {
                if (!(this_present_operateTime && that_present_operateTime))
                    return false;
                if (!this.operateTime.equals(that.operateTime))
                    return false;
            }

            boolean this_present_content = true && this.isSetContent();
            boolean that_present_content = true && that.isSetContent();
            if (this_present_content || that_present_content) {
                if (!(this_present_content && that_present_content))
                    return false;
                if (!this.content.equals(that.content))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            hashCode = hashCode * 8191 + ((isSetOperateTime()) ? 131071 : 524287);
            if (isSetOperateTime())
                hashCode = hashCode * 8191 + operateTime.hashCode();

            hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
            if (isSetContent())
                hashCode = hashCode * 8191 + content.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(operateRecord_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetOperateTime(), other.isSetOperateTime());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOperateTime()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetContent()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("operateRecord_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("operateTime:");
            if (this.operateTime == null) {
                sb.append("null");
            } else {
                sb.append(this.operateTime);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("content:");
            if (this.content == null) {
                sb.append("null");
            } else {
                sb.append(this.content);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class operateRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public operateRecord_argsStandardScheme getScheme() {
                return new operateRecord_argsStandardScheme();
            }
        }

        private static class operateRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<operateRecord_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, operateRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // OPERATE_TIME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.operateTime = iprot.readString();
                                struct.setOperateTimeIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // CONTENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.content = iprot.readString();
                                struct.setContentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, operateRecord_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                if (struct.operateTime != null) {
                    oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
                    oprot.writeString(struct.operateTime);
                    oprot.writeFieldEnd();
                }
                if (struct.content != null) {
                    oprot.writeFieldBegin(CONTENT_FIELD_DESC);
                    oprot.writeString(struct.content);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class operateRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public operateRecord_argsTupleScheme getScheme() {
                return new operateRecord_argsTupleScheme();
            }
        }

        private static class operateRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<operateRecord_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, operateRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                if (struct.isSetOperateTime()) {
                    optionals.set(1);
                }
                if (struct.isSetContent()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
                if (struct.isSetOperateTime()) {
                    oprot.writeString(struct.operateTime);
                }
                if (struct.isSetContent()) {
                    oprot.writeString(struct.content);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, operateRecord_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.operateTime = iprot.readString();
                    struct.setOperateTimeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.content = iprot.readString();
                    struct.setContentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class operateRecord_result implements org.apache.thrift.TBase<operateRecord_result, operateRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<operateRecord_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateRecord_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operateRecord_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operateRecord_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateRecord_result.class, metaDataMap);
        }

        public operateRecord_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public operateRecord_result(operateRecord_result other) {
        }

        public operateRecord_result deepCopy() {
            return new operateRecord_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof operateRecord_result)
                return this.equals((operateRecord_result)that);
            return false;
        }

        public boolean equals(operateRecord_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(operateRecord_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("operateRecord_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class operateRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public operateRecord_resultStandardScheme getScheme() {
                return new operateRecord_resultStandardScheme();
            }
        }

        private static class operateRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<operateRecord_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, operateRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, operateRecord_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class operateRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public operateRecord_resultTupleScheme getScheme() {
                return new operateRecord_resultTupleScheme();
            }
        }

        private static class operateRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<operateRecord_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, operateRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, operateRecord_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class modifyUser_args implements org.apache.thrift.TBase<modifyUser_args, modifyUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUser_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUser_args");

        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
        private static final org.apache.thrift.protocol.TField USER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("userAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
        private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUser_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUser_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userName; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String userAddress; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String role; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPARTMENT((short)1, "department"),
            USER_NAME((short)2, "userName"),
            USER_ADDRESS((short)3, "userAddress"),
            ROLE((short)4, "role");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DEPARTMENT
                        return DEPARTMENT;
                    case 2: // USER_NAME
                        return USER_NAME;
                    case 3: // USER_ADDRESS
                        return USER_ADDRESS;
                    case 4: // ROLE
                        return ROLE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("userAddress", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUser_args.class, metaDataMap);
        }

        public modifyUser_args() {
        }

        public modifyUser_args(
                java.lang.String department,
                java.lang.String userName,
                java.lang.String userAddress,
                java.lang.String role)
        {
            this();
            this.department = department;
            this.userName = userName;
            this.userAddress = userAddress;
            this.role = role;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public modifyUser_args(modifyUser_args other) {
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
            if (other.isSetUserName()) {
                this.userName = other.userName;
            }
            if (other.isSetUserAddress()) {
                this.userAddress = other.userAddress;
            }
            if (other.isSetRole()) {
                this.role = other.role;
            }
        }

        public modifyUser_args deepCopy() {
            return new modifyUser_args(this);
        }

        @Override
        public void clear() {
            this.department = null;
            this.userName = null;
            this.userAddress = null;
            this.role = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public modifyUser_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserName() {
            return this.userName;
        }

        public modifyUser_args setUserName(@org.apache.thrift.annotation.Nullable java.lang.String userName) {
            this.userName = userName;
            return this;
        }

        public void unsetUserName() {
            this.userName = null;
        }

        /** Returns true if field userName is set (has been assigned a value) and false otherwise */
        public boolean isSetUserName() {
            return this.userName != null;
        }

        public void setUserNameIsSet(boolean value) {
            if (!value) {
                this.userName = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUserAddress() {
            return this.userAddress;
        }

        public modifyUser_args setUserAddress(@org.apache.thrift.annotation.Nullable java.lang.String userAddress) {
            this.userAddress = userAddress;
            return this;
        }

        public void unsetUserAddress() {
            this.userAddress = null;
        }

        /** Returns true if field userAddress is set (has been assigned a value) and false otherwise */
        public boolean isSetUserAddress() {
            return this.userAddress != null;
        }

        public void setUserAddressIsSet(boolean value) {
            if (!value) {
                this.userAddress = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getRole() {
            return this.role;
        }

        public modifyUser_args setRole(@org.apache.thrift.annotation.Nullable java.lang.String role) {
            this.role = role;
            return this;
        }

        public void unsetRole() {
            this.role = null;
        }

        /** Returns true if field role is set (has been assigned a value) and false otherwise */
        public boolean isSetRole() {
            return this.role != null;
        }

        public void setRoleIsSet(boolean value) {
            if (!value) {
                this.role = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

                case USER_NAME:
                    if (value == null) {
                        unsetUserName();
                    } else {
                        setUserName((java.lang.String)value);
                    }
                    break;

                case USER_ADDRESS:
                    if (value == null) {
                        unsetUserAddress();
                    } else {
                        setUserAddress((java.lang.String)value);
                    }
                    break;

                case ROLE:
                    if (value == null) {
                        unsetRole();
                    } else {
                        setRole((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPARTMENT:
                    return getDepartment();

                case USER_NAME:
                    return getUserName();

                case USER_ADDRESS:
                    return getUserAddress();

                case ROLE:
                    return getRole();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DEPARTMENT:
                    return isSetDepartment();
                case USER_NAME:
                    return isSetUserName();
                case USER_ADDRESS:
                    return isSetUserAddress();
                case ROLE:
                    return isSetRole();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof modifyUser_args)
                return this.equals((modifyUser_args)that);
            return false;
        }

        public boolean equals(modifyUser_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            boolean this_present_userName = true && this.isSetUserName();
            boolean that_present_userName = true && that.isSetUserName();
            if (this_present_userName || that_present_userName) {
                if (!(this_present_userName && that_present_userName))
                    return false;
                if (!this.userName.equals(that.userName))
                    return false;
            }

            boolean this_present_userAddress = true && this.isSetUserAddress();
            boolean that_present_userAddress = true && that.isSetUserAddress();
            if (this_present_userAddress || that_present_userAddress) {
                if (!(this_present_userAddress && that_present_userAddress))
                    return false;
                if (!this.userAddress.equals(that.userAddress))
                    return false;
            }

            boolean this_present_role = true && this.isSetRole();
            boolean that_present_role = true && that.isSetRole();
            if (this_present_role || that_present_role) {
                if (!(this_present_role && that_present_role))
                    return false;
                if (!this.role.equals(that.role))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
            if (isSetUserName())
                hashCode = hashCode * 8191 + userName.hashCode();

            hashCode = hashCode * 8191 + ((isSetUserAddress()) ? 131071 : 524287);
            if (isSetUserAddress())
                hashCode = hashCode * 8191 + userAddress.hashCode();

            hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
            if (isSetRole())
                hashCode = hashCode * 8191 + role.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(modifyUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserName(), other.isSetUserName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUserAddress(), other.isSetUserAddress());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUserAddress()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAddress, other.userAddress);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetRole(), other.isSetRole());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRole()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyUser_args(");
            boolean first = true;

            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userName:");
            if (this.userName == null) {
                sb.append("null");
            } else {
                sb.append(this.userName);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("userAddress:");
            if (this.userAddress == null) {
                sb.append("null");
            } else {
                sb.append(this.userAddress);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("role:");
            if (this.role == null) {
                sb.append("null");
            } else {
                sb.append(this.role);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class modifyUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUser_argsStandardScheme getScheme() {
                return new modifyUser_argsStandardScheme();
            }
        }

        private static class modifyUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userName = iprot.readString();
                                struct.setUserNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // USER_ADDRESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.userAddress = iprot.readString();
                                struct.setUserAddressIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // ROLE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.role = iprot.readString();
                                struct.setRoleIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                if (struct.userName != null) {
                    oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
                    oprot.writeString(struct.userName);
                    oprot.writeFieldEnd();
                }
                if (struct.userAddress != null) {
                    oprot.writeFieldBegin(USER_ADDRESS_FIELD_DESC);
                    oprot.writeString(struct.userAddress);
                    oprot.writeFieldEnd();
                }
                if (struct.role != null) {
                    oprot.writeFieldBegin(ROLE_FIELD_DESC);
                    oprot.writeString(struct.role);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class modifyUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUser_argsTupleScheme getScheme() {
                return new modifyUser_argsTupleScheme();
            }
        }

        private static class modifyUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, modifyUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepartment()) {
                    optionals.set(0);
                }
                if (struct.isSetUserName()) {
                    optionals.set(1);
                }
                if (struct.isSetUserAddress()) {
                    optionals.set(2);
                }
                if (struct.isSetRole()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
                if (struct.isSetUserName()) {
                    oprot.writeString(struct.userName);
                }
                if (struct.isSetUserAddress()) {
                    oprot.writeString(struct.userAddress);
                }
                if (struct.isSetRole()) {
                    oprot.writeString(struct.role);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, modifyUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.userName = iprot.readString();
                    struct.setUserNameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.userAddress = iprot.readString();
                    struct.setUserAddressIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.role = iprot.readString();
                    struct.setRoleIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class modifyUser_result implements org.apache.thrift.TBase<modifyUser_result, modifyUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUser_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUser_result");


        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUser_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUser_resultTupleSchemeFactory();


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUser_result.class, metaDataMap);
        }

        public modifyUser_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public modifyUser_result(modifyUser_result other) {
        }

        public modifyUser_result deepCopy() {
            return new modifyUser_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof modifyUser_result)
                return this.equals((modifyUser_result)that);
            return false;
        }

        public boolean equals(modifyUser_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            return hashCode;
        }

        @Override
        public int compareTo(modifyUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyUser_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class modifyUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUser_resultStandardScheme getScheme() {
                return new modifyUser_resultStandardScheme();
            }
        }

        private static class modifyUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class modifyUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public modifyUser_resultTupleScheme getScheme() {
                return new modifyUser_resultTupleScheme();
            }
        }

        private static class modifyUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, modifyUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, modifyUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordByObject_args implements org.apache.thrift.TBase<queryDataRecordByObject_args, queryDataRecordByObject_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordByObject_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordByObject_args");

        private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordByObject_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordByObject_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String object; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OBJECT((short)1, "object");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // OBJECT
                        return OBJECT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordByObject_args.class, metaDataMap);
        }

        public queryDataRecordByObject_args() {
        }

        public queryDataRecordByObject_args(
                java.lang.String object)
        {
            this();
            this.object = object;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordByObject_args(queryDataRecordByObject_args other) {
            if (other.isSetObject()) {
                this.object = other.object;
            }
        }

        public queryDataRecordByObject_args deepCopy() {
            return new queryDataRecordByObject_args(this);
        }

        @Override
        public void clear() {
            this.object = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getObject() {
            return this.object;
        }

        public queryDataRecordByObject_args setObject(@org.apache.thrift.annotation.Nullable java.lang.String object) {
            this.object = object;
            return this;
        }

        public void unsetObject() {
            this.object = null;
        }

        /** Returns true if field object is set (has been assigned a value) and false otherwise */
        public boolean isSetObject() {
            return this.object != null;
        }

        public void setObjectIsSet(boolean value) {
            if (!value) {
                this.object = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case OBJECT:
                    if (value == null) {
                        unsetObject();
                    } else {
                        setObject((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case OBJECT:
                    return getObject();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case OBJECT:
                    return isSetObject();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordByObject_args)
                return this.equals((queryDataRecordByObject_args)that);
            return false;
        }

        public boolean equals(queryDataRecordByObject_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_object = true && this.isSetObject();
            boolean that_present_object = true && that.isSetObject();
            if (this_present_object || that_present_object) {
                if (!(this_present_object && that_present_object))
                    return false;
                if (!this.object.equals(that.object))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
            if (isSetObject())
                hashCode = hashCode * 8191 + object.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordByObject_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetObject(), other.isSetObject());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetObject()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordByObject_args(");
            boolean first = true;

            sb.append("object:");
            if (this.object == null) {
                sb.append("null");
            } else {
                sb.append(this.object);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordByObject_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByObject_argsStandardScheme getScheme() {
                return new queryDataRecordByObject_argsStandardScheme();
            }
        }

        private static class queryDataRecordByObject_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordByObject_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordByObject_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OBJECT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.object = iprot.readString();
                                struct.setObjectIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordByObject_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.object != null) {
                    oprot.writeFieldBegin(OBJECT_FIELD_DESC);
                    oprot.writeString(struct.object);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordByObject_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByObject_argsTupleScheme getScheme() {
                return new queryDataRecordByObject_argsTupleScheme();
            }
        }

        private static class queryDataRecordByObject_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordByObject_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByObject_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetObject()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetObject()) {
                    oprot.writeString(struct.object);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByObject_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.object = iprot.readString();
                    struct.setObjectIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordByObject_result implements org.apache.thrift.TBase<queryDataRecordByObject_result, queryDataRecordByObject_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordByObject_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordByObject_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordByObject_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordByObject_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordByObject_result.class, metaDataMap);
        }

        public queryDataRecordByObject_result() {
        }

        public queryDataRecordByObject_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordByObject_result(queryDataRecordByObject_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryDataRecordByObject_result deepCopy() {
            return new queryDataRecordByObject_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryDataRecordByObject_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordByObject_result)
                return this.equals((queryDataRecordByObject_result)that);
            return false;
        }

        public boolean equals(queryDataRecordByObject_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordByObject_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordByObject_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordByObject_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByObject_resultStandardScheme getScheme() {
                return new queryDataRecordByObject_resultStandardScheme();
            }
        }

        private static class queryDataRecordByObject_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordByObject_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordByObject_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordByObject_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordByObject_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByObject_resultTupleScheme getScheme() {
                return new queryDataRecordByObject_resultTupleScheme();
            }
        }

        private static class queryDataRecordByObject_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordByObject_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByObject_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByObject_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordByUser_args implements org.apache.thrift.TBase<queryDataRecordByUser_args, queryDataRecordByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordByUser_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordByUser_args");

        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordByUser_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordByUser_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required
        public @org.apache.thrift.annotation.Nullable java.lang.String user; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPARTMENT((short)1, "department"),
            USER((short)2, "user");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DEPARTMENT
                        return DEPARTMENT;
                    case 2: // USER
                        return USER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordByUser_args.class, metaDataMap);
        }

        public queryDataRecordByUser_args() {
        }

        public queryDataRecordByUser_args(
                java.lang.String department,
                java.lang.String user)
        {
            this();
            this.department = department;
            this.user = user;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordByUser_args(queryDataRecordByUser_args other) {
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
            if (other.isSetUser()) {
                this.user = other.user;
            }
        }

        public queryDataRecordByUser_args deepCopy() {
            return new queryDataRecordByUser_args(this);
        }

        @Override
        public void clear() {
            this.department = null;
            this.user = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public queryDataRecordByUser_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUser() {
            return this.user;
        }

        public queryDataRecordByUser_args setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
            this.user = user;
            return this;
        }

        public void unsetUser() {
            this.user = null;
        }

        /** Returns true if field user is set (has been assigned a value) and false otherwise */
        public boolean isSetUser() {
            return this.user != null;
        }

        public void setUserIsSet(boolean value) {
            if (!value) {
                this.user = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

                case USER:
                    if (value == null) {
                        unsetUser();
                    } else {
                        setUser((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPARTMENT:
                    return getDepartment();

                case USER:
                    return getUser();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DEPARTMENT:
                    return isSetDepartment();
                case USER:
                    return isSetUser();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordByUser_args)
                return this.equals((queryDataRecordByUser_args)that);
            return false;
        }

        public boolean equals(queryDataRecordByUser_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            boolean this_present_user = true && this.isSetUser();
            boolean that_present_user = true && that.isSetUser();
            if (this_present_user || that_present_user) {
                if (!(this_present_user && that_present_user))
                    return false;
                if (!this.user.equals(that.user))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
            if (isSetUser())
                hashCode = hashCode * 8191 + user.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordByUser_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUser()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordByUser_args(");
            boolean first = true;

            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("user:");
            if (this.user == null) {
                sb.append("null");
            } else {
                sb.append(this.user);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordByUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByUser_argsStandardScheme getScheme() {
                return new queryDataRecordByUser_argsStandardScheme();
            }
        }

        private static class queryDataRecordByUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordByUser_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordByUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // USER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.user = iprot.readString();
                                struct.setUserIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordByUser_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                if (struct.user != null) {
                    oprot.writeFieldBegin(USER_FIELD_DESC);
                    oprot.writeString(struct.user);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordByUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByUser_argsTupleScheme getScheme() {
                return new queryDataRecordByUser_argsTupleScheme();
            }
        }

        private static class queryDataRecordByUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordByUser_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepartment()) {
                    optionals.set(0);
                }
                if (struct.isSetUser()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
                if (struct.isSetUser()) {
                    oprot.writeString(struct.user);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByUser_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.user = iprot.readString();
                    struct.setUserIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordByUser_result implements org.apache.thrift.TBase<queryDataRecordByUser_result, queryDataRecordByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordByUser_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordByUser_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordByUser_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordByUser_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordByUser_result.class, metaDataMap);
        }

        public queryDataRecordByUser_result() {
        }

        public queryDataRecordByUser_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordByUser_result(queryDataRecordByUser_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryDataRecordByUser_result deepCopy() {
            return new queryDataRecordByUser_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryDataRecordByUser_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordByUser_result)
                return this.equals((queryDataRecordByUser_result)that);
            return false;
        }

        public boolean equals(queryDataRecordByUser_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordByUser_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordByUser_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordByUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByUser_resultStandardScheme getScheme() {
                return new queryDataRecordByUser_resultStandardScheme();
            }
        }

        private static class queryDataRecordByUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordByUser_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordByUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordByUser_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordByUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordByUser_resultTupleScheme getScheme() {
                return new queryDataRecordByUser_resultTupleScheme();
            }
        }

        private static class queryDataRecordByUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordByUser_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordByUser_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryWithQueryString_args implements org.apache.thrift.TBase<queryWithQueryString_args, queryWithQueryString_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryWithQueryString_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryWithQueryString_args");

        private static final org.apache.thrift.protocol.TField QUERY_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("queryString", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryWithQueryString_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryWithQueryString_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String queryString; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            QUERY_STRING((short)1, "queryString");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // QUERY_STRING
                        return QUERY_STRING;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.QUERY_STRING, new org.apache.thrift.meta_data.FieldMetaData("queryString", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryWithQueryString_args.class, metaDataMap);
        }

        public queryWithQueryString_args() {
        }

        public queryWithQueryString_args(
                java.lang.String queryString)
        {
            this();
            this.queryString = queryString;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryWithQueryString_args(queryWithQueryString_args other) {
            if (other.isSetQueryString()) {
                this.queryString = other.queryString;
            }
        }

        public queryWithQueryString_args deepCopy() {
            return new queryWithQueryString_args(this);
        }

        @Override
        public void clear() {
            this.queryString = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getQueryString() {
            return this.queryString;
        }

        public queryWithQueryString_args setQueryString(@org.apache.thrift.annotation.Nullable java.lang.String queryString) {
            this.queryString = queryString;
            return this;
        }

        public void unsetQueryString() {
            this.queryString = null;
        }

        /** Returns true if field queryString is set (has been assigned a value) and false otherwise */
        public boolean isSetQueryString() {
            return this.queryString != null;
        }

        public void setQueryStringIsSet(boolean value) {
            if (!value) {
                this.queryString = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case QUERY_STRING:
                    if (value == null) {
                        unsetQueryString();
                    } else {
                        setQueryString((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case QUERY_STRING:
                    return getQueryString();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case QUERY_STRING:
                    return isSetQueryString();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryWithQueryString_args)
                return this.equals((queryWithQueryString_args)that);
            return false;
        }

        public boolean equals(queryWithQueryString_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_queryString = true && this.isSetQueryString();
            boolean that_present_queryString = true && that.isSetQueryString();
            if (this_present_queryString || that_present_queryString) {
                if (!(this_present_queryString && that_present_queryString))
                    return false;
                if (!this.queryString.equals(that.queryString))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetQueryString()) ? 131071 : 524287);
            if (isSetQueryString())
                hashCode = hashCode * 8191 + queryString.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryWithQueryString_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetQueryString(), other.isSetQueryString());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQueryString()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryString, other.queryString);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryWithQueryString_args(");
            boolean first = true;

            sb.append("queryString:");
            if (this.queryString == null) {
                sb.append("null");
            } else {
                sb.append(this.queryString);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryWithQueryString_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithQueryString_argsStandardScheme getScheme() {
                return new queryWithQueryString_argsStandardScheme();
            }
        }

        private static class queryWithQueryString_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryWithQueryString_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryWithQueryString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // QUERY_STRING
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.queryString = iprot.readString();
                                struct.setQueryStringIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryWithQueryString_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.queryString != null) {
                    oprot.writeFieldBegin(QUERY_STRING_FIELD_DESC);
                    oprot.writeString(struct.queryString);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryWithQueryString_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithQueryString_argsTupleScheme getScheme() {
                return new queryWithQueryString_argsTupleScheme();
            }
        }

        private static class queryWithQueryString_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryWithQueryString_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryWithQueryString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetQueryString()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetQueryString()) {
                    oprot.writeString(struct.queryString);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryWithQueryString_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.queryString = iprot.readString();
                    struct.setQueryStringIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryWithQueryString_result implements org.apache.thrift.TBase<queryWithQueryString_result, queryWithQueryString_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryWithQueryString_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryWithQueryString_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryWithQueryString_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryWithQueryString_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryWithQueryString_result.class, metaDataMap);
        }

        public queryWithQueryString_result() {
        }

        public queryWithQueryString_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryWithQueryString_result(queryWithQueryString_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryWithQueryString_result deepCopy() {
            return new queryWithQueryString_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryWithQueryString_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryWithQueryString_result)
                return this.equals((queryWithQueryString_result)that);
            return false;
        }

        public boolean equals(queryWithQueryString_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryWithQueryString_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryWithQueryString_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryWithQueryString_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithQueryString_resultStandardScheme getScheme() {
                return new queryWithQueryString_resultStandardScheme();
            }
        }

        private static class queryWithQueryString_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryWithQueryString_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryWithQueryString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryWithQueryString_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryWithQueryString_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryWithQueryString_resultTupleScheme getScheme() {
                return new queryWithQueryString_resultTupleScheme();
            }
        }

        private static class queryWithQueryString_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryWithQueryString_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryWithQueryString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryWithQueryString_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordById_args implements org.apache.thrift.TBase<queryDataRecordById_args, queryDataRecordById_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordById_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordById_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordById_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordById_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short)1, "uuid");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // UUID
                        return UUID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordById_args.class, metaDataMap);
        }

        public queryDataRecordById_args() {
        }

        public queryDataRecordById_args(
                java.lang.String uuid)
        {
            this();
            this.uuid = uuid;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordById_args(queryDataRecordById_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
        }

        public queryDataRecordById_args deepCopy() {
            return new queryDataRecordById_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getUuid() {
            return this.uuid;
        }

        public queryDataRecordById_args setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordById_args)
                return this.equals((queryDataRecordById_args)that);
            return false;
        }

        public boolean equals(queryDataRecordById_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
            if (isSetUuid())
                hashCode = hashCode * 8191 + uuid.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordById_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetUuid(), other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordById_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordById_argsStandardScheme getScheme() {
                return new queryDataRecordById_argsStandardScheme();
            }
        }

        private static class queryDataRecordById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordById_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordById_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordById_argsTupleScheme getScheme() {
                return new queryDataRecordById_argsTupleScheme();
            }
        }

        private static class queryDataRecordById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordById_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordById_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryDataRecordById_result implements org.apache.thrift.TBase<queryDataRecordById_result, queryDataRecordById_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDataRecordById_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDataRecordById_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryDataRecordById_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryDataRecordById_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDataRecordById_result.class, metaDataMap);
        }

        public queryDataRecordById_result() {
        }

        public queryDataRecordById_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryDataRecordById_result(queryDataRecordById_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryDataRecordById_result deepCopy() {
            return new queryDataRecordById_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryDataRecordById_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryDataRecordById_result)
                return this.equals((queryDataRecordById_result)that);
            return false;
        }

        public boolean equals(queryDataRecordById_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryDataRecordById_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryDataRecordById_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryDataRecordById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordById_resultStandardScheme getScheme() {
                return new queryDataRecordById_resultStandardScheme();
            }
        }

        private static class queryDataRecordById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryDataRecordById_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryDataRecordById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryDataRecordById_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryDataRecordById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryDataRecordById_resultTupleScheme getScheme() {
                return new queryDataRecordById_resultTupleScheme();
            }
        }

        private static class queryDataRecordById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryDataRecordById_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryDataRecordById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryDataRecordById_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserRecordByDept_args implements org.apache.thrift.TBase<queryUserRecordByDept_args, queryUserRecordByDept_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserRecordByDept_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserRecordByDept_args");

        private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserRecordByDept_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserRecordByDept_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String department; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            DEPARTMENT((short)1, "department");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // DEPARTMENT
                        return DEPARTMENT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserRecordByDept_args.class, metaDataMap);
        }

        public queryUserRecordByDept_args() {
        }

        public queryUserRecordByDept_args(
                java.lang.String department)
        {
            this();
            this.department = department;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserRecordByDept_args(queryUserRecordByDept_args other) {
            if (other.isSetDepartment()) {
                this.department = other.department;
            }
        }

        public queryUserRecordByDept_args deepCopy() {
            return new queryUserRecordByDept_args(this);
        }

        @Override
        public void clear() {
            this.department = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getDepartment() {
            return this.department;
        }

        public queryUserRecordByDept_args setDepartment(@org.apache.thrift.annotation.Nullable java.lang.String department) {
            this.department = department;
            return this;
        }

        public void unsetDepartment() {
            this.department = null;
        }

        /** Returns true if field department is set (has been assigned a value) and false otherwise */
        public boolean isSetDepartment() {
            return this.department != null;
        }

        public void setDepartmentIsSet(boolean value) {
            if (!value) {
                this.department = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case DEPARTMENT:
                    if (value == null) {
                        unsetDepartment();
                    } else {
                        setDepartment((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case DEPARTMENT:
                    return getDepartment();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case DEPARTMENT:
                    return isSetDepartment();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryUserRecordByDept_args)
                return this.equals((queryUserRecordByDept_args)that);
            return false;
        }

        public boolean equals(queryUserRecordByDept_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_department = true && this.isSetDepartment();
            boolean that_present_department = true && that.isSetDepartment();
            if (this_present_department || that_present_department) {
                if (!(this_present_department && that_present_department))
                    return false;
                if (!this.department.equals(that.department))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
            if (isSetDepartment())
                hashCode = hashCode * 8191 + department.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserRecordByDept_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetDepartment(), other.isSetDepartment());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDepartment()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserRecordByDept_args(");
            boolean first = true;

            sb.append("department:");
            if (this.department == null) {
                sb.append("null");
            } else {
                sb.append(this.department);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserRecordByDept_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByDept_argsStandardScheme getScheme() {
                return new queryUserRecordByDept_argsStandardScheme();
            }
        }

        private static class queryUserRecordByDept_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserRecordByDept_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserRecordByDept_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DEPARTMENT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.department = iprot.readString();
                                struct.setDepartmentIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserRecordByDept_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.department != null) {
                    oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
                    oprot.writeString(struct.department);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserRecordByDept_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByDept_argsTupleScheme getScheme() {
                return new queryUserRecordByDept_argsTupleScheme();
            }
        }

        private static class queryUserRecordByDept_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserRecordByDept_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByDept_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetDepartment()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDepartment()) {
                    oprot.writeString(struct.department);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByDept_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.department = iprot.readString();
                    struct.setDepartmentIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserRecordByDept_result implements org.apache.thrift.TBase<queryUserRecordByDept_result, queryUserRecordByDept_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserRecordByDept_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserRecordByDept_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserRecordByDept_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserRecordByDept_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserRecordByDept_result.class, metaDataMap);
        }

        public queryUserRecordByDept_result() {
        }

        public queryUserRecordByDept_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserRecordByDept_result(queryUserRecordByDept_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryUserRecordByDept_result deepCopy() {
            return new queryUserRecordByDept_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryUserRecordByDept_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryUserRecordByDept_result)
                return this.equals((queryUserRecordByDept_result)that);
            return false;
        }

        public boolean equals(queryUserRecordByDept_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserRecordByDept_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserRecordByDept_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserRecordByDept_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByDept_resultStandardScheme getScheme() {
                return new queryUserRecordByDept_resultStandardScheme();
            }
        }

        private static class queryUserRecordByDept_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserRecordByDept_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserRecordByDept_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserRecordByDept_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserRecordByDept_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByDept_resultTupleScheme getScheme() {
                return new queryUserRecordByDept_resultTupleScheme();
            }
        }

        private static class queryUserRecordByDept_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserRecordByDept_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByDept_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByDept_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserRecordByAddr_args implements org.apache.thrift.TBase<queryUserRecordByAddr_args, queryUserRecordByAddr_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserRecordByAddr_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserRecordByAddr_args");

        private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)1);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserRecordByAddr_argsStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserRecordByAddr_argsTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String address; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ADDRESS((short)1, "address");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // ADDRESS
                        return ADDRESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserRecordByAddr_args.class, metaDataMap);
        }

        public queryUserRecordByAddr_args() {
        }

        public queryUserRecordByAddr_args(
                java.lang.String address)
        {
            this();
            this.address = address;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserRecordByAddr_args(queryUserRecordByAddr_args other) {
            if (other.isSetAddress()) {
                this.address = other.address;
            }
        }

        public queryUserRecordByAddr_args deepCopy() {
            return new queryUserRecordByAddr_args(this);
        }

        @Override
        public void clear() {
            this.address = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getAddress() {
            return this.address;
        }

        public queryUserRecordByAddr_args setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
            this.address = address;
            return this;
        }

        public void unsetAddress() {
            this.address = null;
        }

        /** Returns true if field address is set (has been assigned a value) and false otherwise */
        public boolean isSetAddress() {
            return this.address != null;
        }

        public void setAddressIsSet(boolean value) {
            if (!value) {
                this.address = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case ADDRESS:
                    if (value == null) {
                        unsetAddress();
                    } else {
                        setAddress((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case ADDRESS:
                    return getAddress();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case ADDRESS:
                    return isSetAddress();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryUserRecordByAddr_args)
                return this.equals((queryUserRecordByAddr_args)that);
            return false;
        }

        public boolean equals(queryUserRecordByAddr_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_address = true && this.isSetAddress();
            boolean that_present_address = true && that.isSetAddress();
            if (this_present_address || that_present_address) {
                if (!(this_present_address && that_present_address))
                    return false;
                if (!this.address.equals(that.address))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
            if (isSetAddress())
                hashCode = hashCode * 8191 + address.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserRecordByAddr_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetAddress(), other.isSetAddress());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAddress()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserRecordByAddr_args(");
            boolean first = true;

            sb.append("address:");
            if (this.address == null) {
                sb.append("null");
            } else {
                sb.append(this.address);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserRecordByAddr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByAddr_argsStandardScheme getScheme() {
                return new queryUserRecordByAddr_argsStandardScheme();
            }
        }

        private static class queryUserRecordByAddr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserRecordByAddr_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserRecordByAddr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // ADDRESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.address = iprot.readString();
                                struct.setAddressIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserRecordByAddr_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.address != null) {
                    oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
                    oprot.writeString(struct.address);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserRecordByAddr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByAddr_argsTupleScheme getScheme() {
                return new queryUserRecordByAddr_argsTupleScheme();
            }
        }

        private static class queryUserRecordByAddr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserRecordByAddr_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByAddr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetAddress()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetAddress()) {
                    oprot.writeString(struct.address);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByAddr_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.address = iprot.readString();
                    struct.setAddressIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class queryUserRecordByAddr_result implements org.apache.thrift.TBase<queryUserRecordByAddr_result, queryUserRecordByAddr_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUserRecordByAddr_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUserRecordByAddr_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

        private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUserRecordByAddr_resultStandardSchemeFactory();
        private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUserRecordByAddr_resultTupleSchemeFactory();

        public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @org.apache.thrift.annotation.Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final java.lang.String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public java.lang.String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUserRecordByAddr_result.class, metaDataMap);
        }

        public queryUserRecordByAddr_result() {
        }

        public queryUserRecordByAddr_result(
                java.lang.String success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public queryUserRecordByAddr_result(queryUserRecordByAddr_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public queryUserRecordByAddr_result deepCopy() {
            return new queryUserRecordByAddr_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.String getSuccess() {
            return this.success;
        }

        public queryUserRecordByAddr_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((java.lang.String)value);
                    }
                    break;

            }
        }

        @org.apache.thrift.annotation.Nullable
        public java.lang.Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new java.lang.IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new java.lang.IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new java.lang.IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that instanceof queryUserRecordByAddr_result)
                return this.equals((queryUserRecordByAddr_result)that);
            return false;
        }

        public boolean equals(queryUserRecordByAddr_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(queryUserRecordByAddr_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @org.apache.thrift.annotation.Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public java.lang.String toString() {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUserRecordByAddr_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class queryUserRecordByAddr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByAddr_resultStandardScheme getScheme() {
                return new queryUserRecordByAddr_resultStandardScheme();
            }
        }

        private static class queryUserRecordByAddr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUserRecordByAddr_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, queryUserRecordByAddr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, queryUserRecordByAddr_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class queryUserRecordByAddr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
            public queryUserRecordByAddr_resultTupleScheme getScheme() {
                return new queryUserRecordByAddr_resultTupleScheme();
            }
        }

        private static class queryUserRecordByAddr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUserRecordByAddr_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByAddr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet optionals = new java.util.BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryUserRecordByAddr_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                java.util.BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

        private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
            return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
