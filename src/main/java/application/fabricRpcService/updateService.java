/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package application.fabricRpcService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-29")
public class updateService {

  public interface Iface {

    public void initOpinionRecord(String uuid, String department, String userName, String object, String type, String opinionTime, String token) throws org.apache.thrift.TException;

    public void initDirectRecord(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token) throws org.apache.thrift.TException;

    public void initUserRecord(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException;

    public void reviewRecord(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token) throws org.apache.thrift.TException;

    public void operateRecord(String uuid, String operateTime, String content, String token) throws org.apache.thrift.TException;

    public void modifyUser(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void initOpinionRecord(String uuid, String department, String userName, String object, String type, String opinionTime, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void initDirectRecord(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void initUserRecord(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void reviewRecord(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void operateRecord(String uuid, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void modifyUser(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void initOpinionRecord(String uuid, String department, String userName, String object, String type, String opinionTime, String token) throws org.apache.thrift.TException
    {
      send_initOpinionRecord(uuid, department, userName, object, type, opinionTime, token);
      recv_initOpinionRecord();
    }

    public void send_initOpinionRecord(String uuid, String department, String userName, String object, String type, String opinionTime, String token) throws org.apache.thrift.TException
    {
      initOpinionRecord_args args = new initOpinionRecord_args();
      args.setUuid(uuid);
      args.setDepartment(department);
      args.setUserName(userName);
      args.setObject(object);
      args.setType(type);
      args.setOpinionTime(opinionTime);
      args.setToken(token);
      sendBase("initOpinionRecord", args);
    }

    public void recv_initOpinionRecord() throws org.apache.thrift.TException
    {
      initOpinionRecord_result result = new initOpinionRecord_result();
      receiveBase(result, "initOpinionRecord");
      return;
    }

    public void initDirectRecord(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token) throws org.apache.thrift.TException
    {
      send_initDirectRecord(uuid, department, userName, object, type, operateTime, content, token);
      recv_initDirectRecord();
    }

    public void send_initDirectRecord(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token) throws org.apache.thrift.TException
    {
      initDirectRecord_args args = new initDirectRecord_args();
      args.setUuid(uuid);
      args.setDepartment(department);
      args.setUserName(userName);
      args.setObject(object);
      args.setType(type);
      args.setOperateTime(operateTime);
      args.setContent(content);
      args.setToken(token);
      sendBase("initDirectRecord", args);
    }

    public void recv_initDirectRecord() throws org.apache.thrift.TException
    {
      initDirectRecord_result result = new initDirectRecord_result();
      receiveBase(result, "initDirectRecord");
      return;
    }

    public void initUserRecord(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException
    {
      send_initUserRecord(department, userName, userAddress, role, token);
      recv_initUserRecord();
    }

    public void send_initUserRecord(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException
    {
      initUserRecord_args args = new initUserRecord_args();
      args.setDepartment(department);
      args.setUserName(userName);
      args.setUserAddress(userAddress);
      args.setRole(role);
      args.setToken(token);
      sendBase("initUserRecord", args);
    }

    public void recv_initUserRecord() throws org.apache.thrift.TException
    {
      initUserRecord_result result = new initUserRecord_result();
      receiveBase(result, "initUserRecord");
      return;
    }

    public void reviewRecord(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token) throws org.apache.thrift.TException
    {
      send_reviewRecord(uuid, reviewer, reviewTime, reviewResult, reviewDepartment, token);
      recv_reviewRecord();
    }

    public void send_reviewRecord(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token) throws org.apache.thrift.TException
    {
      reviewRecord_args args = new reviewRecord_args();
      args.setUuid(uuid);
      args.setReviewer(reviewer);
      args.setReviewTime(reviewTime);
      args.setReviewResult(reviewResult);
      args.setReviewDepartment(reviewDepartment);
      args.setToken(token);
      sendBase("reviewRecord", args);
    }

    public void recv_reviewRecord() throws org.apache.thrift.TException
    {
      reviewRecord_result result = new reviewRecord_result();
      receiveBase(result, "reviewRecord");
      return;
    }

    public void operateRecord(String uuid, String operateTime, String content, String token) throws org.apache.thrift.TException
    {
      send_operateRecord(uuid, operateTime, content, token);
      recv_operateRecord();
    }

    public void send_operateRecord(String uuid, String operateTime, String content, String token) throws org.apache.thrift.TException
    {
      operateRecord_args args = new operateRecord_args();
      args.setUuid(uuid);
      args.setOperateTime(operateTime);
      args.setContent(content);
      args.setToken(token);
      sendBase("operateRecord", args);
    }

    public void recv_operateRecord() throws org.apache.thrift.TException
    {
      operateRecord_result result = new operateRecord_result();
      receiveBase(result, "operateRecord");
      return;
    }

    public void modifyUser(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException
    {
      send_modifyUser(department, userName, userAddress, role, token);
      recv_modifyUser();
    }

    public void send_modifyUser(String department, String userName, String userAddress, String role, String token) throws org.apache.thrift.TException
    {
      modifyUser_args args = new modifyUser_args();
      args.setDepartment(department);
      args.setUserName(userName);
      args.setUserAddress(userAddress);
      args.setRole(role);
      args.setToken(token);
      sendBase("modifyUser", args);
    }

    public void recv_modifyUser() throws org.apache.thrift.TException
    {
      modifyUser_result result = new modifyUser_result();
      receiveBase(result, "modifyUser");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void initOpinionRecord(String uuid, String department, String userName, String object, String type, String opinionTime, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initOpinionRecord_call method_call = new initOpinionRecord_call(uuid, department, userName, object, type, opinionTime, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initOpinionRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String uuid;
      private String department;
      private String userName;
      private String object;
      private String type;
      private String opinionTime;
      private String token;
      public initOpinionRecord_call(String uuid, String department, String userName, String object, String type, String opinionTime, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.department = department;
        this.userName = userName;
        this.object = object;
        this.type = type;
        this.opinionTime = opinionTime;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initOpinionRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initOpinionRecord_args args = new initOpinionRecord_args();
        args.setUuid(uuid);
        args.setDepartment(department);
        args.setUserName(userName);
        args.setObject(object);
        args.setType(type);
        args.setOpinionTime(opinionTime);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void initDirectRecord(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initDirectRecord_call method_call = new initDirectRecord_call(uuid, department, userName, object, type, operateTime, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initDirectRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String uuid;
      private String department;
      private String userName;
      private String object;
      private String type;
      private String operateTime;
      private String content;
      private String token;
      public initDirectRecord_call(String uuid, String department, String userName, String object, String type, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.department = department;
        this.userName = userName;
        this.object = object;
        this.type = type;
        this.operateTime = operateTime;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initDirectRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initDirectRecord_args args = new initDirectRecord_args();
        args.setUuid(uuid);
        args.setDepartment(department);
        args.setUserName(userName);
        args.setObject(object);
        args.setType(type);
        args.setOperateTime(operateTime);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void initUserRecord(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initUserRecord_call method_call = new initUserRecord_call(department, userName, userAddress, role, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initUserRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String department;
      private String userName;
      private String userAddress;
      private String role;
      private String token;
      public initUserRecord_call(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.department = department;
        this.userName = userName;
        this.userAddress = userAddress;
        this.role = role;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initUserRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initUserRecord_args args = new initUserRecord_args();
        args.setDepartment(department);
        args.setUserName(userName);
        args.setUserAddress(userAddress);
        args.setRole(role);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void reviewRecord(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reviewRecord_call method_call = new reviewRecord_call(uuid, reviewer, reviewTime, reviewResult, reviewDepartment, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reviewRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String uuid;
      private String reviewer;
      private String reviewTime;
      private String reviewResult;
      private String reviewDepartment;
      private String token;
      public reviewRecord_call(String uuid, String reviewer, String reviewTime, String reviewResult, String reviewDepartment, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.reviewer = reviewer;
        this.reviewTime = reviewTime;
        this.reviewResult = reviewResult;
        this.reviewDepartment = reviewDepartment;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reviewRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reviewRecord_args args = new reviewRecord_args();
        args.setUuid(uuid);
        args.setReviewer(reviewer);
        args.setReviewTime(reviewTime);
        args.setReviewResult(reviewResult);
        args.setReviewDepartment(reviewDepartment);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void operateRecord(String uuid, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      operateRecord_call method_call = new operateRecord_call(uuid, operateTime, content, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class operateRecord_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String uuid;
      private String operateTime;
      private String content;
      private String token;
      public operateRecord_call(String uuid, String operateTime, String content, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.operateTime = operateTime;
        this.content = content;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("operateRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        operateRecord_args args = new operateRecord_args();
        args.setUuid(uuid);
        args.setOperateTime(operateTime);
        args.setContent(content);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void modifyUser(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyUser_call method_call = new modifyUser_call(department, userName, userAddress, role, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyUser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String department;
      private String userName;
      private String userAddress;
      private String role;
      private String token;
      public modifyUser_call(String department, String userName, String userAddress, String role, String token, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.department = department;
        this.userName = userName;
        this.userAddress = userAddress;
        this.role = role;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyUser_args args = new modifyUser_args();
        args.setDepartment(department);
        args.setUserName(userName);
        args.setUserAddress(userAddress);
        args.setRole(role);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("initOpinionRecord", new initOpinionRecord());
      processMap.put("initDirectRecord", new initDirectRecord());
      processMap.put("initUserRecord", new initUserRecord());
      processMap.put("reviewRecord", new reviewRecord());
      processMap.put("operateRecord", new operateRecord());
      processMap.put("modifyUser", new modifyUser());
      return processMap;
    }

    public static class initOpinionRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initOpinionRecord_args> {
      public initOpinionRecord() {
        super("initOpinionRecord");
      }

      public initOpinionRecord_args getEmptyArgsInstance() {
        return new initOpinionRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public initOpinionRecord_result getResult(I iface, initOpinionRecord_args args) throws org.apache.thrift.TException {
        initOpinionRecord_result result = new initOpinionRecord_result();
        iface.initOpinionRecord(args.uuid, args.department, args.userName, args.object, args.type, args.opinionTime, args.token);
        return result;
      }
    }

    public static class initDirectRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initDirectRecord_args> {
      public initDirectRecord() {
        super("initDirectRecord");
      }

      public initDirectRecord_args getEmptyArgsInstance() {
        return new initDirectRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public initDirectRecord_result getResult(I iface, initDirectRecord_args args) throws org.apache.thrift.TException {
        initDirectRecord_result result = new initDirectRecord_result();
        iface.initDirectRecord(args.uuid, args.department, args.userName, args.object, args.type, args.operateTime, args.content, args.token);
        return result;
      }
    }

    public static class initUserRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initUserRecord_args> {
      public initUserRecord() {
        super("initUserRecord");
      }

      public initUserRecord_args getEmptyArgsInstance() {
        return new initUserRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public initUserRecord_result getResult(I iface, initUserRecord_args args) throws org.apache.thrift.TException {
        initUserRecord_result result = new initUserRecord_result();
        iface.initUserRecord(args.department, args.userName, args.userAddress, args.role, args.token);
        return result;
      }
    }

    public static class reviewRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reviewRecord_args> {
      public reviewRecord() {
        super("reviewRecord");
      }

      public reviewRecord_args getEmptyArgsInstance() {
        return new reviewRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public reviewRecord_result getResult(I iface, reviewRecord_args args) throws org.apache.thrift.TException {
        reviewRecord_result result = new reviewRecord_result();
        iface.reviewRecord(args.uuid, args.reviewer, args.reviewTime, args.reviewResult, args.reviewDepartment, args.token);
        return result;
      }
    }

    public static class operateRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, operateRecord_args> {
      public operateRecord() {
        super("operateRecord");
      }

      public operateRecord_args getEmptyArgsInstance() {
        return new operateRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public operateRecord_result getResult(I iface, operateRecord_args args) throws org.apache.thrift.TException {
        operateRecord_result result = new operateRecord_result();
        iface.operateRecord(args.uuid, args.operateTime, args.content, args.token);
        return result;
      }
    }

    public static class modifyUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyUser_args> {
      public modifyUser() {
        super("modifyUser");
      }

      public modifyUser_args getEmptyArgsInstance() {
        return new modifyUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public modifyUser_result getResult(I iface, modifyUser_args args) throws org.apache.thrift.TException {
        modifyUser_result result = new modifyUser_result();
        iface.modifyUser(args.department, args.userName, args.userAddress, args.role, args.token);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("initOpinionRecord", new initOpinionRecord());
      processMap.put("initDirectRecord", new initDirectRecord());
      processMap.put("initUserRecord", new initUserRecord());
      processMap.put("reviewRecord", new reviewRecord());
      processMap.put("operateRecord", new operateRecord());
      processMap.put("modifyUser", new modifyUser());
      return processMap;
    }

    public static class initOpinionRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initOpinionRecord_args, Void> {
      public initOpinionRecord() {
        super("initOpinionRecord");
      }

      public initOpinionRecord_args getEmptyArgsInstance() {
        return new initOpinionRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initOpinionRecord_result result = new initOpinionRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initOpinionRecord_result result = new initOpinionRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initOpinionRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.initOpinionRecord(args.uuid, args.department, args.userName, args.object, args.type, args.opinionTime, args.token,resultHandler);
      }
    }

    public static class initDirectRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initDirectRecord_args, Void> {
      public initDirectRecord() {
        super("initDirectRecord");
      }

      public initDirectRecord_args getEmptyArgsInstance() {
        return new initDirectRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initDirectRecord_result result = new initDirectRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initDirectRecord_result result = new initDirectRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initDirectRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.initDirectRecord(args.uuid, args.department, args.userName, args.object, args.type, args.operateTime, args.content, args.token,resultHandler);
      }
    }

    public static class initUserRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initUserRecord_args, Void> {
      public initUserRecord() {
        super("initUserRecord");
      }

      public initUserRecord_args getEmptyArgsInstance() {
        return new initUserRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initUserRecord_result result = new initUserRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            initUserRecord_result result = new initUserRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initUserRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.initUserRecord(args.department, args.userName, args.userAddress, args.role, args.token,resultHandler);
      }
    }

    public static class reviewRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reviewRecord_args, Void> {
      public reviewRecord() {
        super("reviewRecord");
      }

      public reviewRecord_args getEmptyArgsInstance() {
        return new reviewRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            reviewRecord_result result = new reviewRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reviewRecord_result result = new reviewRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reviewRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.reviewRecord(args.uuid, args.reviewer, args.reviewTime, args.reviewResult, args.reviewDepartment, args.token,resultHandler);
      }
    }

    public static class operateRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, operateRecord_args, Void> {
      public operateRecord() {
        super("operateRecord");
      }

      public operateRecord_args getEmptyArgsInstance() {
        return new operateRecord_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            operateRecord_result result = new operateRecord_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            operateRecord_result result = new operateRecord_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, operateRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.operateRecord(args.uuid, args.operateTime, args.content, args.token,resultHandler);
      }
    }

    public static class modifyUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyUser_args, Void> {
      public modifyUser() {
        super("modifyUser");
      }

      public modifyUser_args getEmptyArgsInstance() {
        return new modifyUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            modifyUser_result result = new modifyUser_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modifyUser_result result = new modifyUser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.modifyUser(args.department, args.userName, args.userAddress, args.role, args.token,resultHandler);
      }
    }

  }

  public static class initOpinionRecord_args implements org.apache.thrift.TBase<initOpinionRecord_args, initOpinionRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initOpinionRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initOpinionRecord_args");

    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OPINION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opinionTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initOpinionRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initOpinionRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String uuid; // required
    public @org.apache.thrift.annotation.Nullable String department; // required
    public @org.apache.thrift.annotation.Nullable String userName; // required
    public @org.apache.thrift.annotation.Nullable String object; // required
    public @org.apache.thrift.annotation.Nullable String type; // required
    public @org.apache.thrift.annotation.Nullable String opinionTime; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short)1, "uuid"),
      DEPARTMENT((short)2, "department"),
      USER_NAME((short)3, "userName"),
      OBJECT((short)4, "object"),
      TYPE((short)5, "type"),
      OPINION_TIME((short)6, "opinionTime"),
      TOKEN((short)7, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // OBJECT
            return OBJECT;
          case 5: // TYPE
            return TYPE;
          case 6: // OPINION_TIME
            return OPINION_TIME;
          case 7: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPINION_TIME, new org.apache.thrift.meta_data.FieldMetaData("opinionTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initOpinionRecord_args.class, metaDataMap);
    }

    public initOpinionRecord_args() {
    }

    public initOpinionRecord_args(
      String uuid,
      String department,
      String userName,
      String object,
      String type,
      String opinionTime,
      String token)
    {
      this();
      this.uuid = uuid;
      this.department = department;
      this.userName = userName;
      this.object = object;
      this.type = type;
      this.opinionTime = opinionTime;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initOpinionRecord_args(initOpinionRecord_args other) {
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOpinionTime()) {
        this.opinionTime = other.opinionTime;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public initOpinionRecord_args deepCopy() {
      return new initOpinionRecord_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      this.department = null;
      this.userName = null;
      this.object = null;
      this.type = null;
      this.opinionTime = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getUuid() {
      return this.uuid;
    }

    public initOpinionRecord_args setUuid(@org.apache.thrift.annotation.Nullable String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getDepartment() {
      return this.department;
    }

    public initOpinionRecord_args setDepartment(@org.apache.thrift.annotation.Nullable String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserName() {
      return this.userName;
    }

    public initOpinionRecord_args setUserName(@org.apache.thrift.annotation.Nullable String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getObject() {
      return this.object;
    }

    public initOpinionRecord_args setObject(@org.apache.thrift.annotation.Nullable String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getType() {
      return this.type;
    }

    public initOpinionRecord_args setType(@org.apache.thrift.annotation.Nullable String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getOpinionTime() {
      return this.opinionTime;
    }

    public initOpinionRecord_args setOpinionTime(@org.apache.thrift.annotation.Nullable String opinionTime) {
      this.opinionTime = opinionTime;
      return this;
    }

    public void unsetOpinionTime() {
      this.opinionTime = null;
    }

    /** Returns true if field opinionTime is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinionTime() {
      return this.opinionTime != null;
    }

    public void setOpinionTimeIsSet(boolean value) {
      if (!value) {
        this.opinionTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public initOpinionRecord_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      case DEPARTMENT:
        if (value == null) {
          unsetDepartment();
        } else {
          setDepartment((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case OBJECT:
        if (value == null) {
          unsetObject();
        } else {
          setObject((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case OPINION_TIME:
        if (value == null) {
          unsetOpinionTime();
        } else {
          setOpinionTime((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UUID:
        return getUuid();

      case DEPARTMENT:
        return getDepartment();

      case USER_NAME:
        return getUserName();

      case OBJECT:
        return getObject();

      case TYPE:
        return getType();

      case OPINION_TIME:
        return getOpinionTime();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UUID:
        return isSetUuid();
      case DEPARTMENT:
        return isSetDepartment();
      case USER_NAME:
        return isSetUserName();
      case OBJECT:
        return isSetObject();
      case TYPE:
        return isSetType();
      case OPINION_TIME:
        return isSetOpinionTime();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initOpinionRecord_args)
        return this.equals((initOpinionRecord_args)that);
      return false;
    }

    public boolean equals(initOpinionRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_opinionTime = true && this.isSetOpinionTime();
      boolean that_present_opinionTime = true && that.isSetOpinionTime();
      if (this_present_opinionTime || that_present_opinionTime) {
        if (!(this_present_opinionTime && that_present_opinionTime))
          return false;
        if (!this.opinionTime.equals(that.opinionTime))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
      if (isSetObject())
        hashCode = hashCode * 8191 + object.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOpinionTime()) ? 131071 : 524287);
      if (isSetOpinionTime())
        hashCode = hashCode * 8191 + opinionTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initOpinionRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetUuid(), other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserName(), other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetObject(), other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetOpinionTime(), other.isSetOpinionTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinionTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinionTime, other.opinionTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initOpinionRecord_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("opinionTime:");
      if (this.opinionTime == null) {
        sb.append("null");
      } else {
        sb.append(this.opinionTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initOpinionRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initOpinionRecord_argsStandardScheme getScheme() {
        return new initOpinionRecord_argsStandardScheme();
      }
    }

    private static class initOpinionRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initOpinionRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPINION_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.opinionTime = iprot.readString();
                struct.setOpinionTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.opinionTime != null) {
          oprot.writeFieldBegin(OPINION_TIME_FIELD_DESC);
          oprot.writeString(struct.opinionTime);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initOpinionRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initOpinionRecord_argsTupleScheme getScheme() {
        return new initOpinionRecord_argsTupleScheme();
      }
    }

    private static class initOpinionRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initOpinionRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetUserName()) {
          optionals.set(2);
        }
        if (struct.isSetObject()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        if (struct.isSetOpinionTime()) {
          optionals.set(5);
        }
        if (struct.isSetToken()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetOpinionTime()) {
          oprot.writeString(struct.opinionTime);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.opinionTime = iprot.readString();
          struct.setOpinionTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initOpinionRecord_result implements org.apache.thrift.TBase<initOpinionRecord_result, initOpinionRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initOpinionRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initOpinionRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initOpinionRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initOpinionRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initOpinionRecord_result.class, metaDataMap);
    }

    public initOpinionRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initOpinionRecord_result(initOpinionRecord_result other) {
    }

    public initOpinionRecord_result deepCopy() {
      return new initOpinionRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initOpinionRecord_result)
        return this.equals((initOpinionRecord_result)that);
      return false;
    }

    public boolean equals(initOpinionRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(initOpinionRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initOpinionRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initOpinionRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initOpinionRecord_resultStandardScheme getScheme() {
        return new initOpinionRecord_resultStandardScheme();
      }
    }

    private static class initOpinionRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initOpinionRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initOpinionRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initOpinionRecord_resultTupleScheme getScheme() {
        return new initOpinionRecord_resultTupleScheme();
      }
    }

    private static class initOpinionRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initOpinionRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initOpinionRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initDirectRecord_args implements org.apache.thrift.TBase<initDirectRecord_args, initDirectRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initDirectRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initDirectRecord_args");

    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("object", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initDirectRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initDirectRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String uuid; // required
    public @org.apache.thrift.annotation.Nullable String department; // required
    public @org.apache.thrift.annotation.Nullable String userName; // required
    public @org.apache.thrift.annotation.Nullable String object; // required
    public @org.apache.thrift.annotation.Nullable String type; // required
    public @org.apache.thrift.annotation.Nullable String operateTime; // required
    public @org.apache.thrift.annotation.Nullable String content; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short)1, "uuid"),
      DEPARTMENT((short)2, "department"),
      USER_NAME((short)3, "userName"),
      OBJECT((short)4, "object"),
      TYPE((short)5, "type"),
      OPERATE_TIME((short)6, "operateTime"),
      CONTENT((short)7, "content"),
      TOKEN((short)8, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // DEPARTMENT
            return DEPARTMENT;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // OBJECT
            return OBJECT;
          case 5: // TYPE
            return TYPE;
          case 6: // OPERATE_TIME
            return OPERATE_TIME;
          case 7: // CONTENT
            return CONTENT;
          case 8: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT, new org.apache.thrift.meta_data.FieldMetaData("object", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initDirectRecord_args.class, metaDataMap);
    }

    public initDirectRecord_args() {
    }

    public initDirectRecord_args(
      String uuid,
      String department,
      String userName,
      String object,
      String type,
      String operateTime,
      String content,
      String token)
    {
      this();
      this.uuid = uuid;
      this.department = department;
      this.userName = userName;
      this.object = object;
      this.type = type;
      this.operateTime = operateTime;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initDirectRecord_args(initDirectRecord_args other) {
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetObject()) {
        this.object = other.object;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetOperateTime()) {
        this.operateTime = other.operateTime;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public initDirectRecord_args deepCopy() {
      return new initDirectRecord_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      this.department = null;
      this.userName = null;
      this.object = null;
      this.type = null;
      this.operateTime = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getUuid() {
      return this.uuid;
    }

    public initDirectRecord_args setUuid(@org.apache.thrift.annotation.Nullable String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getDepartment() {
      return this.department;
    }

    public initDirectRecord_args setDepartment(@org.apache.thrift.annotation.Nullable String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserName() {
      return this.userName;
    }

    public initDirectRecord_args setUserName(@org.apache.thrift.annotation.Nullable String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getObject() {
      return this.object;
    }

    public initDirectRecord_args setObject(@org.apache.thrift.annotation.Nullable String object) {
      this.object = object;
      return this;
    }

    public void unsetObject() {
      this.object = null;
    }

    /** Returns true if field object is set (has been assigned a value) and false otherwise */
    public boolean isSetObject() {
      return this.object != null;
    }

    public void setObjectIsSet(boolean value) {
      if (!value) {
        this.object = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getType() {
      return this.type;
    }

    public initDirectRecord_args setType(@org.apache.thrift.annotation.Nullable String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getOperateTime() {
      return this.operateTime;
    }

    public initDirectRecord_args setOperateTime(@org.apache.thrift.annotation.Nullable String operateTime) {
      this.operateTime = operateTime;
      return this;
    }

    public void unsetOperateTime() {
      this.operateTime = null;
    }

    /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateTime() {
      return this.operateTime != null;
    }

    public void setOperateTimeIsSet(boolean value) {
      if (!value) {
        this.operateTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getContent() {
      return this.content;
    }

    public initDirectRecord_args setContent(@org.apache.thrift.annotation.Nullable String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public initDirectRecord_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      case DEPARTMENT:
        if (value == null) {
          unsetDepartment();
        } else {
          setDepartment((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case OBJECT:
        if (value == null) {
          unsetObject();
        } else {
          setObject((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case OPERATE_TIME:
        if (value == null) {
          unsetOperateTime();
        } else {
          setOperateTime((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UUID:
        return getUuid();

      case DEPARTMENT:
        return getDepartment();

      case USER_NAME:
        return getUserName();

      case OBJECT:
        return getObject();

      case TYPE:
        return getType();

      case OPERATE_TIME:
        return getOperateTime();

      case CONTENT:
        return getContent();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UUID:
        return isSetUuid();
      case DEPARTMENT:
        return isSetDepartment();
      case USER_NAME:
        return isSetUserName();
      case OBJECT:
        return isSetObject();
      case TYPE:
        return isSetType();
      case OPERATE_TIME:
        return isSetOperateTime();
      case CONTENT:
        return isSetContent();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initDirectRecord_args)
        return this.equals((initDirectRecord_args)that);
      return false;
    }

    public boolean equals(initDirectRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_object = true && this.isSetObject();
      boolean that_present_object = true && that.isSetObject();
      if (this_present_object || that_present_object) {
        if (!(this_present_object && that_present_object))
          return false;
        if (!this.object.equals(that.object))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_operateTime = true && this.isSetOperateTime();
      boolean that_present_operateTime = true && that.isSetOperateTime();
      if (this_present_operateTime || that_present_operateTime) {
        if (!(this_present_operateTime && that_present_operateTime))
          return false;
        if (!this.operateTime.equals(that.operateTime))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetObject()) ? 131071 : 524287);
      if (isSetObject())
        hashCode = hashCode * 8191 + object.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetOperateTime()) ? 131071 : 524287);
      if (isSetOperateTime())
        hashCode = hashCode * 8191 + operateTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initDirectRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetUuid(), other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserName(), other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetObject(), other.isSetObject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.object, other.object);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetOperateTime(), other.isSetOperateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initDirectRecord_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("object:");
      if (this.object == null) {
        sb.append("null");
      } else {
        sb.append(this.object);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateTime:");
      if (this.operateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.operateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initDirectRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initDirectRecord_argsStandardScheme getScheme() {
        return new initDirectRecord_argsStandardScheme();
      }
    }

    private static class initDirectRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initDirectRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.object = iprot.readString();
                struct.setObjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // OPERATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operateTime = iprot.readString();
                struct.setOperateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initDirectRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.object != null) {
          oprot.writeFieldBegin(OBJECT_FIELD_DESC);
          oprot.writeString(struct.object);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.operateTime != null) {
          oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
          oprot.writeString(struct.operateTime);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initDirectRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initDirectRecord_argsTupleScheme getScheme() {
        return new initDirectRecord_argsTupleScheme();
      }
    }

    private static class initDirectRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initDirectRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetDepartment()) {
          optionals.set(1);
        }
        if (struct.isSetUserName()) {
          optionals.set(2);
        }
        if (struct.isSetObject()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        if (struct.isSetOperateTime()) {
          optionals.set(5);
        }
        if (struct.isSetContent()) {
          optionals.set(6);
        }
        if (struct.isSetToken()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetObject()) {
          oprot.writeString(struct.object);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetOperateTime()) {
          oprot.writeString(struct.operateTime);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.object = iprot.readString();
          struct.setObjectIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.operateTime = iprot.readString();
          struct.setOperateTimeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(7)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initDirectRecord_result implements org.apache.thrift.TBase<initDirectRecord_result, initDirectRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initDirectRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initDirectRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initDirectRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initDirectRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initDirectRecord_result.class, metaDataMap);
    }

    public initDirectRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initDirectRecord_result(initDirectRecord_result other) {
    }

    public initDirectRecord_result deepCopy() {
      return new initDirectRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initDirectRecord_result)
        return this.equals((initDirectRecord_result)that);
      return false;
    }

    public boolean equals(initDirectRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(initDirectRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initDirectRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initDirectRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initDirectRecord_resultStandardScheme getScheme() {
        return new initDirectRecord_resultStandardScheme();
      }
    }

    private static class initDirectRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initDirectRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initDirectRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initDirectRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initDirectRecord_resultTupleScheme getScheme() {
        return new initDirectRecord_resultTupleScheme();
      }
    }

    private static class initDirectRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initDirectRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initDirectRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initUserRecord_args implements org.apache.thrift.TBase<initUserRecord_args, initUserRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<initUserRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initUserRecord_args");

    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("userAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initUserRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initUserRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String department; // required
    public @org.apache.thrift.annotation.Nullable String userName; // required
    public @org.apache.thrift.annotation.Nullable String userAddress; // required
    public @org.apache.thrift.annotation.Nullable String role; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPARTMENT((short)1, "department"),
      USER_NAME((short)2, "userName"),
      USER_ADDRESS((short)3, "userAddress"),
      ROLE((short)4, "role"),
      TOKEN((short)5, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEPARTMENT
            return DEPARTMENT;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // USER_ADDRESS
            return USER_ADDRESS;
          case 4: // ROLE
            return ROLE;
          case 5: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("userAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initUserRecord_args.class, metaDataMap);
    }

    public initUserRecord_args() {
    }

    public initUserRecord_args(
      String department,
      String userName,
      String userAddress,
      String role,
      String token)
    {
      this();
      this.department = department;
      this.userName = userName;
      this.userAddress = userAddress;
      this.role = role;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initUserRecord_args(initUserRecord_args other) {
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetUserAddress()) {
        this.userAddress = other.userAddress;
      }
      if (other.isSetRole()) {
        this.role = other.role;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public initUserRecord_args deepCopy() {
      return new initUserRecord_args(this);
    }

    @Override
    public void clear() {
      this.department = null;
      this.userName = null;
      this.userAddress = null;
      this.role = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getDepartment() {
      return this.department;
    }

    public initUserRecord_args setDepartment(@org.apache.thrift.annotation.Nullable String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserName() {
      return this.userName;
    }

    public initUserRecord_args setUserName(@org.apache.thrift.annotation.Nullable String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserAddress() {
      return this.userAddress;
    }

    public initUserRecord_args setUserAddress(@org.apache.thrift.annotation.Nullable String userAddress) {
      this.userAddress = userAddress;
      return this;
    }

    public void unsetUserAddress() {
      this.userAddress = null;
    }

    /** Returns true if field userAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAddress() {
      return this.userAddress != null;
    }

    public void setUserAddressIsSet(boolean value) {
      if (!value) {
        this.userAddress = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getRole() {
      return this.role;
    }

    public initUserRecord_args setRole(@org.apache.thrift.annotation.Nullable String role) {
      this.role = role;
      return this;
    }

    public void unsetRole() {
      this.role = null;
    }

    /** Returns true if field role is set (has been assigned a value) and false otherwise */
    public boolean isSetRole() {
      return this.role != null;
    }

    public void setRoleIsSet(boolean value) {
      if (!value) {
        this.role = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public initUserRecord_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case DEPARTMENT:
        if (value == null) {
          unsetDepartment();
        } else {
          setDepartment((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case USER_ADDRESS:
        if (value == null) {
          unsetUserAddress();
        } else {
          setUserAddress((String)value);
        }
        break;

      case ROLE:
        if (value == null) {
          unsetRole();
        } else {
          setRole((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPARTMENT:
        return getDepartment();

      case USER_NAME:
        return getUserName();

      case USER_ADDRESS:
        return getUserAddress();

      case ROLE:
        return getRole();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEPARTMENT:
        return isSetDepartment();
      case USER_NAME:
        return isSetUserName();
      case USER_ADDRESS:
        return isSetUserAddress();
      case ROLE:
        return isSetRole();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initUserRecord_args)
        return this.equals((initUserRecord_args)that);
      return false;
    }

    public boolean equals(initUserRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_userAddress = true && this.isSetUserAddress();
      boolean that_present_userAddress = true && that.isSetUserAddress();
      if (this_present_userAddress || that_present_userAddress) {
        if (!(this_present_userAddress && that_present_userAddress))
          return false;
        if (!this.userAddress.equals(that.userAddress))
          return false;
      }

      boolean this_present_role = true && this.isSetRole();
      boolean that_present_role = true && that.isSetRole();
      if (this_present_role || that_present_role) {
        if (!(this_present_role && that_present_role))
          return false;
        if (!this.role.equals(that.role))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserAddress()) ? 131071 : 524287);
      if (isSetUserAddress())
        hashCode = hashCode * 8191 + userAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
      if (isSetRole())
        hashCode = hashCode * 8191 + role.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(initUserRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserName(), other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserAddress(), other.isSetUserAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAddress, other.userAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetRole(), other.isSetRole());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRole()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initUserRecord_args(");
      boolean first = true;

      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAddress:");
      if (this.userAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.userAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initUserRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initUserRecord_argsStandardScheme getScheme() {
        return new initUserRecord_argsStandardScheme();
      }
    }

    private static class initUserRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<initUserRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAddress = iprot.readString();
                struct.setUserAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.role = iprot.readString();
                struct.setRoleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initUserRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.userAddress != null) {
          oprot.writeFieldBegin(USER_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.userAddress);
          oprot.writeFieldEnd();
        }
        if (struct.role != null) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initUserRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initUserRecord_argsTupleScheme getScheme() {
        return new initUserRecord_argsTupleScheme();
      }
    }

    private static class initUserRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<initUserRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDepartment()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetUserAddress()) {
          optionals.set(2);
        }
        if (struct.isSetRole()) {
          optionals.set(3);
        }
        if (struct.isSetToken()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetUserAddress()) {
          oprot.writeString(struct.userAddress);
        }
        if (struct.isSetRole()) {
          oprot.writeString(struct.role);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initUserRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userAddress = iprot.readString();
          struct.setUserAddressIsSet(true);
        }
        if (incoming.get(3)) {
          struct.role = iprot.readString();
          struct.setRoleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class initUserRecord_result implements org.apache.thrift.TBase<initUserRecord_result, initUserRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<initUserRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initUserRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new initUserRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new initUserRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initUserRecord_result.class, metaDataMap);
    }

    public initUserRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initUserRecord_result(initUserRecord_result other) {
    }

    public initUserRecord_result deepCopy() {
      return new initUserRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof initUserRecord_result)
        return this.equals((initUserRecord_result)that);
      return false;
    }

    public boolean equals(initUserRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(initUserRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initUserRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initUserRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initUserRecord_resultStandardScheme getScheme() {
        return new initUserRecord_resultStandardScheme();
      }
    }

    private static class initUserRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<initUserRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initUserRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initUserRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public initUserRecord_resultTupleScheme getScheme() {
        return new initUserRecord_resultTupleScheme();
      }
    }

    private static class initUserRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<initUserRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initUserRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reviewRecord_args implements org.apache.thrift.TBase<reviewRecord_args, reviewRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<reviewRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reviewRecord_args");

    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REVIEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewer", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REVIEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewTime", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REVIEW_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewResult", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REVIEW_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewDepartment", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reviewRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reviewRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String uuid; // required
    public @org.apache.thrift.annotation.Nullable String reviewer; // required
    public @org.apache.thrift.annotation.Nullable String reviewTime; // required
    public @org.apache.thrift.annotation.Nullable String reviewResult; // required
    public @org.apache.thrift.annotation.Nullable String reviewDepartment; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short)1, "uuid"),
      REVIEWER((short)2, "reviewer"),
      REVIEW_TIME((short)3, "reviewTime"),
      REVIEW_RESULT((short)4, "reviewResult"),
      REVIEW_DEPARTMENT((short)5, "reviewDepartment"),
      TOKEN((short)6, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // REVIEWER
            return REVIEWER;
          case 3: // REVIEW_TIME
            return REVIEW_TIME;
          case 4: // REVIEW_RESULT
            return REVIEW_RESULT;
          case 5: // REVIEW_DEPARTMENT
            return REVIEW_DEPARTMENT;
          case 6: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEWER, new org.apache.thrift.meta_data.FieldMetaData("reviewer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("reviewTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_RESULT, new org.apache.thrift.meta_data.FieldMetaData("reviewResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REVIEW_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("reviewDepartment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reviewRecord_args.class, metaDataMap);
    }

    public reviewRecord_args() {
    }

    public reviewRecord_args(
      String uuid,
      String reviewer,
      String reviewTime,
      String reviewResult,
      String reviewDepartment,
      String token)
    {
      this();
      this.uuid = uuid;
      this.reviewer = reviewer;
      this.reviewTime = reviewTime;
      this.reviewResult = reviewResult;
      this.reviewDepartment = reviewDepartment;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reviewRecord_args(reviewRecord_args other) {
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      if (other.isSetReviewer()) {
        this.reviewer = other.reviewer;
      }
      if (other.isSetReviewTime()) {
        this.reviewTime = other.reviewTime;
      }
      if (other.isSetReviewResult()) {
        this.reviewResult = other.reviewResult;
      }
      if (other.isSetReviewDepartment()) {
        this.reviewDepartment = other.reviewDepartment;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public reviewRecord_args deepCopy() {
      return new reviewRecord_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      this.reviewer = null;
      this.reviewTime = null;
      this.reviewResult = null;
      this.reviewDepartment = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getUuid() {
      return this.uuid;
    }

    public reviewRecord_args setUuid(@org.apache.thrift.annotation.Nullable String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getReviewer() {
      return this.reviewer;
    }

    public reviewRecord_args setReviewer(@org.apache.thrift.annotation.Nullable String reviewer) {
      this.reviewer = reviewer;
      return this;
    }

    public void unsetReviewer() {
      this.reviewer = null;
    }

    /** Returns true if field reviewer is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewer() {
      return this.reviewer != null;
    }

    public void setReviewerIsSet(boolean value) {
      if (!value) {
        this.reviewer = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getReviewTime() {
      return this.reviewTime;
    }

    public reviewRecord_args setReviewTime(@org.apache.thrift.annotation.Nullable String reviewTime) {
      this.reviewTime = reviewTime;
      return this;
    }

    public void unsetReviewTime() {
      this.reviewTime = null;
    }

    /** Returns true if field reviewTime is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewTime() {
      return this.reviewTime != null;
    }

    public void setReviewTimeIsSet(boolean value) {
      if (!value) {
        this.reviewTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getReviewResult() {
      return this.reviewResult;
    }

    public reviewRecord_args setReviewResult(@org.apache.thrift.annotation.Nullable String reviewResult) {
      this.reviewResult = reviewResult;
      return this;
    }

    public void unsetReviewResult() {
      this.reviewResult = null;
    }

    /** Returns true if field reviewResult is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewResult() {
      return this.reviewResult != null;
    }

    public void setReviewResultIsSet(boolean value) {
      if (!value) {
        this.reviewResult = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getReviewDepartment() {
      return this.reviewDepartment;
    }

    public reviewRecord_args setReviewDepartment(@org.apache.thrift.annotation.Nullable String reviewDepartment) {
      this.reviewDepartment = reviewDepartment;
      return this;
    }

    public void unsetReviewDepartment() {
      this.reviewDepartment = null;
    }

    /** Returns true if field reviewDepartment is set (has been assigned a value) and false otherwise */
    public boolean isSetReviewDepartment() {
      return this.reviewDepartment != null;
    }

    public void setReviewDepartmentIsSet(boolean value) {
      if (!value) {
        this.reviewDepartment = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public reviewRecord_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      case REVIEWER:
        if (value == null) {
          unsetReviewer();
        } else {
          setReviewer((String)value);
        }
        break;

      case REVIEW_TIME:
        if (value == null) {
          unsetReviewTime();
        } else {
          setReviewTime((String)value);
        }
        break;

      case REVIEW_RESULT:
        if (value == null) {
          unsetReviewResult();
        } else {
          setReviewResult((String)value);
        }
        break;

      case REVIEW_DEPARTMENT:
        if (value == null) {
          unsetReviewDepartment();
        } else {
          setReviewDepartment((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UUID:
        return getUuid();

      case REVIEWER:
        return getReviewer();

      case REVIEW_TIME:
        return getReviewTime();

      case REVIEW_RESULT:
        return getReviewResult();

      case REVIEW_DEPARTMENT:
        return getReviewDepartment();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UUID:
        return isSetUuid();
      case REVIEWER:
        return isSetReviewer();
      case REVIEW_TIME:
        return isSetReviewTime();
      case REVIEW_RESULT:
        return isSetReviewResult();
      case REVIEW_DEPARTMENT:
        return isSetReviewDepartment();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reviewRecord_args)
        return this.equals((reviewRecord_args)that);
      return false;
    }

    public boolean equals(reviewRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_reviewer = true && this.isSetReviewer();
      boolean that_present_reviewer = true && that.isSetReviewer();
      if (this_present_reviewer || that_present_reviewer) {
        if (!(this_present_reviewer && that_present_reviewer))
          return false;
        if (!this.reviewer.equals(that.reviewer))
          return false;
      }

      boolean this_present_reviewTime = true && this.isSetReviewTime();
      boolean that_present_reviewTime = true && that.isSetReviewTime();
      if (this_present_reviewTime || that_present_reviewTime) {
        if (!(this_present_reviewTime && that_present_reviewTime))
          return false;
        if (!this.reviewTime.equals(that.reviewTime))
          return false;
      }

      boolean this_present_reviewResult = true && this.isSetReviewResult();
      boolean that_present_reviewResult = true && that.isSetReviewResult();
      if (this_present_reviewResult || that_present_reviewResult) {
        if (!(this_present_reviewResult && that_present_reviewResult))
          return false;
        if (!this.reviewResult.equals(that.reviewResult))
          return false;
      }

      boolean this_present_reviewDepartment = true && this.isSetReviewDepartment();
      boolean that_present_reviewDepartment = true && that.isSetReviewDepartment();
      if (this_present_reviewDepartment || that_present_reviewDepartment) {
        if (!(this_present_reviewDepartment && that_present_reviewDepartment))
          return false;
        if (!this.reviewDepartment.equals(that.reviewDepartment))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewer()) ? 131071 : 524287);
      if (isSetReviewer())
        hashCode = hashCode * 8191 + reviewer.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewTime()) ? 131071 : 524287);
      if (isSetReviewTime())
        hashCode = hashCode * 8191 + reviewTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewResult()) ? 131071 : 524287);
      if (isSetReviewResult())
        hashCode = hashCode * 8191 + reviewResult.hashCode();

      hashCode = hashCode * 8191 + ((isSetReviewDepartment()) ? 131071 : 524287);
      if (isSetReviewDepartment())
        hashCode = hashCode * 8191 + reviewDepartment.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reviewRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetUuid(), other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetReviewer(), other.isSetReviewer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewer, other.reviewer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetReviewTime(), other.isSetReviewTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewTime, other.reviewTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetReviewResult(), other.isSetReviewResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewResult, other.reviewResult);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetReviewDepartment(), other.isSetReviewDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReviewDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewDepartment, other.reviewDepartment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reviewRecord_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewer:");
      if (this.reviewer == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewTime:");
      if (this.reviewTime == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewResult:");
      if (this.reviewResult == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewResult);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reviewDepartment:");
      if (this.reviewDepartment == null) {
        sb.append("null");
      } else {
        sb.append(this.reviewDepartment);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reviewRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reviewRecord_argsStandardScheme getScheme() {
        return new reviewRecord_argsStandardScheme();
      }
    }

    private static class reviewRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reviewRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REVIEWER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewer = iprot.readString();
                struct.setReviewerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REVIEW_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewTime = iprot.readString();
                struct.setReviewTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REVIEW_RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewResult = iprot.readString();
                struct.setReviewResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REVIEW_DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reviewDepartment = iprot.readString();
                struct.setReviewDepartmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reviewRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        if (struct.reviewer != null) {
          oprot.writeFieldBegin(REVIEWER_FIELD_DESC);
          oprot.writeString(struct.reviewer);
          oprot.writeFieldEnd();
        }
        if (struct.reviewTime != null) {
          oprot.writeFieldBegin(REVIEW_TIME_FIELD_DESC);
          oprot.writeString(struct.reviewTime);
          oprot.writeFieldEnd();
        }
        if (struct.reviewResult != null) {
          oprot.writeFieldBegin(REVIEW_RESULT_FIELD_DESC);
          oprot.writeString(struct.reviewResult);
          oprot.writeFieldEnd();
        }
        if (struct.reviewDepartment != null) {
          oprot.writeFieldBegin(REVIEW_DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.reviewDepartment);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reviewRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reviewRecord_argsTupleScheme getScheme() {
        return new reviewRecord_argsTupleScheme();
      }
    }

    private static class reviewRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reviewRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetReviewer()) {
          optionals.set(1);
        }
        if (struct.isSetReviewTime()) {
          optionals.set(2);
        }
        if (struct.isSetReviewResult()) {
          optionals.set(3);
        }
        if (struct.isSetReviewDepartment()) {
          optionals.set(4);
        }
        if (struct.isSetToken()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetReviewer()) {
          oprot.writeString(struct.reviewer);
        }
        if (struct.isSetReviewTime()) {
          oprot.writeString(struct.reviewTime);
        }
        if (struct.isSetReviewResult()) {
          oprot.writeString(struct.reviewResult);
        }
        if (struct.isSetReviewDepartment()) {
          oprot.writeString(struct.reviewDepartment);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reviewRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reviewer = iprot.readString();
          struct.setReviewerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reviewTime = iprot.readString();
          struct.setReviewTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.reviewResult = iprot.readString();
          struct.setReviewResultIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reviewDepartment = iprot.readString();
          struct.setReviewDepartmentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reviewRecord_result implements org.apache.thrift.TBase<reviewRecord_result, reviewRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<reviewRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reviewRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reviewRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reviewRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reviewRecord_result.class, metaDataMap);
    }

    public reviewRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reviewRecord_result(reviewRecord_result other) {
    }

    public reviewRecord_result deepCopy() {
      return new reviewRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof reviewRecord_result)
        return this.equals((reviewRecord_result)that);
      return false;
    }

    public boolean equals(reviewRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(reviewRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reviewRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reviewRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reviewRecord_resultStandardScheme getScheme() {
        return new reviewRecord_resultStandardScheme();
      }
    }

    private static class reviewRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reviewRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reviewRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reviewRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reviewRecord_resultTupleScheme getScheme() {
        return new reviewRecord_resultTupleScheme();
      }
    }

    private static class reviewRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reviewRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reviewRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class operateRecord_args implements org.apache.thrift.TBase<operateRecord_args, operateRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<operateRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateRecord_args");

    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("operateTime", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operateRecord_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operateRecord_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String uuid; // required
    public @org.apache.thrift.annotation.Nullable String operateTime; // required
    public @org.apache.thrift.annotation.Nullable String content; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short)1, "uuid"),
      OPERATE_TIME((short)2, "operateTime"),
      CONTENT((short)3, "content"),
      TOKEN((short)4, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // OPERATE_TIME
            return OPERATE_TIME;
          case 3: // CONTENT
            return CONTENT;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("operateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateRecord_args.class, metaDataMap);
    }

    public operateRecord_args() {
    }

    public operateRecord_args(
      String uuid,
      String operateTime,
      String content,
      String token)
    {
      this();
      this.uuid = uuid;
      this.operateTime = operateTime;
      this.content = content;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateRecord_args(operateRecord_args other) {
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      if (other.isSetOperateTime()) {
        this.operateTime = other.operateTime;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public operateRecord_args deepCopy() {
      return new operateRecord_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      this.operateTime = null;
      this.content = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getUuid() {
      return this.uuid;
    }

    public operateRecord_args setUuid(@org.apache.thrift.annotation.Nullable String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getOperateTime() {
      return this.operateTime;
    }

    public operateRecord_args setOperateTime(@org.apache.thrift.annotation.Nullable String operateTime) {
      this.operateTime = operateTime;
      return this;
    }

    public void unsetOperateTime() {
      this.operateTime = null;
    }

    /** Returns true if field operateTime is set (has been assigned a value) and false otherwise */
    public boolean isSetOperateTime() {
      return this.operateTime != null;
    }

    public void setOperateTimeIsSet(boolean value) {
      if (!value) {
        this.operateTime = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getContent() {
      return this.content;
    }

    public operateRecord_args setContent(@org.apache.thrift.annotation.Nullable String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public operateRecord_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      case OPERATE_TIME:
        if (value == null) {
          unsetOperateTime();
        } else {
          setOperateTime((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UUID:
        return getUuid();

      case OPERATE_TIME:
        return getOperateTime();

      case CONTENT:
        return getContent();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UUID:
        return isSetUuid();
      case OPERATE_TIME:
        return isSetOperateTime();
      case CONTENT:
        return isSetContent();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof operateRecord_args)
        return this.equals((operateRecord_args)that);
      return false;
    }

    public boolean equals(operateRecord_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_operateTime = true && this.isSetOperateTime();
      boolean that_present_operateTime = true && that.isSetOperateTime();
      if (this_present_operateTime || that_present_operateTime) {
        if (!(this_present_operateTime && that_present_operateTime))
          return false;
        if (!this.operateTime.equals(that.operateTime))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      hashCode = hashCode * 8191 + ((isSetOperateTime()) ? 131071 : 524287);
      if (isSetOperateTime())
        hashCode = hashCode * 8191 + operateTime.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(operateRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetUuid(), other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetOperateTime(), other.isSetOperateTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperateTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateTime, other.operateTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateRecord_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operateTime:");
      if (this.operateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.operateTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateRecord_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operateRecord_argsStandardScheme getScheme() {
        return new operateRecord_argsStandardScheme();
      }
    }

    private static class operateRecord_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<operateRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operateTime = iprot.readString();
                struct.setOperateTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        if (struct.operateTime != null) {
          oprot.writeFieldBegin(OPERATE_TIME_FIELD_DESC);
          oprot.writeString(struct.operateTime);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateRecord_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operateRecord_argsTupleScheme getScheme() {
        return new operateRecord_argsTupleScheme();
      }
    }

    private static class operateRecord_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<operateRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetOperateTime()) {
          optionals.set(1);
        }
        if (struct.isSetContent()) {
          optionals.set(2);
        }
        if (struct.isSetToken()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetOperateTime()) {
          oprot.writeString(struct.operateTime);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operateTime = iprot.readString();
          struct.setOperateTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(3)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class operateRecord_result implements org.apache.thrift.TBase<operateRecord_result, operateRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<operateRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operateRecord_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operateRecord_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operateRecord_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operateRecord_result.class, metaDataMap);
    }

    public operateRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operateRecord_result(operateRecord_result other) {
    }

    public operateRecord_result deepCopy() {
      return new operateRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof operateRecord_result)
        return this.equals((operateRecord_result)that);
      return false;
    }

    public boolean equals(operateRecord_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(operateRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operateRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operateRecord_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operateRecord_resultStandardScheme getScheme() {
        return new operateRecord_resultStandardScheme();
      }
    }

    private static class operateRecord_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<operateRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operateRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operateRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operateRecord_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operateRecord_resultTupleScheme getScheme() {
        return new operateRecord_resultTupleScheme();
      }
    }

    private static class operateRecord_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<operateRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operateRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operateRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyUser_args implements org.apache.thrift.TBase<modifyUser_args, modifyUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUser_args");

    private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("userAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUser_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable String department; // required
    public @org.apache.thrift.annotation.Nullable String userName; // required
    public @org.apache.thrift.annotation.Nullable String userAddress; // required
    public @org.apache.thrift.annotation.Nullable String role; // required
    public @org.apache.thrift.annotation.Nullable String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPARTMENT((short)1, "department"),
      USER_NAME((short)2, "userName"),
      USER_ADDRESS((short)3, "userAddress"),
      ROLE((short)4, "role"),
      TOKEN((short)5, "token");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEPARTMENT
            return DEPARTMENT;
          case 2: // USER_NAME
            return USER_NAME;
          case 3: // USER_ADDRESS
            return USER_ADDRESS;
          case 4: // ROLE
            return ROLE;
          case 5: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("userAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUser_args.class, metaDataMap);
    }

    public modifyUser_args() {
    }

    public modifyUser_args(
      String department,
      String userName,
      String userAddress,
      String role,
      String token)
    {
      this();
      this.department = department;
      this.userName = userName;
      this.userAddress = userAddress;
      this.role = role;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyUser_args(modifyUser_args other) {
      if (other.isSetDepartment()) {
        this.department = other.department;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetUserAddress()) {
        this.userAddress = other.userAddress;
      }
      if (other.isSetRole()) {
        this.role = other.role;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public modifyUser_args deepCopy() {
      return new modifyUser_args(this);
    }

    @Override
    public void clear() {
      this.department = null;
      this.userName = null;
      this.userAddress = null;
      this.role = null;
      this.token = null;
    }

    @org.apache.thrift.annotation.Nullable
    public String getDepartment() {
      return this.department;
    }

    public modifyUser_args setDepartment(@org.apache.thrift.annotation.Nullable String department) {
      this.department = department;
      return this;
    }

    public void unsetDepartment() {
      this.department = null;
    }

    /** Returns true if field department is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartment() {
      return this.department != null;
    }

    public void setDepartmentIsSet(boolean value) {
      if (!value) {
        this.department = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserName() {
      return this.userName;
    }

    public modifyUser_args setUserName(@org.apache.thrift.annotation.Nullable String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getUserAddress() {
      return this.userAddress;
    }

    public modifyUser_args setUserAddress(@org.apache.thrift.annotation.Nullable String userAddress) {
      this.userAddress = userAddress;
      return this;
    }

    public void unsetUserAddress() {
      this.userAddress = null;
    }

    /** Returns true if field userAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetUserAddress() {
      return this.userAddress != null;
    }

    public void setUserAddressIsSet(boolean value) {
      if (!value) {
        this.userAddress = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getRole() {
      return this.role;
    }

    public modifyUser_args setRole(@org.apache.thrift.annotation.Nullable String role) {
      this.role = role;
      return this;
    }

    public void unsetRole() {
      this.role = null;
    }

    /** Returns true if field role is set (has been assigned a value) and false otherwise */
    public boolean isSetRole() {
      return this.role != null;
    }

    public void setRoleIsSet(boolean value) {
      if (!value) {
        this.role = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public String getToken() {
      return this.token;
    }

    public modifyUser_args setToken(@org.apache.thrift.annotation.Nullable String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case DEPARTMENT:
        if (value == null) {
          unsetDepartment();
        } else {
          setDepartment((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case USER_ADDRESS:
        if (value == null) {
          unsetUserAddress();
        } else {
          setUserAddress((String)value);
        }
        break;

      case ROLE:
        if (value == null) {
          unsetRole();
        } else {
          setRole((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPARTMENT:
        return getDepartment();

      case USER_NAME:
        return getUserName();

      case USER_ADDRESS:
        return getUserAddress();

      case ROLE:
        return getRole();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEPARTMENT:
        return isSetDepartment();
      case USER_NAME:
        return isSetUserName();
      case USER_ADDRESS:
        return isSetUserAddress();
      case ROLE:
        return isSetRole();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof modifyUser_args)
        return this.equals((modifyUser_args)that);
      return false;
    }

    public boolean equals(modifyUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_department = true && this.isSetDepartment();
      boolean that_present_department = true && that.isSetDepartment();
      if (this_present_department || that_present_department) {
        if (!(this_present_department && that_present_department))
          return false;
        if (!this.department.equals(that.department))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_userAddress = true && this.isSetUserAddress();
      boolean that_present_userAddress = true && that.isSetUserAddress();
      if (this_present_userAddress || that_present_userAddress) {
        if (!(this_present_userAddress && that_present_userAddress))
          return false;
        if (!this.userAddress.equals(that.userAddress))
          return false;
      }

      boolean this_present_role = true && this.isSetRole();
      boolean that_present_role = true && that.isSetRole();
      if (this_present_role || that_present_role) {
        if (!(this_present_role && that_present_role))
          return false;
        if (!this.role.equals(that.role))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
      if (isSetDepartment())
        hashCode = hashCode * 8191 + department.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
      if (isSetUserName())
        hashCode = hashCode * 8191 + userName.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserAddress()) ? 131071 : 524287);
      if (isSetUserAddress())
        hashCode = hashCode * 8191 + userAddress.hashCode();

      hashCode = hashCode * 8191 + ((isSetRole()) ? 131071 : 524287);
      if (isSetRole())
        hashCode = hashCode * 8191 + role.hashCode();

      hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
      if (isSetToken())
        hashCode = hashCode * 8191 + token.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.compare(isSetDepartment(), other.isSetDepartment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserName(), other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetUserAddress(), other.isSetUserAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAddress, other.userAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetRole(), other.isSetRole());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRole()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.compare(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyUser_args(");
      boolean first = true;

      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userAddress:");
      if (this.userAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.userAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUser_argsStandardScheme getScheme() {
        return new modifyUser_argsStandardScheme();
      }
    }

    private static class modifyUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEPARTMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.department = iprot.readString();
                struct.setDepartmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userAddress = iprot.readString();
                struct.setUserAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.role = iprot.readString();
                struct.setRoleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.department != null) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.userAddress != null) {
          oprot.writeFieldBegin(USER_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.userAddress);
          oprot.writeFieldEnd();
        }
        if (struct.role != null) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUser_argsTupleScheme getScheme() {
        return new modifyUser_argsTupleScheme();
      }
    }

    private static class modifyUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDepartment()) {
          optionals.set(0);
        }
        if (struct.isSetUserName()) {
          optionals.set(1);
        }
        if (struct.isSetUserAddress()) {
          optionals.set(2);
        }
        if (struct.isSetRole()) {
          optionals.set(3);
        }
        if (struct.isSetToken()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDepartment()) {
          oprot.writeString(struct.department);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetUserAddress()) {
          oprot.writeString(struct.userAddress);
        }
        if (struct.isSetRole()) {
          oprot.writeString(struct.role);
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.department = iprot.readString();
          struct.setDepartmentIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userAddress = iprot.readString();
          struct.setUserAddressIsSet(true);
        }
        if (incoming.get(3)) {
          struct.role = iprot.readString();
          struct.setRoleIsSet(true);
        }
        if (incoming.get(4)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyUser_result implements org.apache.thrift.TBase<modifyUser_result, modifyUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyUser_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyUser_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyUser_result.class, metaDataMap);
    }

    public modifyUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyUser_result(modifyUser_result other) {
    }

    public modifyUser_result deepCopy() {
      return new modifyUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that instanceof modifyUser_result)
        return this.equals((modifyUser_result)that);
      return false;
    }

    public boolean equals(modifyUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(modifyUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUser_resultStandardScheme getScheme() {
        return new modifyUser_resultStandardScheme();
      }
    }

    private static class modifyUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyUser_resultTupleScheme getScheme() {
        return new modifyUser_resultTupleScheme();
      }
    }

    private static class modifyUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
